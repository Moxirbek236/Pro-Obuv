{"file_contents":{"README.md":{"content":"# Restoran Tizimi — Flask\n\nFunktsiyalar:\n- Kirish sahifasi: **Foydalanuvchi** va **Xodim** tugmalari\n- Foydalanuvchi: ism kiritadi → avtomatik tartib raqami (ticket) va **ETA** (qanchada tayyor) ko'rsatiladi\n- Xodim: ID + parol bilan kiradi\n- Xodim registratsiyasi: ism, familiya, tug'ilgan sana, telefon, parol → avtomatik **ID** beriladi\n- Ma'lumotlar **SQLite** bazasida saqlanadi\n- Xodim paneli: barcha buyurtmalar ro'yxati, **Foydalanuvchi kutmoqda** va **Foydalanuvchiga berildi** holatlari\n- Xodim paneli va foydalanuvchi holati avtomatik yangilanadi (10s)\n\n## Ishga tushirish\n1) Python 3.10+ o'rnating.\n2) Virtual muhit (ixtiyoriy):\n```bash\npython -m venv .venv\n# Windows:\npython -m venv .venv\n# Linux/Mac:\nsource .venv/bin/activate\n```\n3) Kutubxonalar:\n```bash\npip install flask werkzeug\n```\n4) Ishga tushirish:\n```bash\npython app.py\n```\nBrauzerda oching: http://localhost:5000\n\n### Sozlamalar (ixtiyoriy)\n- `AVG_PREP_MINUTES` — bir buyurtmaning o'rtacha tayyorlanish vaqti (default 7 daqiqa)\n- `SECRET_KEY` — sessiya uchun kalit\n\nWindows PowerShell misol:\n```powershell\n$env:AVG_PREP_MINUTES=\"5\"\n$env:SECRET_KEY=\"yashirin_kalit\"\npython app.py\n```\n\n## Tuzilma\n```\napp.py\ntemplates/\n  base.html\n  index.html\n  user.html\n  user_success.html\n  staff_login.html\n  staff_register.html\n  staff_dashboard.html\nstatic/\n  style.css\n  main.js\ndatabase.sqlite3 (avtomatik yaratiladi)\n```\n\n## Eslatma\n- Parollar **xeshlanadi**.\n- Xodim ID raqami registratsiya yakunida **flash xabar** orqali ko'rsatiladi.\n- Realtime talab qilinmasa ham, avtomatik yangilanish uchun 10s polling qo'shilgan.\n- Agar boshqa maydonlar kerak bo'lsa (masalan, menyu, narxlar, to'lov), keyingi bosqichda qo'shamiz.\n","size_bytes":1698},"app.py":{"content":"import time\nimport string\nimport secrets as secrets_module\n\n# Global start time tracking\nstart_time = time.time()\n\n# Cleanup function\ndef cleanup_resources():\n    \"\"\"Resource cleanup on app shutdown\"\"\"\n    try:\n        if 'executor' in globals():\n            executor.shutdown(wait=True)\n        if 'db_pool' in globals() and hasattr(db_pool, 'connections'):\n            for conn in db_pool.connections:\n                try:\n                    conn.close()\n                except:\n                    pass\n        if 'app_logger' in globals():\n            app_logger.info(\"Resources cleaned up successfully\")\n    except Exception as e:\n        if 'app_logger' in globals():\n            app_logger.error(f\"Cleanup error: {str(e)}\")\n\nimport atexit\natexit.register(cleanup_resources)\n\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, g\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport sqlite3, os, datetime, json, uuid, secrets\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom flask_cors import CORS\nfrom flask_compress import Compress\nimport pytz\nimport qrcode\nfrom io import BytesIO\nimport base64\nimport requests\nfrom functools import wraps\nimport threading\nfrom contextlib import contextmanager\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\nimport hashlib\nfrom collections import defaultdict\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.middleware.profiler import ProfilerMiddleware\nfrom dotenv import load_dotenv\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\n# Redis import - optional\ntry:\n    import redis\n    REDIS_AVAILABLE = True\nexcept ImportError:\n    REDIS_AVAILABLE = False\n    redis = None\n\n# Environment variables yuklash\nload_dotenv()\n\napp = Flask(__name__)\n\n# Universal configuration class\nclass Config:\n    \"\"\"Universal dastur konfiguratsiyasi\"\"\"\n\n    # Environment detection\n    ENVIRONMENT = os.environ.get('FLASK_ENV', 'production')\n    IS_DEVELOPMENT = ENVIRONMENT == 'development'\n    IS_PRODUCTION = ENVIRONMENT == 'production'\n\n    # Database configuration\n    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///database.sqlite3')\n    SQLALCHEMY_DATABASE_URI = DATABASE_URL\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    # SQLite-specific engine options\n    if DATABASE_URL.startswith('sqlite'):\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'connect_args': {\n                'check_same_thread': False,\n                'timeout': 60\n            }\n        }\n    else:\n        # PostgreSQL options (if using PostgreSQL)\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'pool_timeout': 30,\n            'pool_recycle': 3600,\n            'pool_pre_ping': True\n        }\n\n    # Security configuration\n    SECRET_KEY = os.environ.get(\"SECRET_KEY\", secrets_module.token_urlsafe(32))\n    SESSION_COOKIE_SECURE = IS_PRODUCTION\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n    PERMANENT_SESSION_LIFETIME = 7200\n    WTF_CSRF_ENABLED = True\n\n    # File upload configuration\n    MAX_CONTENT_LENGTH = 32 * 1024 * 1024  # 32MB\n    UPLOAD_FOLDER = 'static/uploads'\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\n\n    # JSON configuration\n    JSON_SORT_KEYS = False\n    JSONIFY_PRETTYPRINT_REGULAR = IS_DEVELOPMENT\n\n    # Cache configuration\n    SEND_FILE_MAX_AGE_DEFAULT = 31536000 if IS_PRODUCTION else 300\n    REDIS_URL = os.environ.get('REDIS_URL', 'memory://')\n\n    # External APIs\n    YANDEX_GEOCODER_API = os.environ.get('YANDEX_GEOCODER_API', '')\n    GOOGLE_MAPS_API = os.environ.get('GOOGLE_MAPS_API', '')\n    SERPER_API_KEY = os.environ.get('SERPER_API_KEY', '1b077296f67499a12ee28ce232bb48221d29be14')\n\n    # Localization\n    DEFAULT_LANGUAGE = os.environ.get('DEFAULT_LANGUAGE', 'uz')\n    SUPPORTED_LANGUAGES = ['uz', 'ru', 'en', 'tr', 'ar']\n    DEFAULT_CURRENCY = os.environ.get('DEFAULT_CURRENCY', 'UZS')\n    TIMEZONE = os.environ.get('TIMEZONE', 'Asia/Tashkent')\n\n    # Business logic\n    AVG_PREP_MINUTES = int(os.environ.get(\"AVG_PREP_MINUTES\", \"7\"))\n    DELIVERY_BASE_PRICE = int(os.environ.get(\"DELIVERY_BASE_PRICE\", \"10000\"))\n    COURIER_BASE_RATE = int(os.environ.get(\"COURIER_BASE_RATE\", \"8000\"))\n    CASHBACK_PERCENTAGE = float(os.environ.get(\"CASHBACK_PERCENTAGE\", \"1.0\"))\n    MAX_DELIVERY_DISTANCE = float(os.environ.get(\"MAX_DELIVERY_DISTANCE\", \"50.0\"))\n\n    # Rate limiting\n    RATE_LIMIT_DAILY = int(os.environ.get(\"RATE_LIMIT_DAILY\", \"1000\"))\n    RATE_LIMIT_HOURLY = int(os.environ.get(\"RATE_LIMIT_HOURLY\", \"200\"))\n    RATE_LIMIT_MINUTE = int(os.environ.get(\"RATE_LIMIT_MINUTE\", \"50\"))\n\n    # Logging\n    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')\n    LOG_FILE_MAX_SIZE = int(os.environ.get('LOG_FILE_MAX_SIZE', '10485760'))  # 10MB\n    LOG_BACKUP_COUNT = int(os.environ.get('LOG_BACKUP_COUNT', '5'))\n\n    # Performance\n    THREAD_POOL_MAX_WORKERS = int(os.environ.get('THREAD_POOL_MAX_WORKERS', '10'))\n    DB_POOL_MAX_CONNECTIONS = int(os.environ.get('DB_POOL_MAX_CONNECTIONS', '20'))\n\n    # Admin credentials\n    SUPER_ADMIN_USERNAME = os.environ.get('SUPER_ADMIN_USERNAME', 'masteradmin')\n    SUPER_ADMIN_PASSWORD = os.environ.get('SUPER_ADMIN_PASSWORD', 'SuperAdmin2025!@#$%')\n\n# Apply configuration\napp.config.from_object(Config)\n\n# Professional middleware stack\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)\n\n# CORS support\nCORS(app, origins=['*'], methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])\n\n# Compression\nCompress(app)\n\n# Rate limiting with universal configuration\nlimiter = Limiter(\n    key_func=get_remote_address,\n    app=app,\n    default_limits=[\n        f\"{Config.RATE_LIMIT_DAILY} per day\",\n        f\"{Config.RATE_LIMIT_HOURLY} per hour\",\n        f\"{Config.RATE_LIMIT_MINUTE} per minute\"\n    ],\n    storage_uri=Config.REDIS_URL\n)\n\n# Performance profiling (faqat debug rejimida)\nif os.environ.get('FLASK_ENV') == 'development':\n    app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[30])\n\n# Upload papkasini yaratish\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# Logs papkasini yaratish\nos.makedirs('logs', exist_ok=True)\n\n# Advanced logging konfiguratsiyasi - funksiyani oldinroq e'lon qilish\ndef setup_logging():\n    \"\"\"Professional logging setup with structured logging\"\"\"\n    # Detailed formatter\n    detailed_formatter = logging.Formatter(\n        '%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s'\n    )\n\n    # Simple formatter\n    simple_formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s'\n    )\n\n    try:\n        # Rotating file handler (maksimal 10MB, 5 ta backup)\n        file_handler = RotatingFileHandler('logs/restaurant.log', maxBytes=10485760, backupCount=5)\n        file_handler.setFormatter(detailed_formatter)\n        file_handler.setLevel(logging.INFO)\n\n        # Error file handler\n        error_handler = RotatingFileHandler('logs/errors.log', maxBytes=10485760, backupCount=5)\n        error_handler.setFormatter(detailed_formatter)\n        error_handler.setLevel(logging.ERROR)\n\n        # Console handler - faqat development uchun\n        console_handler = logging.StreamHandler()\n        if Config.IS_DEVELOPMENT:\n            console_handler.setFormatter(simple_formatter)\n            console_handler.setLevel(logging.INFO)\n        else:\n            console_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n            console_handler.setLevel(logging.ERROR)\n\n        # Root logger konfiguratsiya\n        root_logger = logging.getLogger()\n        root_logger.setLevel(logging.INFO if Config.IS_DEVELOPMENT else logging.WARNING)\n        root_logger.addHandler(file_handler)\n        root_logger.addHandler(error_handler)\n        root_logger.addHandler(console_handler)\n\n        # Flask app logger\n        app.logger.setLevel(logging.INFO if Config.IS_DEVELOPMENT else logging.ERROR)\n        app.logger.addHandler(error_handler)\n\n        # Werkzeug loglarni sozlash\n        werkzeug_logger = logging.getLogger('werkzeug')\n        werkzeug_logger.setLevel(logging.WARNING)\n\n        return logging.getLogger('restaurant_app')\n\n    except Exception as e:\n        app_logger.error(f\"Logging setup failed: {e}\")\n        # Fallback logging\n        print(f\"Logging setup failed: {e}\")\n        return logging.getLogger('restaurant_app')\n\n# Logging ni sozlash\napp_logger = setup_logging()\n\n# Location service instance - xatolik bo'lsa fallback yaratish\ntry:\n    from location_service import LocationService\n    location_service = LocationService()\n    app_logger.info(\"Location service muvaffaqiyatli yuklandi\")\nexcept (ImportError, Exception) as e:\n    app_logger.warning(f\"Location service yuklanmadi: {str(e)}\")\n    class FallbackLocationService:\n        def search_places(self, query):\n            return {\"places\": [], \"error\": \"Location service not available\"}\n    location_service = FallbackLocationService()\n\n# Cache tizimi\nclass CacheManager:\n    def __init__(self):\n        self.memory_cache = {}\n        self.cache_timestamps = {}\n        self.cache_lock = threading.Lock()\n        self.redis_client = None\n        self._init_redis()\n\n    def _init_redis(self):\n        \"\"\"Redis connection (agar mavjud bo'lsa)\"\"\"\n        try:\n            if not REDIS_AVAILABLE:\n                return\n\n            redis_url = os.environ.get('REDIS_URL')\n            if redis_url and not redis_url.startswith('memory'):\n                self.redis_client = redis.from_url(redis_url)\n                self.redis_client.ping()\n                app_logger.info(\"Redis cache tizimi ulandi\")\n        except Exception as e:\n            app_logger.warning(f\"Redis ulanmadi, memory cache ishlatiladi: {str(e)}\")\n            self.redis_client = None\n\n    def get(self, key, default=None):\n        \"\"\"Cache dan ma'lumot olish\"\"\"\n        try:\n            if self.redis_client:\n                value = self.redis_client.get(f\"restaurant:{key}\")\n                if value:\n                    return json.loads(value.decode())\n\n            # Memory cache dan olish\n            with self.cache_lock:\n                if key in self.memory_cache:\n                    timestamp = self.cache_timestamps.get(key, 0)\n                    if time.time() - timestamp < 300:  # 5 daqiqa\n                        return self.memory_cache[key]\n                    else:\n                        del self.memory_cache[key]\n                        del self.cache_timestamps[key]\n        except Exception as e:\n            app_logger.error(f\"Cache get error: {str(e)}\")\n\n        return default\n\n    def set(self, key, value, ttl=300):\n        \"\"\"Cache ga ma'lumot saqlash\"\"\"\n        try:\n            if self.redis_client:\n                self.redis_client.setex(f\"restaurant:{key}\", ttl, json.dumps(value, default=str))\n\n            # Memory cache ga ham saqlash\n            with self.cache_lock:\n                self.memory_cache[key] = value\n                self.cache_timestamps[key] = time.time()\n\n                # Memory cache ni tozalash (maksimal 1000 ta element)\n                if len(self.memory_cache) > 1000:\n                    oldest_key = min(self.cache_timestamps.keys(), key=lambda k: self.cache_timestamps[k])\n                    del self.memory_cache[oldest_key]\n                    del self.cache_timestamps[oldest_key]\n        except Exception as e:\n            app_logger.error(f\"Cache set error: {str(e)}\")\n\n    def delete(self, key):\n        \"\"\"Cache dan o'chirish\"\"\"\n        try:\n            if self.redis_client:\n                self.redis_client.delete(f\"restaurant:{key}\")\n\n            with self.cache_lock:\n                self.memory_cache.pop(key, None)\n                self.cache_timestamps.pop(key, None)\n        except Exception as e:\n            app_logger.error(f\"Cache delete error: {str(e)}\")\n\n# Global cache manager\ncache_manager = CacheManager()\n\n# Rate limiting\nclass RateLimiter:\n    def __init__(self):\n        self.requests = defaultdict(list)\n        self.lock = threading.Lock()\n\n    def is_allowed(self, identifier, max_requests=100, window=3600):\n        \"\"\"Rate limiting tekshiruvi\"\"\"\n        current_time = time.time()\n\n        with self.lock:\n            # Eski so'rovlarni tozalash\n            self.requests[identifier] = [\n                req_time for req_time in self.requests[identifier]\n                if current_time - req_time < window\n            ]\n\n            # Yangi so'rovni qo'shish\n            if len(self.requests[identifier]) < max_requests:\n                self.requests[identifier].append(current_time)\n                return True\n\n            return False\n\nrate_limiter = RateLimiter()\n\n# Thread pool for async operations with configurable workers\nexecutor = ThreadPoolExecutor(max_workers=Config.THREAD_POOL_MAX_WORKERS)\n\n# Database fayl yo'lini to'g'rilash\nDB_PATH = os.path.join(os.path.dirname(__file__), \"database.sqlite3\")\n\nimport logging\nfrom logging.handlers import RotatingFileHandler, SMTPHandler\n\n\n\n# Global error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    app_logger.warning(f\"404 Error: {request.url}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Not found\", \"code\": 404}), 404\n\n    # Error template mavjudligini tekshirish\n    try:\n        return render_template('error.html', error_code=404, error_message=\"Sahifa topilmadi\"), 404\n    except:\n        return f\"\"\"\n        <h1>404 - Sahifa topilmadi</h1>\n        <p>So'ralgan sahifa mavjud emas.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    app_logger.error(f\"500 Error: {str(error)} - URL: {request.url}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Internal server error\", \"code\": 500}), 500\n\n    try:\n        return render_template('error.html', error_code=500, error_message=\"Server xatoligi\"), 500\n    except:\n        return f\"\"\"\n        <h1>500 - Server xatoligi</h1>\n        <p>Ichki server xatoligi yuz berdi.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 500\n\n@app.errorhandler(429)\ndef rate_limit_error(error):\n    app_logger.warning(f\"Rate limit exceeded: {request.remote_addr}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Rate limit exceeded\", \"code\": 429}), 429\n\n    try:\n        return render_template('error.html', error_code=429, error_message=\"Juda ko'p so'rov\"), 429\n    except:\n        return f\"\"\"\n        <h1>429 - Juda ko'p so'rov</h1>\n        <p>Juda ko'p so'rov yuborildi. Biroz kuting.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 429\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    \"\"\"Global exception handler\"\"\"\n    app_logger.error(f\"Unhandled exception: {str(e)} - URL: {request.url}\")\n\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\n            \"error\": \"Unexpected error occurred\",\n            \"code\": 500,\n            \"details\": str(e) if Config.IS_DEVELOPMENT else \"Internal server error\"\n        }), 500\n\n    try:\n        return render_template('error.html',\n                             error_code=500,\n                             error_message=\"Kutilmagan xatolik yuz berdi\"), 500\n    except:\n        return f\"\"\"\n        <h1>Kutilmagan xatolik</h1>\n        <p>Dasturda kutilmagan xatolik yuz berdi.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 500\n\n# Performance monitoring\nclass PerformanceMonitor:\n    def __init__(self):\n        self.request_times = []\n        self.lock = threading.Lock()\n        self.error_count = 0\n        self.success_count = 0\n        self.last_cleanup = time.time()\n\n    def record_request(self, duration, endpoint, status_code=200):\n        with self.lock:\n            try:\n                self.request_times.append({\n                    'duration': duration,\n                    'endpoint': endpoint,\n                    'timestamp': time.time(),\n                    'status_code': status_code\n                })\n\n                # Status ni hisoblash\n                if status_code >= 400:\n                    self.error_count += 1\n                else:\n                    self.success_count += 1\n\n                # Memory management - har 10 daqiqada eski ma'lumotlarni tozalash\n                current_time = time.time()\n                if current_time - self.last_cleanup > 600:  # 10 daqiqa\n                    cutoff_time = current_time - 3600  # 1 soat\n                    self.request_times = [\n                        req for req in self.request_times\n                        if req['timestamp'] > cutoff_time\n                    ]\n                    self.last_cleanup = current_time\n\n                # Faqat so'nggi 1000 ta so'rovni saqlash\n                if len(self.request_times) > 1000:\n                    self.request_times = self.request_times[-1000:]\n\n            except Exception as e:\n                app_logger.error(f\"Performance monitoring xatoligi: {str(e)}\")\n\n    def get_stats(self):\n        with self.lock:\n            if not self.request_times:\n                return {}\n\n            durations = [req['duration'] for req in self.request_times]\n            return {\n                'avg_response_time': sum(durations) / len(durations),\n                'max_response_time': max(durations),\n                'min_response_time': min(durations),\n                'total_requests': len(durations)\n            }\n\n# Performance monitor instance yaratish - to'g'ri e'lon qilish\ntry:\n    performance_monitor = PerformanceMonitor()\n    app_logger.info(\"Performance monitor muvaffaqiyatli yaratildi\")\nexcept Exception as e:\n    app_logger.warning(f\"Performance monitor yaratishda xatolik: {str(e)}\")\n    # Fallback performance monitor yaratish\n    class DummyPerformanceMonitor:\n        def record_request(self, duration, endpoint, status_code=200):\n            pass\n        def get_stats(self):\n            return {}\n    performance_monitor = DummyPerformanceMonitor()\n\n@app.before_request\ndef before_request():\n    \"\"\"So'rov boshlanishida xavfsiz pre-processing\"\"\"\n    try:\n        # Request time tracking\n        request.start_time = time.time()\n\n        # Session ni tekshirish va tuzatish\n        if not session.get('session_id') or session.get('session_id') == 'None':\n            session['session_id'] = get_session_id()\n\n        # Database connection test\n        if not hasattr(g, 'db_test_done'):\n            try:\n                test_conn = get_db()\n                test_conn.execute(\"SELECT 1\")\n                test_conn.close()\n                g.db_test_done = True\n            except Exception as db_error:\n                app_logger.error(f\"Database connection test failed: {str(db_error)}\")\n\n    except Exception as e:\n        app_logger.error(f\"Before request error: {str(e)}\")\n        # Error bo'lsa ham davom ettirish\n\n@app.after_request\ndef after_request(response):\n    \"\"\"Request tugagandan keyin ishlaydigan function\"\"\"\n    try:\n        end_time = time.time()\n        duration = end_time - getattr(g, 'start_time', end_time)\n\n        # Performance monitoring - check if it's a proper instance\n        if hasattr(performance_monitor, 'record_request') and callable(getattr(performance_monitor, 'record_request', None)):\n            performance_monitor.record_request(duration, request.endpoint, response.status_code)\n\n        # Security headers qo'shish\n        response.headers['X-Content-Type-Options'] = 'nosniff'\n        response.headers['X-Frame-Options'] = 'DENY'\n        response.headers['X-XSS-Protection'] = '1; mode=block'\n\n        # Cache headers faqat static files uchun emas\n        if not request.path.startswith('/static/'):\n            response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n            response.headers['Pragma'] = 'no-cache'\n            response.headers['Expires'] = '0'\n\n        if Config.IS_PRODUCTION:\n            response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n\n    except Exception as e:\n        # Silent pass - xavfsizlik uchun\n        pass\n\n    return response\n\n\n\nAVG_PREP_MINUTES = int(os.environ.get(\"AVG_PREP_MINUTES\", \"7\"))\n# o'rtacha tayyorlanish vaqti (daqiqalarda)\n\n# Initialize SQLAlchemy only if using PostgreSQL\nif Config.DATABASE_URL.startswith('postgresql'):\n    db = SQLAlchemy(app)\nelse:\n    db = None  # Use custom SQLite connection pool instead\n\n# O'zbekiston vaqt zonasi\nTASHKENT_TZ = pytz.timezone('Asia/Tashkent')\n\ndef get_current_time():\n    return datetime.datetime.now(TASHKENT_TZ)\n\n# Database connection pool\nclass DatabasePool:\n    def __init__(self, db_path, max_connections=20):\n        self.db_path = db_path\n        self.max_connections = max_connections\n        self.connections = []\n        self.lock = threading.Lock()\n        self._init_pool()\n\n    def _init_pool(self):\n        \"\"\"Connection pool ni ishga tushirish\"\"\"\n        for _ in range(5):  # Boshlang'ich 5 ta connection\n            conn = self._create_connection()\n            if conn:\n                self.connections.append(conn)\n\n    def _create_connection(self):\n        \"\"\"Yangi database connection yaratish\"\"\"\n        max_retries = 3\n        for attempt in range(max_retries):\n            try:\n                conn = sqlite3.connect(\n                    self.db_path,\n                    check_same_thread=False,\n                    timeout=30.0,\n                    isolation_level=None\n                )\n                conn.row_factory = sqlite3.Row\n\n                # SQLite optimallashtirish sozlamalari - xavfsiz\n                try:\n                    conn.execute(\"PRAGMA journal_mode=WAL\")\n                    conn.execute(\"PRAGMA synchronous=NORMAL\")\n                    conn.execute(\"PRAGMA cache_size=5000\")\n                    conn.execute(\"PRAGMA temp_store=MEMORY\")\n                    conn.execute(\"PRAGMA foreign_keys=ON\")\n                    conn.execute(\"PRAGMA busy_timeout=15000\")\n                except Exception as pragma_error:\n                    app_logger.warning(f\"PRAGMA settings failed: {str(pragma_error)}\")\n\n                # Connection test\n                conn.execute(\"SELECT 1\").fetchone()\n                return conn\n\n            except Exception as e:\n                app_logger.error(f\"Database connection attempt {attempt + 1} failed: {str(e)}\")\n                if attempt == max_retries - 1:\n                    app_logger.critical(f\"Database connection yaratishda XATOLIK: {str(e)}\")\n                    return None\n                time.sleep(0.5 * (attempt + 1))\n\n    @contextmanager\n    def get_connection(self):\n        \"\"\"Context manager orqali connection olish\"\"\"\n        conn = None\n        try:\n            with self.lock:\n                if self.connections:\n                    conn = self.connections.pop()\n                else:\n                    conn = self._create_connection()\n\n            if not conn:\n                raise Exception(\"Database connection olinmadi\")\n\n            yield conn\n\n        except Exception as e:\n            if conn:\n                try:\n                    conn.rollback()\n                except:\n                    pass\n            raise e\n        finally:\n            if conn:\n                try:\n                    with self.lock:\n                        if len(self.connections) < self.max_connections:\n                            self.connections.append(conn)\n                        else:\n                            conn.close()\n                except:\n                    pass\n\n# Global database pool with configurable max connections\ndb_pool = DatabasePool(DB_PATH, Config.DB_POOL_MAX_CONNECTIONS)\n\ndef get_db():\n    \"\"\"Legacy support uchun\"\"\"\n    return sqlite3.connect(DB_PATH, check_same_thread=False)\n\n# Optimized database operations\ndef execute_query(query, params=None, fetch_one=False, fetch_all=False):\n    \"\"\"Optimizatsiya qilingan database so'rovi\"\"\"\n    with db_pool.get_connection() as conn:\n        try:\n            cur = conn.cursor()\n\n            if params:\n                cur.execute(query, params)\n            else:\n                cur.execute(query)\n\n            if fetch_one:\n                result = cur.fetchone()\n                # Ensure result is a dictionary-like object for easier access\n                if result and hasattr(result, 'keys'):\n                    return dict(zip(result.keys(), result))\n                elif result:\n                    # Fallback for tuple results if row_factory is not set correctly\n                    return result\n                return None\n            elif fetch_all:\n                # fetch_all uchun alohida result olish\n                all_results = cur.fetchall()\n                if all_results and hasattr(all_results[0], 'keys'):\n                    return [dict(zip(row.keys(), row)) for row in all_results]\n                else:\n                    return all_results or []\n            else:\n                conn.commit()\n                return cur.lastrowid\n        except Exception as e:\n            conn.rollback()\n            raise e\n\ndef execute_many(query, params_list):\n    \"\"\"Bulk operations uchun optimizatsiya\"\"\"\n    with db_pool.get_connection() as conn:\n        try:\n            cur = conn.cursor()\n            cur.executemany(query, params_list)\n            conn.commit()\n            return cur.rowcount\n        except Exception as e:\n            conn.rollback()\n            raise e\n\ndef init_db():\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Foydalanuvchilar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL,\n            phone TEXT,\n            password_hash TEXT NOT NULL,\n            address TEXT,\n            card_number TEXT,\n            card_expiry TEXT,\n            created_at TEXT NOT NULL,\n            address_latitude REAL,\n            address_longitude REAL,\n            interface_language TEXT DEFAULT 'uz',\n            font_size TEXT DEFAULT 'medium',\n            dark_theme BOOLEAN DEFAULT 0\n        );\n    \"\"\")\n\n    # Xodimlar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS staff (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            birth_date TEXT NOT NULL,\n            phone TEXT NOT NULL,\n            passport_series TEXT NOT NULL,\n            passport_number TEXT NOT NULL,\n            password_hash TEXT NOT NULL,\n            total_hours REAL DEFAULT 0,\n            orders_handled INTEGER DEFAULT 0,\n            last_activity TEXT,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Kuryerlar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS couriers (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            birth_date TEXT NOT NULL,\n            phone TEXT NOT NULL,\n            passport_series TEXT NOT NULL,\n            passport_number TEXT NOT NULL,\n            password_hash TEXT NOT NULL,\n            total_hours REAL DEFAULT 0,\n            deliveries_completed INTEGER DEFAULT 0,\n            last_activity TEXT,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Buyurtmalar jadvali (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS orders (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            customer_name TEXT NOT NULL,\n            ticket_no INTEGER NOT NULL,\n            order_type TEXT NOT NULL, -- 'dine_in' yoki 'delivery'\n            status TEXT NOT NULL,\n            delivery_address TEXT,\n            delivery_distance REAL DEFAULT 0, -- masofa km da\n            delivery_price REAL DEFAULT 0, -- yetkazish narxi\n            delivery_latitude REAL,\n            delivery_longitude REAL,\n            delivery_map_url TEXT,\n            customer_note TEXT,\n            customer_phone TEXT,\n            card_number TEXT,\n            courier_id INTEGER,\n            courier_price REAL DEFAULT 0,\n            courier_delivery_minutes INTEGER DEFAULT 0,\n            branch_id INTEGER DEFAULT 1,\n            created_at TEXT NOT NULL,\n            eta_time TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (courier_id) REFERENCES couriers (id)\n        );\n    \"\"\")\n\n    # Tikketlar hisoblagich\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS counters (\n            name TEXT PRIMARY KEY,\n            value INTEGER NOT NULL\n        );\n    \"\"\")\n    cur.execute(\"INSERT OR IGNORE INTO counters (name, value) VALUES ('ticket', 10000);\")\n\n    # Menyu mahsulotlari (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS menu_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            price REAL NOT NULL,\n            category TEXT NOT NULL,\n            description TEXT,\n            image_url TEXT,\n            available BOOLEAN DEFAULT 1,\n            stock_quantity INTEGER DEFAULT 0,\n            orders_count INTEGER DEFAULT 0,\n            rating REAL DEFAULT 0.0,\n            discount_percentage REAL DEFAULT 0.0,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Sevimlilar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS favorites (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id),\n            UNIQUE(user_id, menu_item_id)\n        );\n    \"\"\")\n\n    # Savatcha jadvali (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS cart_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            session_id TEXT NOT NULL DEFAULT 'default_session',\n            menu_item_id INTEGER NOT NULL,\n            quantity INTEGER NOT NULL DEFAULT 1,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id)\n        );\n    \"\"\")\n\n    # Buyurtma tafsilotlari jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS order_details (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            order_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            quantity INTEGER NOT NULL,\n            price REAL NOT NULL,\n            FOREIGN KEY (order_id) REFERENCES orders (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id)\n        );\n    \"\"\")\n\n    # Baholar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS ratings (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),\n            comment TEXT,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id),\n            UNIQUE(user_id, menu_item_id)\n        );\n    \"\"\")\n\n    # Savollar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS questions (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_name TEXT NOT NULL,\n            email TEXT,\n            phone TEXT,\n            subject TEXT NOT NULL,\n            message TEXT NOT NULL,\n            status TEXT DEFAULT 'pending',\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Cheklar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS receipts (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            order_id INTEGER NOT NULL,\n            receipt_number TEXT NOT NULL UNIQUE,\n            total_amount REAL NOT NULL,\n            cashback_amount REAL NOT NULL,\n            cashback_percentage REAL DEFAULT 1.0,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (order_id) REFERENCES orders (id)\n        );\n    \"\"\")\n\n    # Filiallar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS branches (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            address TEXT NOT NULL,\n            latitude REAL NOT NULL,\n            longitude REAL NOT NULL,\n            phone TEXT,\n            working_hours TEXT DEFAULT '09:00-22:00',\n            is_active BOOLEAN DEFAULT 1,\n            delivery_radius REAL DEFAULT 15.0,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Boshlang'ich taomlar qo'shish\n    cur.execute(\"SELECT COUNT(*) FROM menu_items\")\n    if cur.fetchone()[0] == 0:\n        now = get_current_time().isoformat()\n        sample_items = [\n            ('Osh', 25000, 'food', 'An\\'anaviy o\\'zbek taomi, guruch va go\\'sht bilan', '/static/images/osh.jpg', 1, 50, 0, 4.5, 0.0, now),\n            ('Manti', 20000, 'food', 'Bug\\'da pishirilgan go\\'shtli manti', '/static/images/manti.jpg', 1, 30, 0, 4.8, 5.0, now),\n            ('Shashlik', 30000, 'food', 'Mangalda pishirilgan mazali shashlik', '/static/images/shashlik.jpg', 1, 25, 0, 4.7, 0.0, now),\n            ('Lagmon', 22000, 'food', 'Qo\\'l tortmasi bilan tayyorlangan lagmon', '/static/images/lagmon.jpg', 1, 40, 0, 4.6, 10.0, now),\n            ('Choy', 5000, 'drink', 'Issiq qora choy', '/static/images/choy.jpg', 1, 100, 0, 4.2, 0.0, now),\n            ('Qora choy', 6000, 'drink', 'O\\'zbek an\\'anaviy choy', '/static/images/qora_choy.jpg', 1, 80, 0, 4.3, 0.0, now),\n            ('Kompot', 8000, 'drink', 'Mevali kompot', '/static/images/kompot.jpg', 1, 60, 0, 4.1, 15.0, now),\n            ('Coca Cola', 10000, 'drink', 'Sovuq ichimlik', '/static/images/coca_cola.jpg', 1, 70, 0, 4.0, 0.0, now),\n        ]\n        cur.executemany(\"INSERT INTO menu_items (name, price, category, description, image_url, available, stock_quantity, orders_count, rating, discount_percentage, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", sample_items)\n\n    # Boshlang'ich filiallarni qo'shish\n    cur.execute(\"SELECT COUNT(*) FROM branches\")\n    if cur.fetchone()[0] == 0:\n        now = get_current_time().isoformat()\n        sample_branches = [\n            ('Markaziy filial', 'Amir Temur ko\\'chasi 1, Toshkent', 41.2995, 69.2401, '+998712345678', '09:00-23:00', 1, 20.0, now),\n            ('Chilonzor filiali', 'Chilonzor tumani, Bunyodkor ko\\'chasi 10', 41.2753, 69.2056, '+998712345679', '09:00-22:00', 1, 15.0, now),\n            ('Yunusobod filiali', 'Yunusobod tumani, Shahrisabz ko\\'chasi 5', 41.3506, 69.2896, '+998712345680', '08:00-22:00', 1, 18.0, now),\n            ('Sergeli filiali', 'Sergeli tumani, Yangi Sergeli MFY', 41.2278, 69.2233, '+998712345681', '09:00-22:00', 1, 12.0, now),\n        ]\n        cur.executemany(\"INSERT INTO branches (name, address, latitude, longitude, phone, working_hours, is_active, delivery_radius, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\", sample_branches)\n\n    conn.commit()\n    conn.close()\n\ndef ensure_orders_columns():\n    \"\"\"Orders jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(orders);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'status' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN status TEXT NOT NULL DEFAULT 'waiting';\")\n            conn.commit()\n\n        if 'user_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN user_id INTEGER;\")\n            conn.commit()\n\n        if 'delivery_address' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_address TEXT;\")\n            conn.commit()\n\n        if 'delivery_distance' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_distance REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'delivery_price' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_price REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'customer_phone' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN customer_phone TEXT;\")\n            conn.commit()\n\n        if 'card_number' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN card_number TEXT;\")\n            conn.commit()\n\n        if 'courier_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_id INTEGER;\")\n            conn.commit()\n\n        if 'order_type' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN order_type TEXT NOT NULL DEFAULT 'dine_in';\")\n            conn.commit()\n\n        if 'delivery_latitude' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_latitude REAL;\")\n            conn.commit()\n\n        if 'delivery_longitude' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_longitude REAL;\")\n            conn.commit()\n\n        if 'courier_delivery_time' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_delivery_time INTEGER DEFAULT 30;\")\n            conn.commit()\n\n        if 'delivery_map_url' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_map_url TEXT;\")\n            conn.commit()\n\n        if 'customer_note' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN customer_note TEXT;\")\n            conn.commit()\n\n        if 'courier_price' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_price REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'courier_delivery_minutes' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_delivery_minutes INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'branch_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN branch_id INTEGER DEFAULT 1;\")\n            conn.commit()\n\n    except Exception as e:\n        app_logger.error(f\"Orders jadval migration xatoligi: {str(e)}\")\n        logging.error(f\"Orders jadval migration xatoligi: {str(e)}\")\n    finally:\n        conn.close()\n\ndef ensure_users_columns():\n    \"\"\"Users jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(users);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'address_latitude' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN address_latitude REAL;\")\n            conn.commit()\n\n        if 'address_longitude' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN address_longitude REAL;\")\n            conn.commit()\n\n        if 'interface_language' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN interface_language TEXT DEFAULT 'uz';\")\n            conn.commit()\n\n        if 'font_size' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN font_size TEXT DEFAULT 'medium';\")\n            conn.commit()\n\n        if 'dark_theme' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN dark_theme BOOLEAN DEFAULT 0;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_cart_items_columns():\n    \"\"\"Cart_items jadvaliga user_id ustunini qo'shadi va session_id ni optional qiladi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(cart_items);\")\n        cols = [r[1] for r in cur.fetchall()]\n        if 'user_id' not in cols:\n            cur.execute(\"ALTER TABLE cart_items ADD COLUMN user_id INTEGER;\")\n            conn.commit()\n\n        # Eski jadval strukturasini yangilash - session_id ni NULL qilib qo'yish\n        cur.execute(\"UPDATE cart_items SET session_id = 'temp_session' WHERE session_id IS NULL OR session_id = ''\")\n        conn.commit()\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_staff_columns():\n    \"\"\"Staff jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(staff);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'passport_series' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN passport_series TEXT;\")\n            conn.commit()\n\n        if 'passport_number' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN passport_number TEXT;\")\n            conn.commit()\n\n        if 'orders_handled' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN orders_handled INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'last_activity' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN last_activity TEXT;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_courier_columns():\n    \"\"\"Courier jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(couriers);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'passport_series' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN passport_series TEXT;\")\n            conn.commit()\n\n        if 'passport_number' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN passport_number TEXT;\")\n            conn.commit()\n\n        if 'total_hours' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN total_hours REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'deliveries_completed' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN deliveries_completed INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'last_activity' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN last_activity TEXT;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_menu_items_columns():\n    \"\"\"Menu_items jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = None\n    try:\n        conn = get_db()\n        cur = conn.cursor()\n\n        cur.execute(\"PRAGMA table_info(menu_items);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        # Kerakli ustunlarni qo'shish\n        columns_to_add = [\n            ('description', 'TEXT'),\n            ('image_url', 'TEXT'),\n            ('available', 'BOOLEAN DEFAULT 1'),\n            ('stock_quantity', 'INTEGER DEFAULT 0'),\n            ('orders_count', 'INTEGER DEFAULT 0'),\n            ('rating', 'REAL DEFAULT 0.0'),\n            ('discount_percentage', 'REAL DEFAULT 0.0'),\n            ('created_at', 'TEXT')\n        ]\n\n        for col_name, col_type in columns_to_add:\n            if col_name not in cols:\n                try:\n                    cur.execute(f\"ALTER TABLE menu_items ADD COLUMN {col_name} {col_type};\")\n                    conn.commit()\n                    app_logger.info(f\"Menu_items jadvaliga {col_name} ustuni qo'shildi\")\n                except Exception as col_error:\n                    app_logger.warning(f\"Menu_items jadvaliga {col_name} ustunini qo'shishda xatolik: {str(col_error)}\")\n\n    except Exception as e:\n        app_logger.error(f\"Menu items migration xatoligi: {str(e)}\")\n    finally:\n        if conn:\n            conn.close()\n\ndef cleanup_expired_orders():\n    \"\"\"Waiting holatidagi, 30 daqiqadan oshgan buyurtmalarni cancelled ga o'tkazadi.\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    cutoff = (get_current_time() - datetime.timedelta(minutes=30)).isoformat()\n    try:\n        cur.execute(\"UPDATE orders SET status='cancelled' WHERE status='waiting' AND created_at < ?\", (cutoff,))\n        conn.commit()\n    except Exception as e:\n        pass\n    conn.close()\n\ndef safe_init_database():\n    \"\"\"Xavfsiz ma'lumotlar bazasini ishga tushirish\"\"\"\n    try:\n        app_logger.info(\"Ma'lumotlar bazasini ishga tushirish boshlandi...\")\n        init_db()\n        app_logger.info(\"Ma'lumotlar bazasi muvaffaqiyatli ishga tushirildi\")\n        return True\n    except Exception as e:\n        app_logger.error(f\"Ma'lumotlar bazasini ishga tushirishda xatolik: {str(e)}\")\n        try:\n            # Fallback - basic initialization\n            conn = sqlite3.connect(DB_PATH)\n            conn.execute(\"CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY)\")\n            conn.close()\n            app_logger.warning(\"Ma'lumotlar bazasi qisman ishga tushirildi\")\n            return False\n        except Exception as fallback_error:\n            app_logger.critical(f\"Ma'lumotlar bazasi fallback ham ishlamadi: {str(fallback_error)}\")\n            return False\n\ndef create_minimal_app():\n    \"\"\"Minimal Flask app yaratish (emergency fallback)\"\"\"\n    from flask import Flask as MinimalFlask\n\n    minimal_app = MinimalFlask(__name__)\n    minimal_app.secret_key = 'emergency-fallback-key'\n\n    @minimal_app.route('/')\n    def emergency_home():\n        return \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Restaurant System - Emergency Mode</title>\n            <meta charset=\"utf-8\">\n            <style>\n                body { font-family: Arial, sans-serif; margin: 50px; background: #f5f5f5; }\n                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }\n                .error { color: #d32f2f; background: #ffebee; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                .info { color: #1976d2; background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                h1 { color: #333; }\n                .btn { background: #1976d2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>🆘 Restaurant System - Emergency Mode</h1>\n                <div class=\"error\">\n                    <strong>Server xatoligi:</strong> Asosiy tizim ishga tushmadi.\n                </div>\n                <div class=\"info\">\n                    <strong>Status:</strong> Emergency fallback server ishlayapti.\n                </div>\n                <p>Iltimos, quyidagi amallarni bajaring:</p>\n                <ul>\n                    <li>Server loglarini tekshiring</li>\n                    <li>Dependencies o'rnatilganligini tekshiring</li>\n                    <li>Database fayli mavjudligini tekshiring</li>\n                    <li>Replit console da xatolarni ko'ring</li>\n                </ul>\n                <a href=\"/\" class=\"btn\">Qayta urinish</a>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n\n    @minimal_app.route('/health')\n    def emergency_health():\n        return {\"status\": \"emergency\", \"message\": \"Minimal fallback server\"}\n\n    return minimal_app\n\n# Ensure columns exist on startup\nensure_orders_columns()\nensure_cart_items_columns()\nensure_staff_columns()\nensure_courier_columns()\nensure_menu_items_columns()\nensure_users_columns()\n\n\n# Database ni xavfsiz ishga tushirish\nwith app.app_context():\n    try:\n        safe_init_database()\n    except Exception as init_error:\n        app_logger.error(f\"App context da database initialization xatoligi: {str(init_error)}\")\n\n# ---------- Helpers ----------\n\ndef next_ticket_no(conn):\n    cur = conn.cursor()\n    cur.execute(\"UPDATE counters SET value = value + 1 WHERE name = 'ticket';\")\n    cur.execute(\"SELECT value FROM counters WHERE name = 'ticket';\")\n    return cur.fetchone()[0]\n\ndef waiting_position(conn):\n    cur = conn.cursor()\n    cur.execute(\"SELECT COUNT(*) FROM orders WHERE status='waiting';\")\n    return cur.fetchone()[0]\n\ndef calc_eta_minutes(conn):\n    # navbatdagi pozitsiya bo'yicha ETA ni hisoblash\n    position = waiting_position(conn)  # sizdan oldingi kutayotganlar soni\n    eta_minutes = (position + 1) * AVG_PREP_MINUTES\n    return eta_minutes\n\ndef get_user_queue_position(conn, ticket_no):\n    # Foydalanuvchining navbatdagi o'rni\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n        SELECT COUNT(*) FROM orders\n        WHERE status='waiting' AND created_at < (\n            SELECT created_at FROM orders WHERE ticket_no=? AND status='waiting'\n        )\n    \"\"\", (ticket_no,))\n    result = cur.fetchone()\n    return result[0] + 1 if result else 0\n\ndef fmt_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef search_location_with_serper(query, gl=\"uz\", hl=\"uz\"):\n    \"\"\"Serper API orqali joylashuvlarni qidirish\"\"\"\n    try:\n        url = \"https://google.serper.dev/search\"\n        headers = {\n            'X-API-KEY': Config.SERPER_API_KEY, # Config dan API kalitini olish\n            'Content-Type': 'application/json'\n        }\n        data = {\n            \"q\": query,\n            \"gl\": gl,\n            \"hl\": hl\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            app_logger.error(f\"Serper API search error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        app_logger.error(f\"Serper API xatoligi: {e}\")\n        return None\n\ndef get_places_with_serper(query, gl=\"uz\", hl=\"uz\"):\n    \"\"\"Serper API orqali Google Places ma'lumotlarini olish\"\"\"\n    try:\n        url = \"https://google.serper.dev/places\"\n        headers = {\n            'X-API-KEY': Config.SERPER_API_KEY, # Config dan API kalitini olish\n            'Content-Type': 'application/json'\n        }\n        data = {\n            \"q\": query,\n            \"gl\": gl,\n            \"hl\": hl\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            app_logger.error(f\"Serper API places error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        app_logger.error(f\"Serper Places API xatoligi: {e}\")\n        return None\n\ndef validate_delivery_address(address):\n    \"\"\"Yetkazib berish manzilini tekshirish Yandex API orqali\"\"\"\n    if not address:\n        return False, \"Manzil kiritilmagan\"\n\n    # Yandex API kaliti mavjudligini tekshirish\n    if not app.config['YANDEX_GEOCODER_API']:\n        app_logger.warning(\"Yandex Geocoding API kaliti belgilanmagan. Manzil tekshiruvi cheklangan.\")\n        # Agar API kaliti bo'lmasa, oddiy tekshiruv\n        if len(address) > 5 and any(word in address.lower() for word in ['ko\\'cha', 'mahalla', 'tuman', 'shoh', 'yo\\'l']):\n            return True, \"Manzil qabul qilindi (API kaliti yo'q)\"\n        else:\n            return False, \"Manzilni to'liqroq kiriting (API kaliti yo'q)\"\n\n    try:\n        # Yandex Geocoding API orqali manzilni tekshirish\n        geocoding_url = \"https://geocode-maps.yandex.ru/1.x/\"\n        params = {\n            'apikey': app.config['YANDEX_GEOCODER_API'],\n            'geocode': f\"{address}, Toshkent, O'zbekiston\",\n            'format': 'json',\n            'results': 1\n        }\n\n        response = requests.get(geocoding_url, params=params, timeout=5)\n\n        if response.status_code == 200:\n            data = response.json()\n\n            # Natijalarni tekshirish\n            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])\n\n            if geo_objects:\n                return True, \"Manzil topildi\"\n            else:\n                return False, \"Manzil topilmadi\"\n        else:\n            app_logger.error(f\"Yandex Geocoding API error: {response.status_code} - {response.text}\")\n            # API ishlamasa, oddiy tekshirish\n            if len(address) > 5 and any(word in address.lower() for word in ['ko\\'cha', 'mahalla', 'tuman', 'shoh', 'yo\\'l']):\n                return True, \"Manzil qabul qilindi (API xatosi)\"\n            else:\n                return False, \"Manzilni to'liqroq kiriting (API xatosi)\"\n\n    except Exception as e:\n        # Xatolik bo'lsa, oddiy tekshirish\n        app_logger.error(f\"Manzil tekshirishda umumiy xatolik: {str(e)}\")\n        if len(address) > 5:\n            return True, \"Manzil qabul qilindi (Xatolik)\"\n        else:\n            return False, \"Manzilni to'liqroq kiriting (Xatolik)\"\n\ndef calculate_delivery_distance(address):\n    \"\"\"Yetkazib berish masofasini hisoblash Yandex API orqali\"\"\"\n    # Yandex API kaliti mavjudligini tekshirish\n    if not app.config['YANDEX_GEOCODER_API']:\n        app_logger.warning(\"Yandex Geocoding API kaliti belgilanmagan. Masofa hisoblash cheklangan.\")\n        # Agar API kaliti bo'lmasa, taxminiy masofa\n        return calculate_distance_fallback(address)\n\n    try:\n        # Restoran koordinatalari (Toshkent markazi)\n        restaurant_coords = [41.2995, 69.2401]\n\n        # Yandex Geocoding API orqali manzilni manzilga o'tkazish\n        geocoding_url = \"https://geocode-maps.yandex.ru/1.x/\"\n        params = {\n            'apikey': app.config['YANDEX_GEOCODER_API'],\n            'geocode': f\"{address}, Toshkent, O'zbekiston\",\n            'format': 'json',\n            'results': 1\n        }\n\n        response = requests.get(geocoding_url, params=params, timeout=5)\n\n        if response.status_code == 200:\n            data = response.json()\n            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])\n\n            if geo_objects:\n                # Koordinatalarni olish\n                point = geo_objects[0]['GeoObject']['Point']['pos'].split()\n                dest_coords = [float(point[1]), float(point[0])]  # lat, lng formatida\n\n                # To'g'ri chiziq bo'yicha masofa hisoblash (Haversine formula)\n                import math\n\n                lat1, lng1 = math.radians(restaurant_coords[0]), math.radians(restaurant_coords[1])\n                lat2, lng2 = math.radians(dest_coords[0]), math.radians(dest_coords[1])\n\n                dlat = lat2 - lat1\n                dlng = lng2 - lng1\n\n                a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2\n                c = 2 * math.asin(math.sqrt(a))\n                distance_km = 6371 * c  # Yer radiusi 6371 km\n\n                return round(min(50, max(0.5, distance_km)), 1)\n            else:\n                # Agar Yandex API manzilni topa olmasa, fallback\n                return calculate_distance_fallback(address)\n\n        else:\n            app_logger.error(f\"Yandex Geocoding API distance error: {response.status_code} - {response.text}\")\n            return calculate_distance_fallback(address) # Agar API xato bersa, fallback\n\n    except Exception as e:\n        app_logger.error(f\"Masofa hisoblashda umumiy xatolik: {str(e)}\")\n        return calculate_distance_fallback(address) # Umumiy xatolikda fallback\n\ndef calculate_distance_fallback(address):\n    \"\"\"Masofa hisoblash uchun fallback funksiyasi\"\"\"\n    address_lower = address.lower()\n    if 'toshkent' in address_lower or 'алмазар' in address_lower or 'olmazor' in address_lower:\n        if any(word in address_lower for word in ['chilonzor', 'olmazor', 'shayxontohur']):\n            return 8.0\n        elif any(word in address_lower for word in ['yunusobod', 'yashnobod']):\n            return 12.0\n        elif any(word in address_lower for word in ['sergeli', 'bektemir']):\n            return 15.0\n        else:\n            return 5.0\n    elif 'sirdaryo' in address_lower or 'jizzax' in address_lower:\n        return 20.0\n    elif 'samarqand' in address_lower:\n        return 30.0\n    else:\n        return 7.0 # Umumiy taxminiy qiymat\n\n\ndef find_nearest_branch(user_latitude, user_longitude):\n    \"\"\"Foydalanuvchiga eng yaqin filialni topish\"\"\"\n    import math\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM branches WHERE is_active = 1\")\n    branches_raw = cur.fetchall() or [] # Ensure branches_raw is a list\n    conn.close()\n\n    if not branches_raw:\n        return None\n\n    nearest_branch = None\n    min_distance = float('inf')\n\n    for branch_row in branches_raw:\n        try:\n            # Safe access to branch data, assuming branch_row is a dictionary-like object from fetchall\n            branch = dict(branch_row)\n\n            # Ensure coordinates and radius are valid numbers\n            branch_lat = float(branch.get('latitude', 0)) if branch.get('latitude') is not None else 0\n            branch_lng = float(branch.get('longitude', 0)) if branch.get('longitude') is not None else 0\n            delivery_radius = float(branch.get('delivery_radius', 15.0)) if branch.get('delivery_radius') is not None else 15.0\n\n            if not branch_lat or not branch_lng:\n                continue # Skip if coordinates are missing or invalid\n\n            # Haversine formula bilan masofa hisoblash\n            lat1, lng1 = math.radians(user_latitude), math.radians(user_longitude)\n            lat2, lng2 = math.radians(branch_lat), math.radians(branch_lng)\n\n            dlat = lat2 - lat1\n            dlng = lng2 - lng1\n\n            a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2\n            c = 2 * math.asin(math.sqrt(a))\n            distance = 6371 * c  # Yer radiusi 6371 km\n\n            if distance < min_distance and distance <= delivery_radius:\n                min_distance = distance\n                nearest_branch = {\n                    'branch': branch,\n                    'distance': round(distance, 2)\n                }\n        except (ValueError, TypeError, KeyError, IndexError) as e:\n            app_logger.warning(f\"Filial ma'lumotlarini qayta ishlashda xatolik (ID: {branch_row.get('id', 'N/A')}): {str(e)}\")\n            continue # Skip this branch if error occurs\n\n    return nearest_branch\n\ndef calculate_delivery_cost_and_time(distance_km):\n    \"\"\"Masofa bo'yicha yetkazib berish narxi va vaqtini hisoblash\"\"\"\n    # 1 km uchun 10000 so'm, 2 km uchun 20000 so'm\n    base_price = 10000\n    price = distance_km * base_price\n\n    # 1 km taxminan 10 daqiqada\n    delivery_time_minutes = max(10, int(distance_km * 10))\n\n    return round(price), delivery_time_minutes\n\ndef auto_calculate_courier_delivery_price(distance_km):\n    \"\"\"Kuryer uchun avtomatik yetkazish narxini hisoblash\"\"\"\n    # Asosiy narx: 1 km uchun 8000 so'm\n    base_rate = 8000\n\n    # Masofa bo'yicha narx hisoblash\n    distance_price = distance_km * base_rate\n\n    # Minimum narx 15000 so'm\n    minimum_price = 15000\n\n    # Maksimum narx 50000 so'm (juda uzoq masofalar uchun)\n    maximum_price = 50000\n\n    # Yakuniy narx\n    final_price = max(minimum_price, min(distance_price, maximum_price))\n\n    # Yetkazish vaqti: 1 km = 8 daqiqa (shahar trafigi hisobga olingan)\n    delivery_time = max(15, int(distance_km * 8))\n\n    return round(final_price), delivery_time\n\ndef get_branch_average_rating(branch_id):\n    \"\"\"Filial uchun o'rtacha bahoni hisoblash\"\"\"\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Filial uchun berilgan baholarni olish (menu_item_id = -branch_id)\n            cur.execute(\"\"\"\n                SELECT AVG(CAST(rating AS REAL)) as avg_rating, COUNT(*) as total_ratings\n                FROM ratings\n                WHERE menu_item_id = ?\n            \"\"\", (-branch_id,))\n\n            result = cur.fetchone()\n\n            if result and result[0] is not None:\n                # Xavfsiz type conversion\n                try:\n                    avg_rating = float(str(result[0])) if result[0] is not None else 0.0\n                    total_ratings = int(str(result[1])) if result[1] is not None else 0\n                except (ValueError, TypeError):\n                    avg_rating = 0.0\n                    total_ratings = 0\n\n                return {\n                    'average_rating': round(avg_rating, 1),\n                    'total_ratings': total_ratings\n                }\n\n        return {\n            'average_rating': 0.0,\n            'total_ratings': 0\n        }\n\n    except Exception as e:\n        app_logger.error(f\"Filial bahosini hisoblashda xatolik: {str(e)}\")\n        return {\n            'average_rating': 0.0,\n            'total_ratings': 0\n        }\n\ndef generate_qr_code(receipt_data):\n    \"\"\"Chek uchun QR kod yaratish\"\"\"\n    # Soliq.uz uchun chek ma'lumotlari\n    qr_data = {\n        \"receipt_number\": receipt_data.get('receipt_number', 'N/A'),\n        \"total_amount\": receipt_data.get('total_amount', 0.0),\n        \"cashback_amount\": receipt_data.get('cashback_amount', 0.0),\n        \"date\": receipt_data.get('receipt_created', '')[:10],\n        \"time\": receipt_data.get('receipt_created', '')[11:19],\n        \"restaurant\": \"O'zbek Milliy Taomlar Restorani\",\n        \"inn\": \"123456789\",  # Restoran INN raqami\n        \"cashback_percent\": receipt_data.get('cashback_percentage', 1.0)\n    }\n\n    # JSON formatda ma'lumotlarni tayyorlash\n    qr_text = json.dumps(qr_data, ensure_ascii=False)\n\n    # QR kod yaratish\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=10,\n        border=4,\n    )\n    qr.add_data(qr_text)\n    qr.make(fit=True)\n\n    # QR kod rasmini yaratish\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n    # Base64 formatga o'tkazish\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n\n    return img_str\n\ndef get_session_id():\n    \"\"\"Session ID yaratish yoki olish - yaxshilangan versiya\"\"\"\n    try:\n        # Session mavjudligini tekshirish\n        if not session or 'session_id' not in session or not session['session_id'] or session['session_id'] == 'None':\n            import uuid as uuid_module\n            session_id = str(uuid_module.uuid4())\n            session['session_id'] = session_id\n            session.permanent = True  # Session ni permanent qilish\n\n            # Session timeout belgilash\n            session.permanent_session_lifetime = datetime.timedelta(days=30)\n\n            app_logger.info(f\"Yangi session yaratildi: {session_id[:8]}...\")\n            return session_id\n\n        # Mavjud session ID ni validatsiya qilish\n        session_id = session['session_id']\n        if len(session_id) < 10:  # UUID minimal uzunlik tekshiruvi\n            import uuid as uuid_module\n            new_session_id = str(uuid_module.uuid4())\n            session['session_id'] = new_session_id\n            app_logger.warning(f\"Noto'g'ri session ID tuzatildi: {session_id} -> {new_session_id[:8]}...\")\n            return new_session_id\n\n        return session_id\n\n    except Exception as e:\n        app_logger.error(f\"Session ID yaratishda xatolik: {str(e)}\")\n        # Fallback - oddiy UUID\n        import uuid as uuid_module\n        fallback_id = str(uuid_module.uuid4())\n        try:\n            session['session_id'] = fallback_id\n            session.permanent = True\n        except:\n            pass  # Agar session ishlamasa ham davom etish\n        return fallback_id\n\ndef get_cart_items(conn, session_id, user_id=None):\n    \"\"\"Savatchadagi mahsulotlarni olish - xavfsizligi yuqori\"\"\"\n    if not conn:\n        app_logger.error(\"Database connection not available in get_cart_items\")\n        return []\n\n    cur = conn.cursor()\n\n    try:\n        # Parametrlarni tekshirish\n        if not session_id and not user_id:\n            app_logger.warning(\"Neither session_id nor user_id provided to get_cart_items\")\n            return []\n\n        if user_id:\n            # Asosiy so'rov\n            cur.execute(\"\"\"\n                SELECT ci.id, ci.menu_item_id, mi.name, mi.price, ci.quantity,\n                       COALESCE(mi.discount_percentage, 0) as discount_percentage,\n                       CASE\n                           WHEN COALESCE(mi.discount_percentage, 0) > 0\n                           THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                           ELSE mi.price * ci.quantity\n                       END as total\n                FROM cart_items ci\n                JOIN menu_items mi ON ci.menu_item_id = mi.id\n                WHERE ci.user_id = ? AND mi.available = 1\n                ORDER BY ci.created_at DESC\n            \"\"\", (user_id,))\n        else:\n            cur.execute(\"\"\"\n                SELECT ci.id, ci.menu_item_id, mi.name, mi.price, ci.quantity,\n                       COALESCE(mi.discount_percentage, 0) as discount_percentage,\n                       CASE\n                           WHEN COALESCE(mi.discount_percentage, 0) > 0\n                           THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                           ELSE mi.price * ci.quantity\n                       END as total\n                FROM cart_items ci\n                JOIN menu_items mi ON ci.menu_item_id = mi.id\n                WHERE ci.session_id = ? AND mi.available = 1\n                ORDER BY ci.created_at DESC\n            \"\"\", (session_id,))\n\n        results = cur.fetchall()\n\n        # Agar natijalar bo'lmasa, bo'sh list qaytarish\n        if not results:\n            return []\n\n        # Row obyektlarini dict formatiga o'tkazish\n        cart_items = []\n        for row in results:\n            try:\n                # SQLite Row obyektini dict ga o'tkazish\n                if hasattr(row, 'keys'):\n                    item_dict = dict(zip(row.keys(), row))\n                else:\n                    # Tuple holatida bo'lsa\n                    item_dict = {\n                        'id': row[0],\n                        'menu_item_id': row[1],\n                        'name': row[2],\n                        'price': row[3],\n                        'quantity': row[4],\n                        'discount_percentage': row[5] if row[5] is not None else 0,\n                        'total': row[6] if len(row) > 6 else row[3] * row[4]\n                    }\n\n                # discount_percentage ni tekshirish va None bo'lsa 0 qilib qo'yish\n                if item_dict.get('discount_percentage') is None:\n                    item_dict['discount_percentage'] = 0\n\n                cart_items.append(item_dict)\n            except Exception as row_error:\n                app_logger.error(f\"Savatcha element o'qishda xatolik: {str(row_error)}\")\n                continue\n\n        return cart_items\n\n    except Exception as e:\n        app_logger.error(f\"Savatcha ma'lumotlarini olishda xatolik: {str(e)}\")\n        return []\n\ndef get_cart_total(conn, session_id, user_id=None):\n    \"\"\"Savatchaning umumiy summasini hisoblash\"\"\"\n    cur = conn.cursor()\n    if user_id:\n        cur.execute(\"\"\"\n            SELECT SUM(\n                CASE\n                    WHEN COALESCE(mi.discount_percentage, 0) > 0\n                    THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                    ELSE mi.price * ci.quantity\n                END\n            )\n            FROM cart_items ci\n            JOIN menu_items mi ON ci.menu_item_id = mi.id\n            WHERE ci.user_id = ?\n        \"\"\", (user_id,))\n    else:\n        cur.execute(\"\"\"\n            SELECT SUM(\n                CASE\n                    WHEN COALESCE(mi.discount_percentage, 0) > 0\n                    THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                    ELSE mi.price * ci.quantity\n                END\n            )\n            FROM cart_items ci\n            JOIN menu_items mi ON ci.menu_item_id = mi.id\n            WHERE ci.session_id = ?\n        \"\"\", (session_id,))\n    result = cur.fetchone()[0]\n    return result if result else 0\n\ndef clear_cart(conn, session_id, user_id=None):\n    \"\"\"Savatchani tozalash\"\"\"\n    cur = conn.cursor()\n    if user_id:\n        cur.execute(\"DELETE FROM cart_items WHERE user_id = ?\", (user_id,))\n    else:\n        cur.execute(\"DELETE FROM cart_items WHERE session_id = ?\", (session_id,))\n    conn.commit()\n\ndef save_user_to_json(name, ticket_no, order_time, order_items):\n    \"\"\"Foydalanuvchi ma'lumotlarini users.json fayliga saqlash\"\"\"\n    users_file = 'users.json'\n\n    # Yangi foydalanuvchi ma'lumotlari\n    user_data = {\n        'ism': name,\n        'buyurtma_raqami': ticket_no,\n        'buyurtma_vaqti': order_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n        'buyurtma_mahsulotlari': order_items\n    }\n\n    # Mavjud ma'lumotlarni o'qish\n    users_list = []\n    if os.path.exists(users_file):\n        try:\n            with open(users_file, 'r', encoding='utf-8') as f:\n                users_list = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            users_list = []\n\n    # Yangi ma'lumotni qo'shish\n    users_list.append(user_data)\n\n    # Faylga saqlash\n    with open(users_file, 'w', encoding='utf-8') as f:\n        json.dump(users_list, f, ensure_ascii=False, indent=2)\n\ndef save_staff_to_json(first_name, last_name, birth_date, phone, staff_id, register_time):\n    \"\"\"Xodim ma'lumotlarini employees.json fayliga saqlash\"\"\"\n    employees_file = 'employees.json'\n\n    # Yangi xodim ma'lumotlari\n    employee_data = {\n        'id': staff_id,\n        'ism': first_name,\n        'familiya': last_name,\n        'tugulgan_sana': birth_date,\n        'telefon': phone,\n        'royxatdan_otgan_vaqti': register_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    }\n\n    # Mavjud ma'lumotlarni o'qish\n    employees_list = []\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees_list = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            employees_list = []\n\n    # Yangi ma'lumotni qo'shish\n    employees_list.append(employee_data)\n\n    # Faylga saqlash\n    with open(employees_file, 'w', encoding='utf-8') as f:\n        json.dump(employees_list, f, ensure_ascii=False, indent=2)\n\n# ---------- Routes ----------\n\n@app.route(\"/\")\ndef index():\n    \"\"\"Bosh sahifa - xavfsiz error handling bilan\"\"\"\n    try:\n        # Session ID ni olish va tekshirish\n        session_id = get_session_id()\n\n        # Asosiy sahifani render qilish\n        return render_template(\"index.html\")\n    except Exception as e:\n        app_logger.error(f\"Index sahifasida xatolik: {str(e)}\")\n        # Emergency fallback\n        return f\"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head><title>Restaurant</title></head>\n        <body>\n            <h1>O'zbek Milliy Taomlar Restorani</h1>\n            <p>Sahifa yuklashda xatolik yuz berdi.</p>\n            <a href=\"/menu\">Menyu</a>\n        </body>\n        </html>\n        \"\"\", 500\n\n@app.route(\"/system-management-panel-x8k2m\")\ndef admin_index():\n    # Super admin yoki staff kirgan bo'lishi kerak\n    if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n        flash(\"Bu sahifaga kirish uchun admin huquqi kerak.\", \"error\")\n        return redirect(url_for(\"index\"))\n    return render_template(\"admin_index.html\")\n\n@app.route(\"/display-monitor-tv-screen-z9p4n\")\ndef admin_monitor():\n    # Super admin yoki staff kirgan bo'lishi kerak\n    if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n        flash(\"Bu sahifaga kirish uchun admin huquqi kerak.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    cleanup_expired_orders()\n\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Waiting orders - kutayotgan buyurtmalar\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='waiting'\n                GROUP BY o.id\n                ORDER BY o.eta_time ASC\n            \"\"\")\n            waiting = cur.fetchall() or []\n\n            # Ready orders - tayyor buyurtmalar\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='ready'\n                GROUP BY o.id\n                ORDER BY o.eta_time ASC\n            \"\"\")\n            ready = cur.fetchall() or []\n\n            # Served orders in last 5 minutes - so'nggi 5 daqiqada berilgan buyurtmalar\n            five_min_ago = (get_current_time() - datetime.timedelta(minutes=5)).isoformat()\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='served' AND o.created_at >= ?\n                GROUP BY o.id\n                ORDER BY o.created_at DESC\n            \"\"\", (five_min_ago,))\n            served_recent = cur.fetchall() or []\n\n            return render_template('admin_monitor.html',\n                                 waiting=[dict(w) for w in waiting],\n                                 ready=[dict(r) for r in ready],\n                                 served_recent=[dict(s) for s in served_recent])\n\n    except Exception as e:\n        app_logger.error(f\"Monitor sahifasida xatolik: {str(e)}\")\n        return render_template('admin_monitor.html',\n                             waiting=[],\n                             ready=[],\n                             served_recent=[])\n\n# Advanced decorators\ndef login_required(f):\n    \"\"\"Enhanced login decorator\"\"\"\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n            if request.is_json:\n                return jsonify({\"error\": \"Authorization required\"}), 401\n            return redirect(url_for(\"staff_login\"))\n        return f(*args, **kwargs)\n    return wrapper\n\ndef rate_limit(max_requests=100, window=3600):\n    \"\"\"Rate limiting decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            identifier = request.remote_addr\n            if not rate_limiter.is_allowed(identifier, max_requests, window):\n                if request.is_json:\n                    return jsonify({\"error\": \"Rate limit exceeded\"}), 429\n                flash(\"Juda ko'p so'rov yuborildi. Biroz kuting.\", \"error\")\n                return redirect(url_for(\"index\"))\n            return f(*args, **kwargs)\n        return wrapper\n    return decorator\n\ndef cache_result(ttl=300):\n    \"\"\"Result caching decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            # Cache key yaratish\n            cache_key = f\"{f.__name__}:{hashlib.md5(str(args + tuple(kwargs.items())).encode()).hexdigest()}\"\n\n            # Cache dan olishga harakat qilish\n            cached_result = cache_manager.get(cache_key)\n            if cached_result is not None:\n                return cached_result\n\n            # Yangi natija hisoblash va cache ga saqlash\n            result = f(*args, **kwargs)\n            cache_manager.set(cache_key, result, ttl)\n            return result\n        return wrapper\n    return decorator\n\ndef async_task(f):\n    \"\"\"Asynchronous task decorator\"\"\"\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        return executor.submit(f, *args, **kwargs)\n    return wrapper\n\ndef validate_json(required_fields=None):\n    \"\"\"JSON validation decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if not request.is_json:\n                return jsonify({\"error\": \"JSON format required\"}), 400\n\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"Empty JSON\"}), 400\n\n            if required_fields:\n                missing_fields = [field for field in required_fields if field not in data]\n                if missing_fields:\n                    return jsonify({\"error\": f\"Missing fields: {missing_fields}\"}), 400\n\n            return f(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# Performance monitoring decorator ni olib tashlaymiz - conflict keltiryapti\n\n# ---- MENU ----\n@app.route(\"/menu\")\n@rate_limit(max_requests=500, window=60)\n@cache_result(ttl=120)\ndef menu():\n    \"\"\"Optimized menu endpoint\"\"\"\n    try:\n        # Cache dan menu ma'lumotlarini olish\n        cached_menu = cache_manager.get(\"menu_items_active\")\n\n        if not cached_menu:\n            menu_items = execute_query(\n                \"\"\"SELECT m.*, COALESCE(AVG(r.rating), 0) as avg_rating, COUNT(r.rating) as rating_count\n                   FROM menu_items m\n                   LEFT JOIN ratings r ON m.id = r.menu_item_id\n                   WHERE m.available = 1\n                   GROUP BY m.id\n                   ORDER BY m.category, m.orders_count DESC, m.name\"\"\",\n                fetch_all=True\n            )\n\n            # Cache ga saqlash\n            cache_manager.set(\"menu_items_active\", menu_items, 120)\n        else:\n            menu_items = cached_menu\n\n        # Kategoriyalar bo'yicha ajratish\n        foods = [item for item in menu_items if item['category'] == 'food']\n        drinks = [item for item in menu_items if item['category'] == 'drink']\n\n        # Foydalanuvchi sevimlilarini olish\n        favorites = []\n        if session.get('user_id'):\n            favorites_raw = execute_query(\n                \"SELECT menu_item_id FROM favorites WHERE user_id = ?\",\n                (session['user_id'],),\n                fetch_all=True\n            )\n            favorites = [fav['menu_item_id'] for fav in favorites_raw] if favorites_raw else []\n\n\n        return render_template(\"menu.html\",\n                             foods=foods,\n                             drinks=drinks,\n                             favorites=favorites,\n                             current_page='menu')\n\n    except Exception as e:\n        app_logger.error(f\"Menu endpoint error: {str(e)}\")\n        # Fallback - oddiy menu\n        try:\n            menu_items = execute_query(\n                \"SELECT * FROM menu_items WHERE available = 1 ORDER BY category, name\",\n                fetch_all=True\n            )\n            foods = [item for item in menu_items if item['category'] == 'food']\n            drinks = [item for item in menu_items if item['category'] == 'drink']\n            return render_template(\"menu.html\", foods=foods, drinks=drinks, current_page='menu')\n        except:\n            flash(\"Menu yuklashda xatolik yuz berdi.\", \"error\")\n            return redirect(url_for(\"index\"))\n\n@app.route(\"/add_to_cart\", methods=[\"POST\"])\ndef add_to_cart():\n    try:\n        menu_item_id = request.form.get(\"menu_item_id\")\n        quantity = int(request.form.get(\"quantity\", 1))\n\n        if not menu_item_id:\n            if request.is_json or request.headers.get('Content-Type') == 'application/json':\n                return jsonify({\"success\": False, \"message\": \"Mahsulot tanlanmadi\"})\n            flash(\"Mahsulot tanlanmadi.\", \"error\")\n            return redirect(url_for(\"menu\"))\n\n        session_id = get_session_id()\n        user_id = session.get(\"user_id\")\n\n        # Cache dan savatchani tozalash\n        cache_manager.delete(f\"cart_count_{user_id}_{session_id}\")\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Mavjudligini tekshirish\n        if user_id:\n            cur.execute(\"SELECT * FROM cart_items WHERE user_id = ? AND menu_item_id = ?\", (user_id, menu_item_id))\n        else:\n            cur.execute(\"SELECT * FROM cart_items WHERE session_id = ? AND menu_item_id = ?\", (session_id, menu_item_id))\n\n        existing = cur.fetchone()\n        now = get_current_time().isoformat()\n\n        if existing:\n            # Mavjud bo'lsa miqdorni oshirish - SQLite Row obyektini xavfsiz dict ga aylantirish\n            try:\n                if hasattr(existing, 'keys'):\n                    existing_dict = dict(existing)\n                elif isinstance(existing, (tuple, list)) and len(existing) > 0:\n                    existing_dict = {'id': existing[0]}\n                else:\n                    existing_dict = {'id': 1}  # Fallback\n\n                cur.execute(\"UPDATE cart_items SET quantity = quantity + ? WHERE id = ?\", (quantity, existing_dict['id']))\n            except Exception as cart_error:\n                app_logger.error(f\"Cart update error: {str(cart_error)}\")\n                # Yangi element qo'shish\n                if user_id:\n                    cur.execute(\"INSERT INTO cart_items (user_id, session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?, ?)\",\n                               (user_id, session_id, menu_item_id, quantity, now))\n                else:\n                    cur.execute(\"INSERT INTO cart_items (session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?)\",\n                               (session_id, menu_item_id, quantity, now))\n        else:\n            # Yangi qo'shish - har doim session_id ni ham berish\n            if user_id:\n                cur.execute(\"INSERT INTO cart_items (user_id, session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?, ?)\",\n                           (user_id, session_id, menu_item_id, quantity, now))\n            else:\n                cur.execute(\"INSERT INTO cart_items (session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?)\",\n                           (session_id, menu_item_id, quantity, now))\n\n        conn.commit()\n\n        # Yangi cart count ni olish\n        if user_id:\n            cur.execute(\"SELECT COALESCE(SUM(quantity), 0) as total_count FROM cart_items WHERE user_id = ?\", (user_id,))\n        else:\n            cur.execute(\"SELECT COALESCE(SUM(quantity), 0) as total_count FROM cart_items WHERE session_id = ?\", (session_id,))\n\n        cart_result = cur.fetchone()\n        if hasattr(cart_result, 'keys'):\n            cart_count = cart_result['total_count']\n        else:\n            cart_count = cart_result[0] if cart_result else 0\n        conn.close()\n\n        if request.is_json or request.headers.get('Content-Type') == 'application/json':\n            return jsonify({\"success\": True, \"message\": \"Mahsulot qo'shildi\", \"cart_count\": cart_count})\n\n        flash(\"Mahsulot savatchaga qo'shildi!\", \"success\")\n        return redirect(url_for(\"menu\"))\n\n    except Exception as e:\n        app_logger.error(f\"Add to cart error: {str(e)}\")\n        if request.is_json or request.headers.get('Content-Type') == 'application/json':\n            return jsonify({\"success\": False, \"message\": \"Xatolik yuz berdi\"})\n        flash(\"Savatchaga qo'shishda xatolik yuz berdi.\", \"error\")\n        return redirect(url_for(\"menu\"))\n\n@app.route(\"/cart\")\ndef cart():\n    session_id = get_session_id()\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n\n    try:\n        # Foydalanuvchi ma'lumotlarini olish va session ga yuklash\n        if user_id:\n            cur = conn.cursor()\n            cur.execute(\"SELECT phone, address, address_latitude, address_longitude, first_name, last_name FROM users WHERE id = ?\", (user_id,))\n            user_profile = cur.fetchone()\n\n            if user_profile:\n                session['user_phone'] = user_profile['phone'] or ''\n                session['user_address'] = user_profile['address'] or ''\n                session['user_address_latitude'] = user_profile['address_latitude'] or ''\n                session['user_address_longitude'] = user_profile['address_longitude'] or ''\n                session['user_first_name'] = user_profile['first_name'] or ''\n                session['user_last_name'] = user_profile['last_name'] or ''\n\n        # Savatcha ma'lumotlarini olish\n        cart_items = get_cart_items(conn, session_id, user_id)\n        total = get_cart_total(conn, session_id, user_id)\n\n        conn.close()\n        return render_template(\"cart.html\", cart_items=cart_items or [], total=total or 0)\n\n    except Exception as e:\n        app_logger.error(f\"Cart sahifasida xatolik: {str(e)}\")\n        conn.close()\n        return render_template(\"cart.html\", cart_items=[], total=0)\n\n@app.route(\"/remove_from_cart/<int:cart_item_id>\", methods=[\"POST\"])\ndef remove_from_cart(cart_item_id):\n    session_id = get_session_id()\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    if user_id:\n        cur.execute(\"DELETE FROM cart_items WHERE id = ? AND user_id = ?\", (cart_item_id, user_id))\n    else:\n        cur.execute(\"DELETE FROM cart_items WHERE id = ? AND session_id = ?\", (cart_item_id, session_id))\n\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot savatchadan olib tashlandi.\", \"success\")\n    return redirect(url_for(\"cart\"))\n\n@app.route(\"/favorites\")\n@login_required\ndef favorites():\n    \"\"\"Foydalanuvchi sevimli mahsulotlari\"\"\"\n    try:\n        user_id = session.get(\"user_id\")\n        if not user_id:\n            flash(\"Sevimlilar ro'yxatini ko'rish uchun tizimga kiring.\", \"warning\")\n            return redirect(url_for(\"login_page\"))\n        \n        conn = get_db()\n        cur = conn.cursor()\n        \n        # Sevimli mahsulotlarni olish\n        cur.execute(\"\"\"\n            SELECT m.*, f.created_at as favorite_added\n            FROM menu_items m\n            JOIN favorites f ON m.id = f.menu_item_id\n            WHERE f.user_id = ?\n            ORDER BY f.created_at DESC\n        \"\"\", (user_id,))\n        \n        favorite_items = [dict(row) for row in cur.fetchall()]\n        conn.close()\n        \n        return render_template(\"favorites.html\", favorites=favorite_items, current_page='favorites')\n        \n    except Exception as e:\n        app_logger.error(f\"Favorites sahifasida xatolik: {str(e)}\")\n        flash(\"Sevimlilar ro'yxatini yuklashda xatolik yuz berdi.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n@app.route(\"/add-to-favorites/<int:item_id>\", methods=[\"POST\"])\n@login_required  \ndef add_to_favorites(item_id):\n    \"\"\"Mahsulotni sevimlilarga qo'shish\"\"\"\n    try:\n        user_id = session.get(\"user_id\")\n        if not user_id:\n            return jsonify({\"success\": False, \"message\": \"Tizimga kiring\"})\n        \n        conn = get_db()\n        cur = conn.cursor()\n        \n        # Allaqachon sevimli emasligini tekshirish\n        cur.execute(\"SELECT id FROM favorites WHERE user_id = ? AND menu_item_id = ?\", (user_id, item_id))\n        if cur.fetchone():\n            conn.close()\n            return jsonify({\"success\": False, \"message\": \"Bu mahsulot allaqachon sevimlilarda\"})\n        \n        # Sevimlilarga qo'shish\n        now = get_current_time().isoformat()\n        cur.execute(\"INSERT INTO favorites (user_id, menu_item_id, created_at) VALUES (?, ?, ?)\", \n                   (user_id, item_id, now))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({\"success\": True, \"message\": \"Sevimlilar ro'yxatiga qo'shildi\"})\n        \n    except Exception as e:\n        app_logger.error(f\"Add to favorites error: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": \"Xatolik yuz berdi\"})\n\n@app.route(\"/remove-from-favorites/<int:item_id>\", methods=[\"POST\"])\n@login_required\ndef remove_from_favorites(item_id):\n    \"\"\"Mahsulotni sevimlilardan olib tashlash\"\"\"\n    try:\n        user_id = session.get(\"user_id\")\n        if not user_id:\n            return jsonify({\"success\": False, \"message\": \"Tizimga kiring\"})\n        \n        conn = get_db()\n        cur = conn.cursor()\n        cur.execute(\"DELETE FROM favorites WHERE user_id = ? AND menu_item_id = ?\", (user_id, item_id))\n        conn.commit()\n        conn.close()\n        \n        return jsonify({\"success\": True, \"message\": \"Sevimlilardan olib tashlandi\"})\n        \n    except Exception as e:\n        app_logger.error(f\"Remove from favorites error: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": \"Xatolik yuz berdi\"})\n\n# ---- USER LOGIN & REGISTER ----\n\n@app.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"\").strip()\n        last_name = request.form.get(\"last_name\", \"\").strip()\n        email = request.form.get(\"email\", \"\").strip()\n        phone = request.form.get(\"phone\", \"\").strip()\n        address = request.form.get(\"address\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n        confirm_password = request.form.get(\"confirm_password\", \"\")\n\n        if not all([first_name, last_name, email, password, confirm_password]):\n            flash(\"Majburiy maydonlarni to'ldiring.\", \"error\")\n            return redirect(url_for(\"register\"))\n\n        if password != confirm_password:\n            flash(\"Parollar mos kelmaydi.\", \"error\")\n            return redirect(url_for(\"register\"))\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Email mavjudligini tekshirish\n        cur.execute(\"SELECT id FROM users WHERE email = ?\", (email,))\n        if cur.fetchone():\n            flash(\"Bu email allaqachon ro'yxatdan o'tgan.\", \"error\")\n            conn.close()\n            return redirect(url_for(\"register\"))\n\n        # Xarita koordinatalari\n        address_latitude = request.form.get(\"address_latitude\", \"\")\n        address_longitude = request.form.get(\"address_longitude\", \"\")\n\n        # Yangi foydalanuvchi yaratish\n        password_hash = generate_password_hash(password)\n        now = get_current_time().isoformat()\n\n        cur.execute(\"\"\"\n            INSERT INTO users (first_name, last_name, email, phone, address, password_hash, created_at)\n            VALUES (?, ?, ?, ?, ?, ?, ?)\n        \"\"\", (first_name, last_name, email, phone, address, password_hash, now))\n\n        conn.commit()\n        user_id = cur.lastrowid\n        conn.close()\n\n        # Avtomatik tizimga kiritish\n        session[\"user_id\"] = user_id\n        session[\"user_name\"] = f\"{first_name} {last_name}\"\n        session[\"user_email\"] = email\n        session['interface_language'] = 'uz'  # Default til\n        session['font_size'] = 'medium'       # Default font size\n        session['dark_theme'] = False         # Default theme\n\n        flash(f\"Muvaffaqiyatli ro'yxatdan o'tdingiz! Xush kelibsiz, {first_name}!\", \"success\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"register.html\")\n\n@app.route(\"/profile\")\ndef profile():\n    if not session.get(\"user_id\"):\n        flash(\"Profilni ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    try:\n        # Foydalanuvchi ma'lumotlarini olish\n        cur.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n        user = cur.fetchone()\n\n        if not user:\n            conn.close()\n            flash(\"Foydalanuvchi ma'lumotlari topilmadi.\", \"error\")\n            return redirect(url_for(\"logout\"))\n\n        # Foydalanuvchi buyurtmalar tarixi va umumiy summa\n        cur.execute(\"\"\"\n            SELECT o.*,\n                   COALESCE(r.total_amount, 0) as total_amount,\n                   GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n            FROM orders o\n            LEFT JOIN receipts r ON o.id = r.order_id\n            LEFT JOIN order_details od ON o.id = od.order_id\n            LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n            WHERE o.user_id = ?\n            GROUP BY o.id\n            ORDER BY o.created_at DESC\n            LIMIT 10\n        \"\"\", (user_id,))\n        orders = cur.fetchall()\n\n        conn.close()\n\n        return render_template(\"profile.html\", user=user, orders=orders)\n\n    except Exception as e:\n        conn.close()\n        logging.error(f\"Profile sahifasida xatolik: {str(e)}\")\n        flash(\"Profilni yuklashda xatolik yuz berdi.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n@app.route(\"/update_profile\", methods=[\"POST\"])\ndef update_profile():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    first_name = request.form.get(\"first_name\", \"\").strip()\n    last_name = request.form.get(\"last_name\", \"\").strip()\n    email = request.form.get(\"email\", \"\").strip()\n    phone = request.form.get(\"phone\", \"\").strip()\n\n    if not all([first_name, last_name, email]):\n        flash(\"Ism, familiya va email majburiy.\", \"error\")\n        return redirect(url_for(\"profile\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Email takrorlanishini tekshirish\n    cur.execute(\"SELECT id FROM users WHERE email = ? AND id != ?\", (email, user_id))\n    if cur.fetchone():\n        flash(\"Bu email allaqachon ishlatilmoqda.\", \"error\")\n        conn.close()\n        return redirect(url_for(\"profile\"))\n\n    # Ma'lumotlarni yangilash\n    cur.execute(\"\"\"\n        UPDATE users\n        SET first_name = ?, last_name = ?, email = ?, phone = ?\n        WHERE id = ?\n    \"\"\", (first_name, last_name, email, phone, user_id))\n\n    conn.commit()\n    conn.close()\n\n    # Session ma'lumotlarini yangilash\n    session[\"user_name\"] = f\"{first_name} {last_name}\"\n    session[\"user_email\"] = email\n\n    flash(\"Profil muvaffaqiyatli yangilandi!\", \"success\")\n    return redirect(url_for(\"profile\"))\n\n@app.route(\"/update_address\", methods=[\"POST\"])\ndef update_address():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    address = request.form.get(\"address\", \"\").strip()\n    address_latitude = request.form.get(\"address_latitude\", \"\")\n    address_longitude = request.form.get(\"address_longitude\", \"\")\n\n    if not address:\n        flash(\"Manzilni xaritadan tanlang.\", \"error\")\n        return redirect(url_for(\"profile\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Manzilni yangilash\n    cur.execute(\"\"\"\n        UPDATE users\n        SET address = ?, address_latitude = ?, address_longitude = ?\n        WHERE id = ?\n    \"\"\", (address, address_latitude if address_latitude else None,\n          address_longitude if address_longitude else None, user_id))\n\n    conn.commit()\n    conn.close()\n\n    flash(\"Manzil muvaffaqiyatli yangilandi!\", \"success\")\n    return redirect(url_for(\"profile\"))\n\n@app.route(\"/change_password\", methods=[\"POST\"])\ndef change_password():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    current_password = request.form.get(\"current_password\", \"\")\n    new_password = request.form.get(\"new_password\", \"\")\n    confirm_password = request.form.get(\"confirm_password\", \"\")\n\n    if not all([current_password, new_password, confirm_password]):\n        flash(\"Barcha parol maydonlarini to'ldiring.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    if new_password != confirm_password:\n        flash(\"Yangi parollar mos kelmaydi.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    if len(new_password) < 6:\n        flash(\"Yangi parol kamida 6 ta belgidan iborat bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Joriy parolni tekshirish\n    cur.execute(\"SELECT password_hash FROM users WHERE id = ?\", (user_id,))\n    user_hash = cur.fetchone()\n\n    if not user_hash or not check_password_hash(user_hash[\"password_hash\"], current_password):\n        flash(\"Joriy parol noto'g'ri.\", \"error\")\n        conn.close()\n        return redirect(url_for(\"profile_settings\"))\n\n    # Yangi parolni saqlash\n    new_password_hash = generate_password_hash(new_password)\n    cur.execute(\"UPDATE users SET password_hash = ? WHERE id = ?\", (new_password_hash, user_id))\n\n    conn.commit()\n    conn.close()\n\n    flash(\"Parol muvaffaqiyatli o'zgartirildi!\", \"success\")\n    return redirect(url_for(\"profile_settings\"))\n\n@app.route(\"/profile/settings\")\ndef profile_settings():\n    # Har qanday turdagi foydalanuvchi (user, staff, courier, super_admin) kirishi mumkin\n    if not (session.get(\"user_id\") or session.get(\"staff_id\") or session.get(\"courier_id\") or session.get(\"super_admin\")):\n        flash(\"Profil sozlamalarini ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"profile_settings.html\")\n\n@app.route(\"/settings\")\ndef general_settings():\n    # Har qanday turdagi foydalanuvchi (user, staff, courier, super_admin) kirishi mumkin\n    if not (session.get(\"user_id\") or session.get(\"staff_id\") or session.get(\"courier_id\") or session.get(\"super_admin\")):\n        flash(\"Umumi sozlamalarni ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"general_settings.html\")\n\n@app.route(\"/logout\")\ndef logout():\n    user_name = session.get(\"user_name\", \"\")\n    session.clear()\n    flash(f\"Tizimdan chiqdingiz. Xayr, {user_name}!\", \"info\")\n    return redirect(url_for(\"index\"))\n\n# ---- PLACE ORDER ----\n@app.route(\"/place_order\", methods=[\"POST\"])\ndef place_order():\n    \"\"\"Buyurtma berish funksiyasi - to'liq qayta ishlangan\"\"\"\n    try:\n        # Rate limiting\n        identifier = request.remote_addr\n        if not rate_limiter.is_allowed(identifier, 20, 300):\n            flash(\"Juda ko'p buyurtma. 5 daqiqa kuting.\", \"error\")\n            return redirect(url_for(\"cart\"))\n\n        # Foydalanuvchi session'dan ismni olish\n        if not session.get(\"user_id\"):\n            flash(\"Buyurtma berish uchun avval tizimga kiring.\", \"error\")\n            return redirect(url_for(\"login\"))\n\n        name = session.get(\"user_name\", \"\")\n        user_id = session.get(\"user_id\")\n\n        if not name:\n            flash(\"Foydalanuvchi ma'lumotlari topilmadi.\", \"error\")\n            return redirect(url_for(\"login\"))\n\n        # Ma'lumotlar bazasi bilan ishash\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Foydalanuvchi profilidan ma'lumotlarni olish\n            cur.execute(\"SELECT phone, address, card_number FROM users WHERE id = ?\", (user_id,))\n            user_profile = cur.fetchone()\n\n            # Session ga profil ma'lumotlarini saqlash\n            if user_profile:\n                session['user_phone'] = user_profile['phone'] or ''\n                session['user_address'] = user_profile['address'] or ''\n                session['user_card_number'] = user_profile['card_number'] or ''\n\n            session_id = get_session_id()\n\n            # Savatchani tekshirish\n            cart_items = get_cart_items(conn, session_id, user_id)\n\n            if not cart_items or len(cart_items) == 0:\n                flash(\"Savatchangiz bo'sh. Avval taom tanlang.\", \"error\")\n                return redirect(url_for(\"menu\"))\n\n            # Formdan ma'lumotlarni xavfsiz olish\n            order_type = request.form.get(\"order_type\", \"dine_in\")\n            delivery_address = request.form.get(\"delivery_address\", \"\").strip()\n            home_address = request.form.get(\"home_address\", \"\").strip()\n            customer_phone_new = request.form.get(\"customer_phone\", \"\").strip()\n            card_number_new = request.form.get(\"card_number\", \"\").strip()\n\n            # Delivery uchun kerakli tekshiruvlar\n            if order_type == \"delivery\":\n                if not delivery_address:\n                    flash(\"Yetkazib berish manzilini kiriting!\", \"error\")\n                    return redirect(url_for(\"cart\"))\n\n                # Telefon tekshiruvi\n                if not session.get('user_phone') and not customer_phone_new:\n                    flash(\"Telefon raqamingizni kiriting!\", \"error\")\n                    return redirect(url_for(\"cart\"))\n\n            # Foydalanuvchi profilini yangilash\n            if home_address:\n                cur.execute(\"UPDATE users SET address = ? WHERE id = ?\", (home_address, user_id))\n                session['user_address'] = home_address\n            if customer_phone_new:\n                cur.execute(\"UPDATE users SET phone = ? WHERE id = ?\", (customer_phone_new, user_id))\n                session['user_phone'] = customer_phone_new\n            if card_number_new:\n                cur.execute(\"UPDATE users SET card_number = ? WHERE id = ?\", (card_number_new, user_id))\n                session['user_card_number'] = card_number_new\n\n            # Buyurtma raqami va vaqt hisoblash\n            tno = next_ticket_no(conn)\n            eta_minutes = calc_eta_minutes(conn)\n            now = get_current_time()\n            eta_time = now + datetime.timedelta(minutes=eta_minutes)\n            total = get_cart_total(conn, session_id, user_id)\n\n            # Delivery uchun qo'shimcha ma'lumotlar\n            delivery_latitude = request.form.get(\"delivery_latitude\", \"\")\n            delivery_longitude = request.form.get(\"delivery_longitude\", \"\")\n            delivery_distance = request.form.get(\"delivery_distance\", 0)\n            delivery_map_url = request.form.get(\"delivery_map_url\", \"\")\n            customer_note = request.form.get(\"customer_note\", \"\")\n\n            # Telefon va karta ma'lumotlarini olish\n            customer_phone = session.get('user_phone', '') or customer_phone_new\n            card_number = session.get('user_card_number', '') or card_number_new\n\n            # Masofa va vaqtni xavfsiz aylantirish\n            try:\n                delivery_distance = float(delivery_distance) if delivery_distance else 0\n            except (ValueError, TypeError):\n                delivery_distance = 0\n\n            # Delivery uchun ETA ni qayta hisoblash\n            if order_type == \"delivery\":\n                courier_delivery_time = 30\n                eta_time = now + datetime.timedelta(minutes=eta_minutes + courier_delivery_time)\n\n            # Branch ID ni xavfsiz olish\n            branch_id = 1\n            try:\n                branch_id = int(request.form.get(\"branch_id\", 1))\n            except (ValueError, TypeError):\n                branch_id = 1\n\n            # Buyurtma yaratish\n            cur.execute(\"\"\"\n                INSERT INTO orders (user_id, customer_name, ticket_no, order_type, status, delivery_address, delivery_distance, delivery_latitude, delivery_longitude, delivery_map_url, customer_note, customer_phone, card_number, branch_id, created_at, eta_time)\n                VALUES (?, ?, ?, ?, 'waiting', ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (user_id, name, tno, order_type, delivery_address, delivery_distance, delivery_latitude, delivery_longitude, delivery_map_url, customer_note, customer_phone, card_number, branch_id, now.isoformat(), eta_time.isoformat()))\n\n            order_id = cur.lastrowid\n\n            # Savatchadagi mahsulotlarni order_details ga ko'chirish\n            order_items_for_json = []\n            total_amount = 0\n\n            for item in cart_items:\n                # Skidka narxini hisoblash\n                discount_percentage = item.get('discount_percentage', 0) or 0\n                final_price = item['price']\n                if discount_percentage > 0:\n                    final_price = item['price'] * (100 - discount_percentage) / 100\n\n                item_total = final_price * item['quantity']\n                total_amount += item_total\n\n                cur.execute(\"\"\"\n                    INSERT INTO order_details (order_id, menu_item_id, quantity, price)\n                    VALUES (?, ?, ?, ?)\n                \"\"\", (order_id, item['menu_item_id'], item['quantity'], final_price))\n\n                # JSON uchun mahsulot ma'lumotlarini to'plash\n                order_items_for_json.append({\n                    'nomi': item['name'],\n                    'miqdori': item['quantity'],\n                    'asl_narxi': item['price'],\n                    'skidka_foizi': discount_percentage,\n                    'yakuniy_narxi': final_price,\n                    'jami': item_total\n                })\n\n            # Chek yaratish\n            receipt_number = f\"R{tno}{now.strftime('%H%M%S')}\"\n            cashback_percentage = 1.0\n            cashback_amount = total_amount * (cashback_percentage / 100)\n\n            cur.execute(\"\"\"\n                INSERT INTO receipts (order_id, receipt_number, total_amount, cashback_amount, cashback_percentage, created_at)\n                VALUES (?, ?, ?, ?, ?, ?);\n            \"\"\", (order_id, receipt_number, total_amount, cashback_amount, cashback_percentage, now.isoformat()))\n\n            # Savatchani tozalash\n            clear_cart(conn, session_id, user_id)\n\n            # Cache ni tozalash\n            cache_manager.delete(f\"cart_count_{user_id}_{session_id}\")\n\n            # Foydalanuvchini JSON fayliga saqlash\n            executor.submit(save_user_to_json, name, tno, now, order_items_for_json)\n\n            flash(\"Buyurtma muvaffaqiyatli berildi!\", \"success\")\n            return redirect(url_for(\"user_success\", ticket_no=tno))\n\n    except Exception as e:\n        app_logger.error(f\"Buyurtma berishda xatolik: {str(e)}\")\n        flash(\"Buyurtma berishda xatolik yuz berdi. Qaytadan urinib ko'ring.\", \"error\")\n        return redirect(url_for(\"cart\"))\n\n@app.route(\"/user\", methods=[\"GET\", \"POST\"])\ndef user_page():\n    # Eski user route ni redirect qilish\n    if request.method == \"POST\":\n        return place_order()\n    return redirect(url_for(\"menu\"))\n\n@app.route(\"/user/success/<int:ticket_no>\")\ndef user_success(ticket_no):\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Buyurtma ma'lumotlarini olish\n    cur.execute(\"SELECT * FROM orders WHERE ticket_no=? ORDER BY id DESC LIMIT 1;\", (ticket_no,))\n    order = cur.fetchone()\n\n    if not order:\n        conn.close()\n        flash(\"Buyurtma topilmadi.\", \"error\")\n        return redirect(url_for(\"menu\"))\n\n    # Buyurtma tafsilotlarini olish\n    cur.execute(\"\"\"\n        SELECT od.*, mi.name\n        FROM order_details od\n        JOIN menu_items mi ON od.menu_item_id = mi.id\n        WHERE od.order_id = ?\n    \"\"\", (order['id'],))\n    order_items = cur.fetchall()\n\n    conn.close()\n\n    # ETA vaqtini formatlash\n    eta_time = datetime.datetime.fromisoformat(order[\"eta_time\"])\n\n    return render_template(\"user_success.html\",\n                         order=order,\n                         order_items=order_items,\n                         eta_hhmm=eta_time.strftime(\"%H:%M\"))\n\n# ---- COURIER AUTH ----\n@app.route(\"/courier-secure-login-k4m7p\", methods=[\"GET\", \"POST\"])\ndef courier_login():\n    if request.method == \"POST\":\n        courier_id = request.form.get(\"courier_id\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n        if not courier_id or not password:\n            flash(\"ID va parolni kiriting.\", \"error\")\n            return redirect(url_for(\"courier_login\"))\n        conn = get_db()\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM couriers WHERE id=?;\", (courier_id,))\n        row = cur.fetchone()\n        conn.close()\n        if row:\n            # Faollik vaqtini yangilash va ishchi soatlarini hisoblash\n            now = get_current_time().isoformat()\n\n            # Yangi connection yaratish\n            conn_update = get_db()\n            cur_update = conn_update.cursor()\n\n            # Agar avvalgi faollik vaqti mavjud bo'lsa, ishchi soatlarni yangilash\n            if row[\"last_activity\"]:\n                try:\n                    last_activity = datetime.datetime.fromisoformat(row[\"last_activity\"])\n                    current_time = get_current_time()\n                    time_diff = current_time - last_activity\n\n                    # Agar 8 soatdan kam bo'lsa, ishchi vaqtga qo'shish\n                    if time_diff.total_seconds() < 28800:  # 8 soat\n                        additional_hours = time_diff.total_seconds() / 3600\n                        cur_update.execute(\"UPDATE couriers SET total_hours = COALESCE(total_hours, 0) + ?, last_activity = ? WHERE id = ?\",\n                                   (additional_hours, now, courier_id))\n                    else:\n                        cur_update.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n                except:\n                    cur_update.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n            else:\n                cur.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n\n            conn_update.commit()\n            conn_update.close()\n\n        conn.close()\n        if row:\n            # SQLite Row obyektini xavfsiz dict ga aylantirish\n            try:\n                if hasattr(row, 'keys'):\n                    row_dict = dict(row)\n                else:\n                    # Tuple format uchun manual dict yaratish\n                    columns = ['id', 'first_name', 'last_name', 'birth_date', 'phone', 'passport_series', 'passport_number', 'password_hash', 'total_hours', 'deliveries_completed', 'last_activity', 'created_at']\n                    row_dict = {columns[i]: row[i] if i < len(row) else None for i in range(len(columns))}\n            except Exception as dict_error:\n                app_logger.error(f\"Courier row dict conversion error: {str(dict_error)}\")\n                conn.close()\n                flash(\"Database xatoligi yuz berdi.\", \"error\")\n                return redirect(url_for(\"courier_login\"))\n\n            if check_password_hash(row_dict.get(\"password_hash\", \"\"), password):\n                # Login muvaffaqiyatli\n                pass\n            else:\n                conn.close()\n                flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                return redirect(url_for(\"courier_login\"))\n        else:\n            conn.close()\n            flash(\"Kuryer topilmadi.\", \"error\")\n            return redirect(url_for(\"courier_login\"))\n\n        session[\"courier_id\"] = row_dict[\"id\"]\n        session[\"courier_name\"] = f\"{row_dict['first_name']} {row_dict['last_name']}\"\n        return redirect(url_for(\"courier_dashboard\"))\n    return render_template(\"courier_login.html\")\n\n@app.route(\"/courier-register-secure-p8x3m\", methods=[\"GET\", \"POST\"])\ndef courier_register():\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"\").strip()\n        last_name = request.form.get(\"last_name\", \"\").strip()\n        birth_date = request.form.get(\"birth_date\", \"\").strip()\n        phone = request.form.get(\"phone\", \"\").strip()\n        passport_series = request.form.get(\"passport_series\", \"\").strip()\n        passport_number = request.form.get(\"passport_number\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n\n        if not all([first_name, last_name, birth_date, phone, passport_series, passport_number, password]):\n            flash(\"Barcha maydonlarni to'ldiring.\", \"error\")\n            return redirect(url_for(\"courier_register\"))\n\n        conn = get_db()\n        cur = conn.cursor()\n        password_hash = generate_password_hash(password)\n        now = get_current_time()\n        try:\n            cur.execute(\"\"\"\n                INSERT INTO couriers (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n        except sqlite3.OperationalError:\n            # Agar birth_date ustuni mavjud bo'lmasa, uni qo'shish\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN birth_date TEXT;\")\n            cur.execute(\"\"\"\n                INSERT INTO couriers (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n\n        new_id = cur.lastrowid\n        # ID kamida 5 ta raqamdan iborat bo'lishi uchun\n        if new_id < 10000:\n            cur.execute(\"UPDATE couriers SET id = ? WHERE id = ?\", (10000 + new_id, new_id))\n            new_id = 10000 + new_id\n\n        conn.commit()\n        conn.close()\n\n        flash(f\"Kuryer sifatida ro'yxatdan o'tdingiz. Sizning ID raqamingiz: {new_id}\", \"success\")\n        return redirect(url_for(\"courier_login\"))\n\n    return render_template(\"courier_register.html\")\n\n@app.route(\"/courier/dashboard\")\ndef courier_dashboard():\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    courier_id = session.get(\"courier_id\")\n\n    # Barcha ready delivery buyurtmalar va kuryerga tegishli buyurtmalarni olish\n    cur.execute(\"\"\"\n        SELECT o.*,\n               GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n        FROM orders o\n        LEFT JOIN order_details od ON o.id = od.order_id\n        LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n        WHERE (o.order_type = 'delivery' AND o.status = 'ready')\n           OR (o.courier_id = ? AND o.status IN ('on_way', 'delivered'))\n        GROUP BY o.id\n        ORDER BY\n            CASE\n                WHEN o.status = 'ready' THEN 1\n                WHEN o.status = 'on_way' THEN 2\n                WHEN o.status = 'delivered' THEN 3\n                ELSE 4\n            END,\n            o.created_at ASC\n    \"\"\", (courier_id,))\n    delivery_orders = cur.fetchall()\n\n    # Kuryer statistikasini olish\n    cur.execute(\"SELECT deliveries_completed, total_hours FROM couriers WHERE id = ?\", (courier_id,))\n    courier_stats = cur.fetchone()\n\n    # Faol buyurtmalar sonini olish\n    cur.execute(\"SELECT COUNT(*) FROM orders WHERE courier_id = ? AND status = 'on_way'\", (courier_id,))\n    active_orders = cur.fetchone()[0]\n\n    # Session ga statistikani saqlash\n    if courier_stats:\n        try:\n            # courier_stats tuple yoki Row obyekti bo'lishi mumkin\n            if hasattr(courier_stats, '__getitem__'):\n                session['courier_deliveries'] = courier_stats[0] or 0\n                session['courier_hours'] = round(courier_stats[1] or 0, 1) if courier_stats[1] else 0\n            else:\n                session['courier_deliveries'] = getattr(courier_stats, 'deliveries_completed', 0) or 0\n                session['courier_hours'] = round(getattr(courier_stats, 'total_hours', 0) or 0, 1)\n        except (TypeError, IndexError) as e:\n            logging.error(f\"Kuryer statistikasini o'qishda xatolik: {str(e)}\")\n            session['courier_deliveries'] = 0\n            session['courier_hours'] = 0\n    else:\n        session['courier_deliveries'] = 0\n        session['courier_hours'] = 0\n    session['courier_active_orders'] = active_orders\n\n    conn.close()\n    return render_template(\"courier_dashboard.html\", orders=delivery_orders)\n\n@app.route(\"/courier/order/<int:order_id>/take\", methods=[\"POST\"])\ndef courier_take_order(order_id):\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    courier_id = session.get(\"courier_id\")\n\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Buyurtma ma'lumotlarini olish\n            cur.execute(\"SELECT * FROM orders WHERE id=? AND status='ready' AND order_type='delivery'\", (order_id,))\n            order = cur.fetchone()\n\n            if order:\n                # Avtomatik narx va vaqt hisoblash\n                distance = float(order['delivery_distance']) if order['delivery_distance'] else 5.0\n                auto_price, auto_delivery_time = auto_calculate_courier_delivery_price(distance)\n\n                # Buyurtmani yangilash\n                cur.execute(\"\"\"\n                    UPDATE orders\n                    SET status='on_way', courier_id=?, courier_price=?, courier_delivery_minutes=?, delivery_price=?\n                    WHERE id=? AND status='ready'\n                \"\"\", (courier_id, auto_price, auto_delivery_time, auto_price, order_id))\n\n                flash(f\"Buyurtma olib ketildi! Avtomatik narx: {auto_price:,} so'm, Vaqt: {auto_delivery_time} daqiqa\", \"success\")\n            else:\n                flash(\"Buyurtma topilmadi yoki allaqachon olingan!\", \"error\")\n\n    except Exception as e:\n        app_logger.error(f\"Courier take order error: {str(e)}\")\n        flash(\"Buyurtmani olishda xatolik yuz berdi.\", \"error\")\n\n    return redirect(url_for(\"courier_dashboard\"))\n\n@app.route(\"/courier/order/<int:order_id>/delivered\", methods=[\"POST\"])\ndef courier_mark_delivered(order_id):\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    courier_id = session.get(\"courier_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    cur.execute(\"UPDATE orders SET status='delivered' WHERE id=? AND courier_id=?\", (order_id, courier_id))\n\n    # Kuryerning yetkazib bergan buyurtmalar sonini oshirish\n    cur.execute(\"UPDATE couriers SET deliveries_completed = COALESCE(deliveries_completed, 0) + 1 WHERE id = ?\", (courier_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma yetkazib berildi!\", \"success\")\n    return redirect(url_for(\"courier_dashboard\"))\n\n@app.route(\"/courier/set-price-time\", methods=[\"POST\"])\ndef courier_set_price_time():\n    if \"courier_id\" not in session:\n        return jsonify({\"success\": False, \"message\": \"Kuryer tizimga kirmagan\"}), 401\n\n    data = request.get_json()\n    order_id = data.get(\"order_id\")\n    price = data.get(\"price\")\n    delivery_time = data.get(\"delivery_time\")\n\n    if not all([order_id, price, delivery_time]):\n        return jsonify({\"success\": False, \"message\": \"Barcha maydonlarni to'ldiring\"})\n\n    try:\n        price = float(price)\n        delivery_time = int(delivery_time)\n\n        if price <= 0 or delivery_time <= 0:\n            return jsonify({\"success\": False, \"message\": \"Narx va vaqt musbat bo'lishi kerak\"})\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Buyurtma mavjudligini va statusini tekshirish\n        cur.execute(\"SELECT * FROM orders WHERE id = ? AND status = 'ready'\", (order_id,))\n        order = cur.fetchone()\n\n        if not order:\n            conn.close()\n            return jsonify({\"success\": False, \"message\": \"Buyurtma topilmadi yoki tayyor emas\"})\n\n        # Narx va vaqtni yangilash\n        cur.execute(\"\"\"\n            UPDATE orders\n            SET courier_price = ?, courier_delivery_minutes = ?, delivery_price = ?\n            WHERE id = ?\n        \"\"\", (price, delivery_time, price, order_id))\n\n        conn.commit()\n        conn.close()\n\n        return jsonify({\"success\": True, \"message\": \"Narx va vaqt belgilandi\"})\n\n    except Exception as e:\n        logging.error(f\"Kuryer narx belgilashda xatolik: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": \"Server xatoligi\"}), 500\n\n@app.route(\"/courier/logout\")\ndef courier_logout():\n    session.pop(\"courier_id\", None)\n    session.pop(\"courier_name\", None)\n    return redirect(url_for(\"index\"))\n\n# Cart count endpoint moved to top priority section\n\n# ---- STATIC FILE HANDLING ----\n@app.route('/static/<path:filename>')\ndef static_files(filename):\n    \"\"\"Static fayllar uchun xavfsiz route\"\"\"\n    try:\n        return app.send_static_file(filename)\n    except Exception as e:\n        app_logger.error(f\"Static file error for {filename}: {str(e)}\")\n        return \"File not found\", 404\n\n# ---- LOGIN ROUTES ----\n@app.route(\"/login\")\ndef login():\n    \"\"\"Login route - login_page ga yo'naltirish\"\"\"\n    return redirect(url_for(\"login_page\"))\n\n@app.route(\"/login_page\", methods=[\"GET\", \"POST\"])\ndef login_page():\n    # URL dan role parametrini tekshirish\n    role_param = request.args.get('role')\n\n    if role_param == 'staff':\n        return redirect(url_for(\"staff_login\"))\n    elif role_param == 'courier':\n        return redirect(url_for(\"courier_login\"))\n    elif role_param == 'admin':\n        return redirect(url_for(\"super_admin_login\"))\n    else:\n        # Regular user login\n        if request.method == \"POST\":\n            email = request.form.get(\"email\", \"\").strip()\n            password = request.form.get(\"password\", \"\")\n\n            if not email or not password:\n                flash(\"Email va parolni kiriting.\", \"error\")\n                return redirect(url_for(\"login_page\"))\n\n            conn = get_db()\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM users WHERE email = ?\", (email,))\n            user = cur.fetchone()\n            conn.close()\n\n            if user:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(user, 'keys'):\n                        user_dict = dict(user)\n                    elif isinstance(user, (tuple, list)) and len(user) >= 4:\n                        # Tuple format uchun manual dict yaratish\n                        columns = ['id', 'first_name', 'last_name', 'email', 'phone', 'password_hash', 'address', 'card_number', 'card_expiry', 'created_at', 'address_latitude', 'address_longitude', 'interface_language', 'font_size', 'dark_theme']\n                        user_dict = {columns[i]: user[i] if i < len(user) else None for i in range(len(columns))}\n                    else:\n                        flash(\"Foydalanuvchi ma'lumotlari noto'g'ri formatda.\", \"error\")\n                        return redirect(url_for(\"login_page\"))\n\n                    if check_password_hash(user_dict.get(\"password_hash\", \"\"), password):\n                        # User ma'lumotlarini alohida o'zgaruvchilarga saqlash\n                        user_id = user_dict.get(\"id\")\n                        user_first_name = user_dict.get(\"first_name\", \"\")\n                        user_last_name = user_dict.get(\"last_name\", \"\")\n                        user_email = user_dict.get(\"email\", \"\")\n\n                        session[\"user_id\"] = user_id\n                        session[\"user_name\"] = f\"{user_first_name} {user_last_name}\".strip()\n                        session[\"user_email\"] = user_email\n                        session['interface_language'] = user_dict.get('interface_language') or 'uz'\n                        session['font_size'] = user_dict.get('font_size') or 'medium'\n                        session['dark_theme'] = bool(user_dict.get('dark_theme', 0))\n                        flash(f\"Xush kelibsiz, {user_first_name}!\", \"success\")\n                        return redirect(url_for(\"index\"))\n                    else:\n                        flash(\"Noto'g'ri email yoki parol.\", \"error\")\n                        return redirect(url_for(\"login_page\"))\n                except Exception as login_error:\n                    app_logger.error(f\"User login processing error: {str(login_error)}\")\n                    flash(\"Login jarayonida xatolik yuz berdi.\", \"error\")\n                    return redirect(url_for(\"login_page\"))\n            else:\n                flash(\"Foydalanuvchi topilmadi.\", \"error\")\n                return redirect(url_for(\"login_page\"))\n\n        return render_template(\"login.html\")\n\n# ---- STAFF AUTH ----\n@app.route('/staff-secure-login-w7m2k', methods=[\"GET\", \"POST\"])\ndef staff_login():\n    \"\"\"Xodim kirish sahifasi\"\"\"\n    if request.method == \"POST\":\n        staff_id = request.form.get(\"staff_id\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n\n        if not staff_id or not password:\n            flash(\"ID va parolni kiriting.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n        # ID raqam ekanligini tekshirish\n        try:\n            staff_id_int = int(staff_id)\n        except ValueError:\n            flash(\"ID raqam bo'lishi kerak.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n        try:\n            conn = get_db()\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM staff WHERE id=?\", (staff_id_int,))\n            row = cur.fetchone()\n\n            if row:\n                # SQLite Row obyektini xavfsiz dict ga aylantirish\n                try:\n                    if hasattr(row, 'keys'):\n                        row_dict = dict(row)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        columns = ['id', 'first_name', 'last_name', 'birth_date', 'phone', 'passport_series', 'passport_number', 'password_hash', 'total_hours', 'orders_handled', 'last_activity', 'created_at']\n                        row_dict = {columns[i]: row[i] if i < len(row) else None for i in range(len(columns))}\n\n                    # Password hash ni tekshirish\n                    password_hash = row_dict.get(\"password_hash\", \"\")\n\n                    # Debug uchun\n                    app_logger.info(f\"Staff login attempt: ID={staff_id_int}, has_hash={bool(password_hash)}\")\n\n                    if password_hash and check_password_hash(password_hash, password):\n                        # Faollik vaqtini yangilash\n                        now = get_current_time()\n                        now_iso = now.isoformat()\n\n                        try:\n                            cur.execute(\"UPDATE staff SET last_activity = ? WHERE id = ?\", (now_iso, staff_id_int))\n                            conn.commit()\n                        except Exception as update_error:\n                            app_logger.warning(f\"Staff faollik yangilashda xatolik: {str(update_error)}\")\n\n                        # Session ma'lumotlarini saqlash\n                        session[\"staff_id\"] = row_dict[\"id\"]\n                        session[\"staff_name\"] = f\"{row_dict['first_name']} {row_dict['last_name']}\"\n\n                        conn.close()\n                        flash(f\"Xush kelibsiz, {row_dict['first_name']}!\", \"success\")\n                        return redirect(url_for(\"staff_dashboard\"))\n                    else:\n                        conn.close()\n                        flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                        app_logger.warning(f\"Failed login attempt for staff ID: {staff_id_int}\")\n                        return redirect(url_for(\"staff_login\"))\n\n                except Exception as dict_error:\n                    app_logger.error(f\"Staff row processing error: {str(dict_error)}\")\n                    conn.close()\n                    flash(\"Ma'lumotlarni qayta ishlashda xatolik.\", \"error\")\n                    return redirect(url_for(\"staff_login\"))\n            else:\n                conn.close()\n                flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                app_logger.warning(f\"Staff not found for ID: {staff_id_int}\")\n                return redirect(url_for(\"staff_login\"))\n\n        except Exception as e:\n            if 'conn' in locals():\n                conn.close()\n            app_logger.error(f\"Staff login error: {str(e)}\")\n            flash(\"Tizimda xatolik yuz berdi.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n    return render_template(\"staff_login.html\")\n\n@app.route('/staff-register-secure-x9n5k')\ndef staff_register():\n    \"\"\"Xodim ro'yxatdan o'tish sahifasi\"\"\"\n    try:\n        return render_template('staff_register.html')\n    except Exception as e:\n        app_logger.error(f\"Staff register error: {str(e)}\")\n        return render_template('error.html', error=\"Sahifa yuklanmadi\"), 500\n\n@app.route(\"/admin/logout\")\ndef staff_logout():\n    # Super admin bo'lsa, super admin sessionni saqlash\n    is_super_admin = session.get(\"super_admin\", False)\n    session.clear()\n    if is_super_admin:\n        session[\"super_admin\"] = True\n        flash(\"Staff sessiondan chiqildi, super admin sessioni saqlandi.\", \"info\")\n    return redirect(url_for(\"index\"))\n\n# ---- STAFF DASHBOARD ----\n\n@app.route(\"/admin/dashboard\")\n@login_required\ndef staff_dashboard():\n    cleanup_expired_orders()\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n        SELECT o.*,\n               GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n        FROM orders o\n        LEFT JOIN order_details od ON o.id = od.order_id\n        LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n        GROUP BY o.id\n        ORDER BY\n            CASE\n                WHEN o.status = 'ready' THEN 1\n                WHEN o.status = 'waiting' THEN 2\n                WHEN o.status = 'served' THEN 3\n                WHEN o.status = 'cancelled' THEN 4\n                ELSE 5\n            END,\n            o.eta_time ASC,\n            o.created_at ASC\n    \"\"\")\n    orders = cur.fetchall()\n    conn.close()\n    return render_template(\"staff_dashboard.html\", orders=orders, staff_name=session.get(\"staff_name\"))\n\n@app.route(\"/admin/menu\")\n@login_required\ndef staff_menu():\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM menu_items ORDER BY category, name\")\n    menu_items = cur.fetchall()\n    conn.close()\n    return render_template(\"staff_menu.html\", menu_items=menu_items, staff_name=session.get(\"staff_name\"))\n\n@app.route(\"/admin/add_menu_item\", methods=[\"POST\"])\n@login_required\ndef add_menu_item():\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    category = request.form.get(\"category\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n\n    if not all([name, price, category]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    try:\n        price = float(price)\n    except ValueError:\n        flash(\"Narx raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            # Rasm faylini saqlash\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            # Static/images papkasini yaratish\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            # Fayl nomini xavfsiz qilish\n            filename = secure_filename(file.filename)\n            # Unikal nom yaratish\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"staff_menu\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    # Jadval tuzilishini tekshirish va kerakli ustunlarni qo'shish\n    cur.execute(\"PRAGMA table_info(menu_items);\")\n    columns = [col[1] for col in cur.fetchall()]\n\n    if 'description' not in columns:\n        cur.execute(\"ALTER TABLE menu_items ADD COLUMN description TEXT;\")\n\n    if 'image_url' not in columns:\n        cur.execute(\"ALTER TABLE menu_items ADD COLUMN image_url TEXT;\")\n\n    # Ma'lumotni kiritish\n    cur.execute(\"INSERT INTO menu_items (name, price, category, description, image_url, created_at) VALUES (?, ?, ?, ?, ?, ?)\",\n               (name, price, category, description, image_url, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi mahsulot qo'shildi!\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/toggle_menu_item/<int:item_id>\", methods=[\"POST\"])\n@login_required\ndef toggle_menu_item(item_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE menu_items SET available = NOT available WHERE id = ?\", (item_id,))\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot holati o'zgartirildi.\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/edit_menu_item/<int:item_id>\", methods=[\"POST\"])\n@login_required\ndef edit_menu_item(item_id):\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n    discount_percentage = request.form.get(\"discount_percentage\", \"0\")\n\n    if not all([name, price]):\n        flash(\"Nom va narx majburiy.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    try:\n        price = float(price)\n        discount_percentage = float(discount_percentage)\n        if discount_percentage < 0 or discount_percentage > 100:\n            flash(\"Skidka 0 dan 100 gacha bo'lishi kerak.\", \"error\")\n            return redirect(url_for(\"staff_menu\"))\n    except ValueError:\n        flash(\"Narx va skidka raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            filename = secure_filename(file.filename)\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"staff_menu\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    if image_url:\n        cur.execute(\"\"\"\n            UPDATE menu_items\n            SET name = ?, price = ?, description = ?, discount_percentage = ?, image_url = ?\n            WHERE id = ?\n        \"\"\", (name, price, description, discount_percentage, image_url, item_id))\n    else:\n        cur.execute(\"\"\"\n            UPDATE menu_items\n            SET name = ?, price = ?, description = ?, discount_percentage = ?\n            WHERE id = ?\n        \"\"\", (name, price, description, discount_percentage, item_id))\n\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot tahrirlandi!\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/order/<int:order_id>/served\", methods=[\"POST\"])\n@login_required\ndef staff_mark_served(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='served' WHERE id=?;\", (order_id,))\n\n    # Xodimning bajargan buyurtmalar sonini oshirish\n    staff_id = session.get(\"staff_id\")\n    if staff_id:\n        cur.execute(\"UPDATE staff SET orders_handled = COALESCE(orders_handled, 0) + 1 WHERE id = ?\", (staff_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma foydalanuvchiga berildi sifatida belgilandi.\", \"success\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n@app.route(\"/admin/order/<int:order_id>/ready\", methods=[\"POST\"])\n@login_required\ndef staff_mark_ready(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='ready' WHERE id=?;\", (order_id,))\n\n    # Xodimning bajargan buyurtmalar sonini oshirish\n    staff_id = session.get(\"staff_id\")\n    if staff_id:\n        cur.execute(\"UPDATE staff SET orders_handled = COALESCE(orders_handled, 0) + 1 WHERE id = ?\", (staff_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma 'tayyor' deb belgilandi.\", \"success\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n@app.route(\"/admin/order/<int:order_id>/cancel\", methods=[\"POST\"])\n@login_required\ndef staff_mark_cancel(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='cancelled' WHERE id=?;\", (order_id,))\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma bekor qilindi.\", \"warning\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n\n\n@app.route(\"/user/cancel/<int:ticket_no>\", methods=[\"POST\"])\ndef user_cancel(ticket_no):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM orders WHERE ticket_no=? ORDER BY id DESC LIMIT 1\", (ticket_no,))\n    order = cur.fetchone()\n    if not order:\n        conn.close()\n        return jsonify({\"ok\": False, \"msg\": \"Buyurtma topilmadi\"}), 404\n    if order['status'] in ('served', 'ready'):\n        conn.close()\n        return jsonify({\"ok\": False, \"msg\": \"Buyurtma allaqachon tayyor yoki berilgan, bekor qilib bo'lmaydi\"}), 400\n    cur.execute(\"UPDATE orders SET status='cancelled' WHERE id=?\", (order['id'],))\n    conn.commit()\n    conn.close()\n    return jsonify({\"ok\": True, \"msg\": \"Buyurtma bekor qilindi\"})\n@app.route(\"/admin/orders.json\")\n@login_required\ndef staff_orders_json():\n    \"\"\"Super admin uchun barcha buyurtmalar JSON formatida\"\"\"\n    try:\n        cleanup_expired_orders()\n        orders = execute_query(\"\"\"\n            SELECT o.*,\n                   GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n            FROM orders o\n            LEFT JOIN order_details od ON o.id = od.order_id\n            LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n            GROUP BY o.id\n            ORDER BY created_at ASC\n        \"\"\", fetch_all=True)\n        return jsonify([dict(order) for order in orders])\n    except Exception as e:\n        app_logger.error(f\"Staff orders.json error: {str(e)}\")\n        return jsonify([]), 500\n\n@app.route(\"/admin/employees\")\n@login_required\ndef staff_employees():\n    \"\"\"Xodimlar ro'yxatini ko'rish\"\"\"\n    employees_file = 'employees.json'\n    employees = []\n\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            employees = []\n\n    return render_template(\"staff_employees.html\", employees=employees, staff_name=session.get(\"staff_name\"))\n\n# ---- SUPER ADMIN ----\n# Super admin kredentsiallari - universal konfiguratsiyadan\nSUPER_ADMIN_USERNAME = Config.SUPER_ADMIN_USERNAME\nSUPER_ADMIN_PASSWORD = Config.SUPER_ADMIN_PASSWORD\n\n@app.route(\"/super-admin-control-panel-master-z8x9k\", methods=[\"GET\", \"POST\"])\ndef super_admin_login():\n    if request.method == \"GET\":\n        return render_template(\"super_admin_login.html\")\n\n    # POST method\n    username = request.form.get(\"username\", \"\").strip()\n    password = request.form.get(\"password\", \"\")\n\n    if username == SUPER_ADMIN_USERNAME and password == SUPER_ADMIN_PASSWORD:\n        session[\"super_admin\"] = True\n        flash(\"Super admin paneliga kirish muvaffaqiyatli!\", \"success\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n    else:\n        flash(\"Noto'g'ri login yoki parol!\", \"error\")\n        return render_template(\"super_admin_login.html\")\n\n@app.route(\"/super-admin-dashboard-ultimate-m4st3r\")\ndef super_admin_dashboard():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = None\n    try:\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Xodimlar ma'lumotlari - xavfsiz olish va dict ga aylantirish\n        staff_db = []\n        try:\n            cur.execute(\"SELECT * FROM staff ORDER BY created_at DESC\")\n            staff_raw = cur.fetchall() or []\n            for staff in staff_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(staff, 'keys'):\n                        staff_dict = dict(staff)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        staff_dict = {\n                            'id': int(staff[0]) if staff[0] is not None else 0,\n                            'first_name': str(staff[1]) if len(staff) > 1 and staff[1] is not None else '',\n                            'last_name': str(staff[2]) if len(staff) > 2 and staff[2] is not None else '',\n                            'birth_date': str(staff[3]) if len(staff) > 3 and staff[3] is not None else '',\n                            'phone': str(staff[4]) if len(staff) > 4 and staff[4] is not None else '',\n                            'passport_series': str(staff[5]) if len(staff) > 5 and staff[5] is not None else '',\n                            'passport_number': str(staff[6]) if len(staff) > 6 and staff[6] is not None else '',\n                            'password_hash': str(staff[7]) if len(staff) > 7 and staff[7] is not None else '',\n                            'total_hours': float(staff[8]) if len(staff) > 8 and staff[8] is not None else 0.0,\n                            'orders_handled': int(staff[9]) if len(staff) > 9 and staff[9] is not None else 0,\n                            'last_activity': str(staff[10]) if len(staff) > 10 and staff[10] is not None else '',\n                            'created_at': str(staff[11]) if len(staff) > 11 and staff[11] is not None else ''\n                        }\n\n                    # Xavfsiz total_hours va orders_handled konversiyasi\n                    try:\n                        if 'total_hours' in staff_dict:\n                            total_hours_val = staff_dict['total_hours']\n                            if isinstance(total_hours_val, str):\n                                if total_hours_val.replace('.', '').replace(',', '').isdigit():\n                                    staff_dict['total_hours'] = float(total_hours_val.replace(',', '.'))\n                                else:\n                                    staff_dict['total_hours'] = 0.0\n                            elif total_hours_val is None:\n                                staff_dict['total_hours'] = 0.0\n                            else:\n                                staff_dict['total_hours'] = float(total_hours_val)\n                    except (ValueError, TypeError):\n                        staff_dict['total_hours'] = 0.0\n\n                    try:\n                        if 'orders_handled' in staff_dict:\n                            orders_val = staff_dict['orders_handled']\n                            if isinstance(orders_val, str):\n                                if orders_val.isdigit():\n                                    staff_dict['orders_handled'] = int(orders_val)\n                                else:\n                                    staff_dict['orders_handled'] = 0\n                            elif orders_val is None:\n                                staff_dict['orders_handled'] = 0\n                            else:\n                                staff_dict['orders_handled'] = int(orders_val)\n                    except (ValueError, TypeError):\n                        staff_dict['orders_handled'] = 0\n\n                    staff_db.append(staff_dict)\n\n                except Exception as staff_error:\n                    app_logger.error(f\"Staff {staff[0] if staff and len(staff) > 0 else 'N/A'} qayta ishlashda xatolik: {str(staff_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        staff_db.append({\n                            'id': int(staff[0]) if staff and len(staff) > 0 and staff[0] is not None else 0,\n                            'first_name': str(staff[1]) if staff and len(staff) > 1 and staff[1] is not None else 'N/A',\n                            'last_name': str(staff[2]) if staff and len(staff) > 2 and staff[2] is not None else 'N/A',\n                            'birth_date': str(staff[3]) if staff and len(staff) > 3 and staff[3] is not None else 'N/A',\n                            'phone': str(staff[4]) if staff and len(staff) > 4 and staff[4] is not None else 'N/A',\n                            'passport_series': 'N/A',\n                            'passport_number': 'N/A',\n                            'password_hash': '',\n                            'total_hours': 0.0,\n                            'orders_handled': 0,\n                            'last_activity': '',\n                            'created_at': str(staff[11]) if staff and len(staff) > 11 and staff[11] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Staff ma'lumotlarini olishda xatolik: {str(e)}\")\n            staff_db = []  # Bo'sh list bilan davom etish\n\n        # Kuryerlar ma'lumotlari - xavfsiz olish va dict ga aylantirish\n        couriers_db = []\n        try:\n            cur.execute(\"SELECT * FROM couriers ORDER BY created_at DESC\")\n            couriers_raw = cur.fetchall() or []\n            for courier in couriers_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(courier, 'keys'):\n                        courier_dict = dict(courier)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        courier_dict = {\n                            'id': int(courier[0]) if courier[0] is not None else 0,\n                            'first_name': str(courier[1]) if len(courier) > 1 and courier[1] is not None else '',\n                            'last_name': str(courier[2]) if len(courier) > 2 and courier[2] is not None else '',\n                            'birth_date': str(courier[3]) if len(courier) > 3 and courier[3] is not None else '',\n                            'phone': str(courier[4]) if len(courier) > 4 and courier[4] is not None else '',\n                            'passport_series': str(courier[5]) if len(courier) > 5 and courier[5] is not None else '',\n                            'passport_number': str(courier[6]) if len(courier) > 6 and courier[6] is not None else '',\n                            'password_hash': str(courier[7]) if len(courier) > 7 and courier[7] is not None else '',\n                            'total_hours': float(courier[8]) if len(courier) > 8 and courier[8] is not None else 0.0,\n                            'deliveries_completed': int(courier[9]) if len(courier) > 9 and courier[9] is not None else 0,\n                            'last_activity': str(courier[10]) if len(courier) > 10 and courier[10] is not None else '',\n                            'created_at': str(courier[11]) if len(courier) > 11 and courier[11] is not None else ''\n                        }\n\n                    # Xavfsiz total_hours va deliveries_completed konversiyasi\n                    try:\n                        if 'total_hours' in courier_dict:\n                            total_hours_val = courier_dict['total_hours']\n                            if isinstance(total_hours_val, str):\n                                if total_hours_val.replace('.', '').replace(',', '').isdigit():\n                                    courier_dict['total_hours'] = float(total_hours_val.replace(',', '.'))\n                                else:\n                                    courier_dict['total_hours'] = 0.0\n                            elif total_hours_val is None:\n                                courier_dict['total_hours'] = 0.0\n                            else:\n                                courier_dict['total_hours'] = float(total_hours_val)\n                    except (ValueError, TypeError):\n                        courier_dict['total_hours'] = 0.0\n\n                    try:\n                        if 'deliveries_completed' in courier_dict:\n                            deliveries_val = courier_dict['deliveries_completed']\n                            if isinstance(deliveries_val, str):\n                                if deliveries_val.isdigit():\n                                    courier_dict['deliveries_completed'] = int(deliveries_val)\n                                else:\n                                    courier_dict['deliveries_completed'] = 0\n                            elif deliveries_val is None:\n                                courier_dict['deliveries_completed'] = 0\n                            else:\n                                courier_dict['deliveries_completed'] = int(deliveries_val)\n                    except (ValueError, TypeError):\n                        courier_dict['deliveries_completed'] = 0\n\n                    couriers_db.append(courier_dict)\n\n                except Exception as courier_error:\n                    app_logger.error(f\"Courier {courier[0] if courier and len(courier) > 0 else 'N/A'} qayta ishlashda xatolik: {str(courier_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        couriers_db.append({\n                            'id': int(courier[0]) if courier and len(courier) > 0 and courier[0] is not None else 0,\n                            'first_name': str(courier[1]) if courier and len(courier) > 1 and courier[1] is not None else 'N/A',\n                            'last_name': str(courier[2]) if courier and len(courier) > 2 and courier[2] is not None else 'N/A',\n                            'birth_date': str(courier[3]) if courier and len(courier) > 3 and courier[3] is not None else 'N/A',\n                            'phone': str(courier[4]) if courier and len(courier) > 4 and courier[4] is not None else 'N/A',\n                            'passport_series': 'N/A',\n                            'passport_number': 'N/A',\n                            'password_hash': '',\n                            'total_hours': 0.0,\n                            'deliveries_completed': 0,\n                            'last_activity': '',\n                            'created_at': str(courier[11]) if courier and len(courier) > 11 and courier[11] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Couriers ma'lumotlarini olishda xatolik: {str(e)}\")\n            couriers_db = []  # Bo'sh list bilan davom etish\n\n        # Foydalanuvchilarni olish - xavfsiz va dict ga aylantirish\n        users_db = []\n        try:\n            cur.execute(\"SELECT * FROM users ORDER BY created_at DESC\")\n            users_raw = cur.fetchall() or []\n            for user in users_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(user, 'keys'):\n                        user_dict = dict(user)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        user_dict = {\n                            'id': int(user[0]) if user[0] is not None else 0,\n                            'first_name': str(user[1]) if len(user) > 1 and user[1] is not None else '',\n                            'last_name': str(user[2]) if len(user) > 2 and user[2] is not None else '',\n                            'email': str(user[3]) if len(user) > 3 and user[3] is not None else '',\n                            'phone': str(user[4]) if len(user) > 4 and user[4] is not None else '',\n                            'password_hash': str(user[5]) if len(user) > 5 and user[5] is not None else '',\n                            'address': str(user[6]) if len(user) > 6 and user[6] is not None else '',\n                            'card_number': str(user[7]) if len(user) > 7 and user[7] is not None else '',\n                            'card_expiry': str(user[8]) if len(user) > 8 and user[8] is not None else '',\n                            'created_at': str(user[9]) if len(user) > 9 and user[9] is not None else ''\n                        }\n\n                    users_db.append(user_dict)\n\n                except Exception as user_error:\n                    app_logger.error(f\"User {user[0] if user and len(user) > 0 else 'N/A'} qayta ishlashda xatolik: {str(user_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        users_db.append({\n                            'id': int(user[0]) if user and len(user) > 0 and user[0] is not None else 0,\n                            'first_name': str(user[1]) if user and len(user) > 1 and user[1] is not None else 'N/A',\n                            'last_name': str(user[2]) if user and len(user) > 2 and user[2] is not None else 'N/A',\n                            'email': str(user[3]) if user and len(user) > 3 and user[3] is not None else 'N/A',\n                            'phone': 'N/A',\n                            'password_hash': '',\n                            'address': 'N/A',\n                            'card_number': 'N/A',\n                            'card_expiry': 'N/A',\n                            'created_at': str(user[9]) if user and len(user) > 9 and user[9] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Users ma'lumotlarini olishda xatolik: {str(e)}\")\n            users_db = []  # Bo'sh list bilan davom etish\n\n        # JSON fayldan foydalanuvchilarni olish - xavfsiz\n        users_json = []\n        users_file = 'users.json'\n        if os.path.exists(users_file):\n            try:\n                with open(users_file, 'r', encoding='utf-8') as f:\n                    users_json = json.load(f) or []\n            except (json.JSONDecodeError, FileNotFoundError, Exception) as e:\n                app_logger.warning(f\"Users JSON faylini o'qishda xatolik: {str(e)}\")\n                users_json = []\n\n        # Savollarni olish - xavfsiz\n        try:\n            cur.execute(\"SELECT * FROM questions ORDER BY created_at DESC\")\n            questions = cur.fetchall() or []\n        except Exception as e:\n            app_logger.error(f\"Questions ma'lumotlarini olishda xatolik: {str(e)}\")\n            questions = []\n\n        # Filiallarni olish - xavfsiz va baho qo'shish\n        branches = []\n        try:\n            cur.execute(\"SELECT * FROM branches ORDER BY created_at DESC\")\n            branches_raw = cur.fetchall() or []\n\n            for branch_row in branches_raw:\n                try:\n                    # Safe access to branch data, assuming branch_row is a dictionary-like object from fetchall\n                    if hasattr(branch_row, 'keys'):\n                        branch_dict = dict(zip(branch_row.keys(), branch_row))\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        branch_dict = {\n                            'id': int(branch_row[0]) if len(branch_row) > 0 and branch_row[0] is not None else 0,\n                            'name': str(branch_row[1]) if len(branch_row) > 1 and branch_row[1] is not None else 'N/A',\n                            'address': str(branch_row[2]) if len(branch_row) > 2 and branch_row[2] is not None else 'N/A',\n                            'latitude': 0.0,\n                            'longitude': 0.0,\n                            'phone': str(branch_row[5]) if len(branch_row) > 5 and branch_row[5] is not None else 'N/A',\n                            'working_hours': str(branch_row[6]) if len(branch_row) > 6 and branch_row[6] is not None else '09:00-22:00',\n                            'is_active': int(branch_row[7]) if len(branch_row) > 7 and branch_row[7] is not None else 1,\n                            'delivery_radius': 15.0,\n                            'created_at': str(branch_row[9]) if len(branch_row) > 9 and branch_row[9] is not None else ''\n                        }\n\n                        # Safe coordinate conversion\n                        try:\n                            if len(branch_row) > 3 and branch_row[3] is not None:\n                                lat_val = branch_row[3]\n                                try:\n                                    if isinstance(lat_val, str):\n                                        # String bo'lsa, raqamga aylantirish\n                                        clean_lat = str(lat_val).replace(',', '.').strip()\n                                        if clean_lat and clean_lat.replace('.', '').replace('-', '').isdigit():\n                                            branch_dict['latitude'] = float(clean_lat)\n                                        else:\n                                            branch_dict['latitude'] = 41.2995  # Default Toshkent koordinatasi\n                                    elif isinstance(lat_val, (int, float)):\n                                        branch_dict['latitude'] = float(lat_val)\n                                    else:\n                                        branch_dict['latitude'] = 41.2995\n                                except (ValueError, TypeError) as coord_error:\n                                    app_logger.warning(f\"Latitude conversion error: {str(coord_error)}\")\n                                    branch_dict['latitude'] = 41.2995\n                            else:\n                                branch_dict['latitude'] = 41.2995\n                        except Exception as lat_error:\n                            app_logger.error(f\"Latitude processing error: {str(lat_error)}\")\n                            branch_dict['latitude'] = 41.2995\n\n                        try:\n                            if len(branch_row) > 4 and branch_row[4] is not None:\n                                lng_val = branch_row[4]\n                                if isinstance(lng_val, (int, float)):\n                                    branch_dict['longitude'] = float(lng_val)\n                                elif isinstance(lng_val, str) and lng_val.replace(',', '.').strip():\n                                    # String dan float ga xavfsiz aylantirish\n                                    clean_lng = lng_val.replace(',', '.').strip()\n                                    if clean_lng and clean_lng != '':\n                                        try:\n                                            branch_dict['longitude'] = float(clean_lng)\n                                        except (ValueError, TypeError):\n                                            branch_dict['longitude'] = 0.0\n                                    else:\n                                        branch_dict['longitude'] = 0.0\n                                else:\n                                    branch_dict['longitude'] = 0.0\n                            else:\n                                branch_dict['longitude'] = 0.0\n                        except (ValueError, TypeError):\n                            branch_dict['longitude'] = 0.0\n\n                        try:\n                            if len(branch_row) > 8 and branch_row[8] is not None:\n                                radius_val = branch_row[8]\n                                if isinstance(radius_val, (int, float)):\n                                    branch_dict['delivery_radius'] = float(radius_val)\n                                elif isinstance(radius_val, str) and radius_val.replace('.', '').isdigit():\n                                    branch_dict['delivery_radius'] = float(radius_val)\n                                else:\n                                    branch_dict['delivery_radius'] = 15.0\n                            else:\n                                branch_dict['delivery_radius'] = 15.0\n                        except (ValueError, TypeError):\n                            branch_dict['delivery_radius'] = 15.0\n\n\n                    # Baho ma'lumotlarini xavfsiz olish\n                    try:\n                        rating_data = get_branch_average_rating(int(branch_dict['id']))\n                        branch_dict['average_rating'] = float(rating_data.get('average_rating', 0.0))\n                        branch_dict['total_ratings'] = int(rating_data.get('total_ratings', 0))\n                    except Exception as rating_error:\n                        app_logger.warning(f\"Branch {branch_dict['id']} bahosini olishda xatolik: {str(rating_error)}\")\n                        branch_dict['average_rating'] = 0.0\n                        branch_dict['total_ratings'] = 0\n\n                    branches.append(branch_dict)\n\n                except Exception as branch_error:\n                    app_logger.error(f\"Branch ma'lumotini qayta ishlashda xatolik: {str(branch_error)}\")\n                    continue\n\n        except Exception as e:\n            app_logger.error(f\"Branches ma'lumotlarini olishda xatolik: {str(e)}\")\n            branches = []\n\n        # Buyurtmalar statistikasi - xavfsiz hisoblash\n        stats = {\n            'total_orders': 0,\n            'waiting_orders': 0,\n            'ready_orders': 0,\n            'served_orders': 0,\n            'month_orders': 0,\n            'total_staff': len(staff_db),\n            'total_couriers': len(couriers_db),\n            'total_users': len(users_db),\n            'total_users_json': len(users_json)\n        }\n\n        try:\n            # Jami buyurtmalar\n            cur.execute(\"SELECT COUNT(*) FROM orders\")\n            result = cur.fetchone()\n            stats['total_orders'] = result[0] if result else 0\n\n            # Status bo'yicha statistika\n            status_queries = [\n                ('waiting_orders', \"SELECT COUNT(*) FROM orders WHERE status='waiting'\"),\n                ('ready_orders', \"SELECT COUNT(*) FROM orders WHERE status='ready'\"),\n                ('served_orders', \"SELECT COUNT(*) FROM orders WHERE status='served'\")\n            ]\n\n            for stat_key, query in status_queries:\n                try:\n                    cur.execute(query)\n                    result = cur.fetchone()\n                    stats[stat_key] = result[0] if result else 0\n                except Exception as e:\n                    app_logger.warning(f\"{stat_key} statistikasini olishda xatolik: {str(e)}\")\n                    stats[stat_key] = 0\n\n            # Bu oylik statistika\n            try:\n                current_month = get_current_time().strftime(\"%Y-%m\")\n                cur.execute(\"SELECT COUNT(*) FROM orders WHERE created_at LIKE ?\", (f\"{current_month}%\",))\n                result = cur.fetchone()\n                stats['month_orders'] = result[0] if result else 0\n            except Exception as e:\n                app_logger.warning(f\"Oylik statistikani olishda xatolik: {str(e)}\")\n                stats['month_orders'] = 0\n\n        except Exception as e:\n            app_logger.error(f\"Statistikalarni hisoblashda xatolik: {str(e)}\")\n\n        if conn:\n            conn.close()\n\n        return render_template(\"super_admin_dashboard.html\",\n                             staff_db=staff_db or [],\n                             couriers_db=couriers_db or [],\n                             users_db=users_db or [],\n                             users_json=users_json or [],\n                             questions=questions or [],\n                             branches=branches or [],\n                             stats=stats)\n\n    except Exception as e:\n        app_logger.error(f\"Super admin dashboard xatoligi: {str(e)}\")\n        if conn:\n            try:\n                conn.close()\n            except:\n                pass\n\n        # Emergency fallback\n        try:\n            return render_template(\"super_admin_dashboard.html\",\n                                 staff_db=[],\n                                 couriers_db=[],\n                                 users_db=[],\n                                 users_json=[],\n                                 questions=[],\n                                 branches=[],\n                                 stats={'total_orders': 0, 'waiting_orders': 0, 'ready_orders': 0,\n                                       'served_orders': 0, 'month_orders': 0, 'total_staff': 0,\n                                       'total_couriers': 0, 'total_users': 0, 'total_users_json': 0})\n        except Exception as template_error:\n            app_logger.critical(f\"Template render ham ishlamadi: {str(template_error)}\")\n            return f\"\"\"\n            <h1>Super Admin Dashboard</h1>\n            <p>Dashboard yuklashda xatolik: {str(e)}</p>\n            <a href=\"{url_for('super_admin_login')}\">Login sahifasiga qaytish</a>\n            \"\"\", 500\n\n@app.route(\"/super-admin/delete-staff/<int:staff_id>\", methods=[\"POST\"])\ndef super_admin_delete_staff(staff_id):\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM staff WHERE id = ?\", (staff_id,))\n    conn.commit()\n    conn.close()\n\n    # JSON fayldan ham o'chirish\n    employees_file = 'employees.json'\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees = json.load(f)\n\n            employees = [emp for emp in employees if emp.get('id') != staff_id]\n\n            with open(employees_file, 'w', encoding='utf-8') as f:\n                json.dump(employees, f, ensure_ascii=False, indent=2)\n        except:\n            pass\n\n    flash(f\"Xodim #{staff_id} o'chirildi.\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-staff\", methods=[\"POST\"])\ndef super_admin_add_staff():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    first_name = request.form.get(\"first_name\", \"\").strip()\n    last_name = request.form.get(\"last_name\", \"\").strip()\n    birth_date = request.form.get(\"birth_date\", \"\").strip()\n    phone = request.form.get(\"phone\", \"\").strip()\n    passport_series = request.form.get(\"passport_series\", \"\").strip()\n    passport_number = request.form.get(\"passport_number\", \"\").strip()\n    password = request.form.get(\"password\", \"\")\n\n    if not all([first_name, last_name, birth_date, phone, passport_series, passport_number, password]):\n        flash(\"Barcha maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    password_hash = generate_password_hash(password)\n    now = get_current_time()\n    cur.execute(\"\"\"\n        INSERT INTO staff (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n    \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n\n    new_id = cur.lastrowid\n    # ID kamida 5 ta raqamdan iborat bo'lishi uchun\n    if new_id < 10000:\n        cur.execute(\"UPDATE staff SET id = ? WHERE id = ?\", (10000 + new_id, new_id))\n        new_id = 10000 + new_id\n\n    conn.commit()\n    conn.close()\n\n    # JSON fayliga ham saqlash\n    save_staff_to_json(first_name, last_name, birth_date, phone, new_id, now)\n\n    flash(f\"Yangi xodim qo'shildi. ID: {new_id}\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-menu-item\", methods=[\"POST\"])\ndef super_admin_add_menu_item():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    category = request.form.get(\"category\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n\n    if not all([name, price, category]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    try:\n        price = float(price)\n    except ValueError:\n        flash(\"Narx raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            filename = secure_filename(file.filename)\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    cur.execute(\"INSERT INTO menu_items (name, price, category, description, image_url, created_at) VALUES (?, ?, ?, ?, ?, ?)\",\n               (name, price, category, description, image_url, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi mahsulot qo'shildi!\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-branch\", methods=[\"POST\"])\ndef super_admin_add_branch():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    name = request.form.get(\"name\", \"\").strip()\n    address = request.form.get(\"address\", \"\").strip()\n    latitude = request.form.get(\"latitude\", \"\")\n    longitude = request.form.get(\"longitude\", \"\")\n    phone = request.form.get(\"phone\", \"\").strip()\n    working_hours = request.form.get(\"working_hours\", \"09:00-22:00\")\n    delivery_radius = request.form.get(\"delivery_radius\", \"15\")\n\n    if not all([name, address, latitude, longitude]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    try:\n        latitude = float(latitude)\n        longitude = float(longitude)\n        delivery_radius = float(delivery_radius)\n    except ValueError:\n        flash(\"Koordinatalar va yetkazish radiusi raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    cur.execute(\"\"\"\n        INSERT INTO branches (name, address, latitude, longitude, phone, working_hours, delivery_radius, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    \"\"\", (name, address, latitude, longitude, phone, working_hours, delivery_radius, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi filial qo'shildi!\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/delete-branch/<int:branch_id>\", methods=[\"POST\"])\ndef super_admin_delete_branch(branch_id):\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM branches WHERE id = ?\", (branch_id,))\n    conn.commit()\n    conn.close()\n\n    flash(f\"Filial #{branch_id} o'chirildi.\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/logout\")\ndef super_admin_logout():\n    \"\"\"Super admin panelidan chiqish\"\"\"\n    session.pop(\"super_admin\", None)\n    flash(\"Super admin panelidan chiqdingiz.\", \"info\")\n    return redirect(url_for(\"index\"))\n\n@app.route(\"/contact\")\ndef contact():\n    \"\"\"Aloqa sahifasi\"\"\"\n    return render_template(\"contact.html\", current_page='contact')\n\n@app.route(\"/about\")\ndef about():\n    \"\"\"Biz haqimizda sahifasi\"\"\"\n    return render_template(\"about.html\", current_page='about')\n\n@app.route(\"/downloads\")\ndef downloads():\n    \"\"\"Yuklab olish sahifasi\"\"\"\n    return render_template(\"downloads.html\", current_page='downloads')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":170742},"config.py":{"content":"\n\"\"\"\nUniversal Restaurant System Configuration\nBu modul barcha konfiguratsiya sozlamalarini boshqaradi\n\"\"\"\n\nimport os\nimport secrets\nfrom dotenv import load_dotenv\n\n# Environment variables yuklash\nload_dotenv()\n\nclass BaseConfig:\n    \"\"\"Asosiy konfiguratsiya sinfi\"\"\"\n    \n    # Environment\n    ENVIRONMENT = os.environ.get('FLASK_ENV', 'production')\n    IS_DEVELOPMENT = ENVIRONMENT == 'development'\n    IS_PRODUCTION = ENVIRONMENT == 'production'\n    \n    # Flask asosiy sozlamalari\n    SECRET_KEY = os.environ.get(\"SECRET_KEY\", secrets.token_urlsafe(32))\n    \n    # Database\n    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///restaurant.db')\n    SQLALCHEMY_DATABASE_URI = DATABASE_URL\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    \n    # Security\n    SESSION_COOKIE_SECURE = IS_PRODUCTION\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n    PERMANENT_SESSION_LIFETIME = 7200\n    WTF_CSRF_ENABLED = True\n    \n    # File upload\n    MAX_CONTENT_LENGTH = 32 * 1024 * 1024  # 32MB\n    UPLOAD_FOLDER = 'static/uploads'\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp', 'svg'}\n    \n    # Localization\n    DEFAULT_LANGUAGE = os.environ.get('DEFAULT_LANGUAGE', 'uz')\n    SUPPORTED_LANGUAGES = ['uz', 'ru', 'en', 'tr', 'ar', 'fa']\n    DEFAULT_CURRENCY = os.environ.get('DEFAULT_CURRENCY', 'UZS')\n    TIMEZONE = os.environ.get('TIMEZONE', 'Asia/Tashkent')\n    \n    # Business logic\n    AVG_PREP_MINUTES = int(os.environ.get(\"AVG_PREP_MINUTES\", \"7\"))\n    DELIVERY_BASE_PRICE = int(os.environ.get(\"DELIVERY_BASE_PRICE\", \"10000\"))\n    COURIER_BASE_RATE = int(os.environ.get(\"COURIER_BASE_RATE\", \"8000\"))\n    CASHBACK_PERCENTAGE = float(os.environ.get(\"CASHBACK_PERCENTAGE\", \"1.0\"))\n    MAX_DELIVERY_DISTANCE = float(os.environ.get(\"MAX_DELIVERY_DISTANCE\", \"50.0\"))\n    MIN_ORDER_AMOUNT = int(os.environ.get(\"MIN_ORDER_AMOUNT\", \"20000\"))\n    \n    # External APIs\n    YANDEX_GEOCODER_API = os.environ.get('YANDEX_GEOCODER_API', '')\n    GOOGLE_MAPS_API = os.environ.get('GOOGLE_MAPS_API', '')\n    SERPER_API_KEY = os.environ.get('SERPER_API_KEY', '1b077296f67499a12ee28ce232bb48221d29be14')\n    \n    # Admin credentials\n    SUPER_ADMIN_USERNAME = os.environ.get('SUPER_ADMIN_USERNAME', 'masteradmin')\n    SUPER_ADMIN_PASSWORD = os.environ.get('SUPER_ADMIN_PASSWORD', 'SuperAdmin2025!@#$%')\n    \n    # Performance settings\n    THREAD_POOL_MAX_WORKERS = int(os.environ.get('THREAD_POOL_MAX_WORKERS', '10'))\n    DB_POOL_MAX_CONNECTIONS = int(os.environ.get('DB_POOL_MAX_CONNECTIONS', '20'))\n    \n    # Rate limiting\n    RATE_LIMIT_DAILY = int(os.environ.get(\"RATE_LIMIT_DAILY\", \"1000\"))\n    RATE_LIMIT_HOURLY = int(os.environ.get(\"RATE_LIMIT_HOURLY\", \"200\"))\n    RATE_LIMIT_MINUTE = int(os.environ.get(\"RATE_LIMIT_MINUTE\", \"50\"))\n    \n    # Cache settings\n    REDIS_URL = os.environ.get('REDIS_URL', 'memory://')\n    CACHE_DEFAULT_TTL = int(os.environ.get('CACHE_DEFAULT_TTL', '300'))\n    \n    # Logging\n    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')\n    LOG_FILE_MAX_SIZE = int(os.environ.get('LOG_FILE_MAX_SIZE', '10485760'))\n    LOG_BACKUP_COUNT = int(os.environ.get('LOG_BACKUP_COUNT', '5'))\n\nclass DevelopmentConfig(BaseConfig):\n    \"\"\"Development muhiti uchun konfiguratsiya\"\"\"\n    DEBUG = True\n    SQLALCHEMY_ECHO = True\n    LOG_LEVEL = 'DEBUG'\n    JSONIFY_PRETTYPRINT_REGULAR = True\n    SESSION_COOKIE_SECURE = False\n\nclass ProductionConfig(BaseConfig):\n    \"\"\"Production muhiti uchun konfiguratsiya\"\"\"\n    DEBUG = False\n    SQLALCHEMY_ECHO = False\n    LOG_LEVEL = 'WARNING'\n    \nclass TestingConfig(BaseConfig):\n    \"\"\"Testing muhiti uchun konfiguratsiya\"\"\"\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    WTF_CSRF_ENABLED = False\n\n# Configuration selector\nconfig_map = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'testing': TestingConfig\n}\n\ndef get_config():\n    \"\"\"Muhit bo'yicha konfiguratsiyani qaytarish\"\"\"\n    env = os.environ.get('FLASK_ENV', 'production')\n    return config_map.get(env, ProductionConfig)\n\n# Apply universal configuration\napp.config.from_object(get_config())</old_str>\n","size_bytes":4099},"deploy_config.py":{"content":"\"\"\"\nUniversal Restaurant System Deployment Configuration\n\"\"\"\n\nimport os\n\ndef get_server_config():\n    \"\"\"Server konfiguratsiyasini qaytarish\"\"\"\n    return {\n        'host': '0.0.0.0',  # Replit uchun 0.0.0.0 kerak\n        'port': int(os.environ.get('PORT', 5000)),\n        'debug': os.environ.get('FLASK_ENV') == 'development',\n        'threaded': True\n    }\n\ndef get_production_config():\n    \"\"\"Production muhit uchun konfiguratsiya\"\"\"\n    return {\n        'host': '0.0.0.0',\n        'port': int(os.environ.get('PORT', 5000)),\n        'debug': False,\n        'threaded': True,\n        'use_reloader': False,\n        'use_debugger': False\n    }","size_bytes":644},"keep_alive.py":{"content":"from flask import Flask\nfrom threading import Thread\n\napp = Flask('')\n\n@app.route('/')\ndef home():\n    return \"Server is running!\"\n\ndef run():\n    app.run(host=\"0.0.0.0\", port=8080)\n\ndef keep_alive():\n    t = Thread(target=run)\n    t.start()\n","size_bytes":242},"location_service.py":{"content":"\nimport requests\nimport json\n\nclass LocationService:\n    def __init__(self):\n        self.api_key = \"1b077296f67499a12ee28ce232bb48221d29be14\"\n        self.base_url = \"https://google.serper.dev/places\"\n    \n    def search_places(self, query, country=\"uz\", language=\"uz\"):\n        \"\"\"Joylashuvlarni qidirish\"\"\"\n        data = {\n            \"q\": query,\n            \"gl\": country,\n            \"hl\": language\n        }\n        \n        headers = {\n            'X-API-KEY': self.api_key,\n            'Content-Type': 'application/json'\n        }\n        \n        try:\n            response = requests.post(\n                self.base_url,\n                headers=headers,\n                data=json.dumps(data),\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                return {\"error\": f\"API xatolik: {response.status_code}\"}\n                \n        except requests.exceptions.RequestException as e:\n            return {\"error\": f\"Tarmoq xatoligi: {str(e)}\"}\n    \n    def validate_address(self, address):\n        \"\"\"Manzilni tekshirish\"\"\"\n        result = self.search_places(address)\n        \n        if \"error\" not in result and \"places\" in result:\n            places = result.get(\"places\", [])\n            if places:\n                first_place = places[0]\n                return {\n                    \"valid\": True,\n                    \"formatted_address\": first_place.get(\"title\", \"\"),\n                    \"latitude\": first_place.get(\"gps_coordinates\", {}).get(\"latitude\"),\n                    \"longitude\": first_place.get(\"gps_coordinates\", {}).get(\"longitude\"),\n                    \"place_type\": first_place.get(\"type\", \"\")\n                }\n        \n        return {\"valid\": False, \"error\": \"Manzil topilmadi\"}\n    \n    def get_nearby_places(self, query=\"restoran\", location=\"Tashkent\"):\n        \"\"\"Yaqin atrofdagi joylarni topish\"\"\"\n        search_query = f\"{query} {location}\"\n        return self.search_places(search_query)\n\"\"\"\nLocation Service for Restaurant App\nProvides address validation and location search functionality\n\"\"\"\n\nimport requests\nimport logging\nimport os\nfrom typing import Dict, List, Optional, Tuple\n\nclass LocationService:\n    def __init__(self):\n        self.serper_api_key = os.environ.get('SERPER_API_KEY', '1b077296f67499a12ee28ce232bb48221d29be14')\n        self.yandex_api_key = os.environ.get('YANDEX_GEOCODER_API', '')\n        self.logger = logging.getLogger('location_service')\n\n    def search_places(self, query: str, gl: str = \"uz\", hl: str = \"uz\") -> Dict:\n        \"\"\"Joylarni qidirish\"\"\"\n        try:\n            if not self.serper_api_key:\n                self.logger.warning(\"Serper API key not found\")\n                return {\"places\": [], \"error\": \"API key not configured\"}\n\n            url = \"https://google.serper.dev/places\"\n            headers = {\n                'X-API-KEY': self.serper_api_key,\n                'Content-Type': 'application/json'\n            }\n            data = {\n                \"q\": f\"{query} Tashkent Uzbekistan\",\n                \"gl\": gl,\n                \"hl\": hl,\n                \"limit\": 10\n            }\n\n            response = requests.post(url, headers=headers, json=data, timeout=10)\n\n            if response.status_code == 200:\n                result = response.json()\n                places = []\n\n                # Places ma'lumotlarini qayta ishlash\n                if 'places' in result:\n                    for place in result['places'][:5]:  # Faqat birinchi 5 ta\n                        place_data = {\n                            'title': place.get('title', ''),\n                            'address': place.get('address', ''),\n                            'gps_coordinates': {\n                                'latitude': place.get('gpsCoordinates', {}).get('latitude', 0),\n                                'longitude': place.get('gpsCoordinates', {}).get('longitude', 0)\n                            },\n                            'rating': place.get('rating', 0),\n                            'category': place.get('category', '')\n                        }\n                        places.append(place_data)\n\n                return {\"places\": places, \"total\": len(places)}\n            else:\n                self.logger.error(f\"Serper API error: {response.status_code} - {response.text}\")\n                return {\"places\": [], \"error\": f\"API error: {response.status_code}\"}\n\n        except requests.RequestException as e:\n            self.logger.error(f\"Network error in search_places: {str(e)}\")\n            return {\"places\": [], \"error\": \"Network error\"}\n        except Exception as e:\n            self.logger.error(f\"Unexpected error in search_places: {str(e)}\")\n            return {\"places\": [], \"error\": \"Unexpected error\"}\n\n    def validate_address(self, address: str) -> Tuple[bool, str]:\n        \"\"\"Manzilni tekshirish\"\"\"\n        if not address or len(address.strip()) < 5:\n            return False, \"Manzil juda qisqa\"\n\n        # Oddiy tekshirish\n        address_lower = address.lower()\n        valid_keywords = ['ko\\'cha', 'mahalla', 'tuman', 'yo\\'l', 'mfy', 'shoh', 'ko\\'ch']\n        \n        if any(keyword in address_lower for keyword in valid_keywords):\n            return True, \"Manzil to'g'ri formatda\"\n        \n        # Agar keywords bo'lmasa, uzunlik bo'yicha tekshirish\n        if len(address.strip()) >= 10:\n            return True, \"Manzil qabul qilindi\"\n        \n        return False, \"Manzilni to'liqroq kiriting\"\n\n    def calculate_distance(self, from_coords: Tuple[float, float], to_coords: Tuple[float, float]) -> float:\n        \"\"\"Ikki nuqta orasidagi masofani hisoblash (Haversine formula)\"\"\"\n        import math\n        \n        lat1, lng1 = math.radians(from_coords[0]), math.radians(from_coords[1])\n        lat2, lng2 = math.radians(to_coords[0]), math.radians(to_coords[1])\n\n        dlat = lat2 - lat1\n        dlng = lng2 - lng1\n\n        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2\n        c = 2 * math.asin(math.sqrt(a))\n        distance_km = 6371 * c  # Yer radiusi\n\n        return round(distance_km, 2)\n\n    def get_coordinates(self, address: str) -> Optional[Tuple[float, float]]:\n        \"\"\"Manzil bo'yicha koordinatalarni olish\"\"\"\n        try:\n            if not self.yandex_api_key:\n                # Fallback coordinates (Tashkent center)\n                return (41.2995, 69.2401)\n\n            url = \"https://geocode-maps.yandex.ru/1.x/\"\n            params = {\n                'apikey': self.yandex_api_key,\n                'geocode': f\"{address}, Tashkent, Uzbekistan\",\n                'format': 'json',\n                'results': 1\n            }\n\n            response = requests.get(url, params=params, timeout=5)\n\n            if response.status_code == 200:\n                data = response.json()\n                geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])\n\n                if geo_objects:\n                    point = geo_objects[0]['GeoObject']['Point']['pos'].split()\n                    return (float(point[1]), float(point[0]))  # lat, lng\n\n        except Exception as e:\n            self.logger.error(f\"Geocoding error: {str(e)}\")\n\n        # Fallback Tashkent coordinates\n        return (41.2995, 69.2401)\n","size_bytes":7331},"utils.py":{"content":"\n\"\"\"\nUniversal Restaurant System Utilities\nBarcha yordamchi funksiyalar bu yerda\n\"\"\"\n\nimport os\nimport time\nimport hashlib\nimport secrets\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom functools import wraps\nfrom flask import request, jsonify, session, flash, redirect, url_for\n\ndef generate_unique_id(prefix=\"\", length=8):\n    \"\"\"Unikal ID yaratish\"\"\"\n    return f\"{prefix}{secrets.token_hex(length)}\"\n\ndef format_currency(amount, currency=\"UZS\"):\n    \"\"\"Valyutani formatlash\"\"\"\n    if currency == \"UZS\":\n        return f\"{amount:,.0f} so'm\"\n    elif currency == \"USD\":\n        return f\"${amount:,.2f}\"\n    elif currency == \"EUR\":\n        return f\"€{amount:,.2f}\"\n    else:\n        return f\"{amount:,.2f} {currency}\"\n\ndef validate_phone_number(phone):\n    \"\"\"Telefon raqamini tekshirish\"\"\"\n    import re\n    # O'zbek telefon raqamlari formati\n    patterns = [\n        r'^\\+998\\d{9}$',        # +998901234567\n        r'^998\\d{9}$',          # 998901234567\n        r'^\\d{9}$',             # 901234567\n    ]\n    \n    phone = phone.strip().replace(' ', '').replace('-', '')\n    return any(re.match(pattern, phone) for pattern in patterns)\n\ndef validate_email(email):\n    \"\"\"Email formatini tekshirish\"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email.strip()) is not None\n\ndef safe_int(value, default=0):\n    \"\"\"Xavfsiz integer conversion\"\"\"\n    try:\n        return int(value) if value else default\n    except (ValueError, TypeError):\n        return default\n\ndef safe_float(value, default=0.0):\n    \"\"\"Xavfsiz float conversion\"\"\"\n    try:\n        return float(value) if value else default\n    except (ValueError, TypeError):\n        return default\n\ndef get_client_ip():\n    \"\"\"Mijozning haqiqiy IP manzilini olish\"\"\"\n    if request.headers.get('X-Forwarded-For'):\n        return request.headers['X-Forwarded-For'].split(',')[0].strip()\n    elif request.headers.get('X-Real-IP'):\n        return request.headers['X-Real-IP']\n    else:\n        return request.remote_addr\n\ndef create_response(success=True, message=\"\", data=None, status_code=200):\n    \"\"\"Universal API response yaratish\"\"\"\n    response = {\n        \"success\": success,\n        \"message\": message,\n        \"timestamp\": time.time()\n    }\n    \n    if data is not None:\n        response[\"data\"] = data\n    \n    return jsonify(response), status_code\n\ndef log_user_action(action, user_type=\"guest\", user_id=None, details=None):\n    \"\"\"Foydalanuvchi harakatlarini log qilish\"\"\"\n    log_data = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"action\": action,\n        \"user_type\": user_type,\n        \"user_id\": user_id,\n        \"ip_address\": get_client_ip(),\n        \"user_agent\": request.headers.get('User-Agent', ''),\n        \"details\": details\n    }\n    \n    # Log faylga yozish\n    try:\n        log_file = 'logs/user_actions.log'\n        os.makedirs('logs', exist_ok=True)\n        \n        with open(log_file, 'a', encoding='utf-8') as f:\n            f.write(json.dumps(log_data, ensure_ascii=False) + '\\n')\n    except Exception as e:\n        logging.error(f\"User action log xatoligi: {str(e)}\")\n\ndef calculate_business_hours_eta(base_minutes, timezone_str=\"Asia/Tashkent\"):\n    \"\"\"Ish vaqti hisobga olingan ETA hisoblash\"\"\"\n    import pytz\n    \n    try:\n        tz = pytz.timezone(timezone_str)\n        now = datetime.now(tz)\n        \n        # Ish vaqti: 09:00 - 22:00\n        work_start = now.replace(hour=9, minute=0, second=0, microsecond=0)\n        work_end = now.replace(hour=22, minute=0, second=0, microsecond=0)\n        \n        # Agar ish vaqtida bo'lsa, oddiy hisoblash\n        if work_start <= now <= work_end:\n            return now + timedelta(minutes=base_minutes)\n        \n        # Agar ish vaqtidan tashqari bo'lsa, ertangi kun 09:00 ga qo'shish\n        if now > work_end:\n            # Ertangi kun\n            next_day = now + timedelta(days=1)\n            next_work_start = next_day.replace(hour=9, minute=0, second=0, microsecond=0)\n            return next_work_start + timedelta(minutes=base_minutes)\n        else:\n            # Bugun, ish boshlanishi\n            return work_start + timedelta(minutes=base_minutes)\n    \n    except Exception as e:\n        logging.error(f\"Business hours ETA hisoblashda xatolik: {str(e)}\")\n        return datetime.now() + timedelta(minutes=base_minutes)\n\ndef get_system_info():\n    \"\"\"Tizim ma'lumotlarini olish\"\"\"\n    import platform\n    import psutil\n    \n    try:\n        return {\n            \"platform\": platform.platform(),\n            \"python_version\": platform.python_version(),\n            \"cpu_count\": psutil.cpu_count(),\n            \"memory_total\": psutil.virtual_memory().total,\n            \"memory_available\": psutil.virtual_memory().available,\n            \"disk_usage\": psutil.disk_usage('/').percent\n        }\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef backup_database(db_path, backup_dir=\"backups\"):\n    \"\"\"Ma'lumotlar bazasini zaxiralash\"\"\"\n    try:\n        os.makedirs(backup_dir, exist_ok=True)\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_filename = f\"restaurant_backup_{timestamp}.db\"\n        backup_path = os.path.join(backup_dir, backup_filename)\n        \n        import shutil\n        shutil.copy2(db_path, backup_path)\n        \n        return backup_path\n    except Exception as e:\n        logging.error(f\"Database backup xatoligi: {str(e)}\")\n        return None\n\ndef cleanup_old_backups(backup_dir=\"backups\", keep_days=30):\n    \"\"\"Eski zaxiralarni tozalash\"\"\"\n    try:\n        if not os.path.exists(backup_dir):\n            return\n        \n        cutoff_time = time.time() - (keep_days * 24 * 3600)\n        \n        for filename in os.listdir(backup_dir):\n            file_path = os.path.join(backup_dir, filename)\n            if os.path.isfile(file_path) and os.path.getmtime(file_path) < cutoff_time:\n                os.remove(file_path)\n                logging.info(f\"Eski backup o'chirildi: {filename}\")\n    \n    except Exception as e:\n        logging.error(f\"Backup tozalashda xatolik: {str(e)}\")\n","size_bytes":6099},"static/main.js":{"content":"// Universal Restaurant System - Main JavaScript\n\n// Global o'zgaruvchilar\nlet cartCount = 0;\n// Global current path tracking\nwindow.currentPath = window.currentPath || window.location.pathname;\n\n// Professional Translation System\n// Global translations object - check if already exists to prevent redeclaration\nlet translations;\nif (typeof translations === 'undefined') {\n    translations = {\n        uz: {\n            menu: '📋 Menyu',\n            favorites: '❤️ Sevimlilar',\n            contact: '📞 Aloqa',\n            about: '❓ Savollar',\n            downloads: '📱 Yuklamalar',\n            cart: '🛒 Savatcha',\n            profile_info: '👤 Profil ma\\'lumotlari',\n            profile_settings: '⚙️ Profil sozlamalari',\n            settings: '🔧 Sozlamalar',\n            logout: '🚪 Chiqish',\n            login: '🔐 Kirish',\n            register: '📝 Ro\\'yxat',\n            user: '👤 Foydalanuvchi',\n            staff: '👨‍💼 Xodim',\n            courier: '🚚 Kuryer',\n            admin: '🔧 Admin',\n            dashboard: '🏠 Dashboard',\n            analytics: '📊 Analytics',\n            reports: '📈 Hisobotlar',\n            system: '⚙️ Tizim',\n            logs: '📝 Loglar'\n        },\n        ru: {\n            menu: '📋 Меню',\n            favorites: '❤️ Избранное',\n            contact: '📞 Контакты',\n            about: '❓ Вопросы',\n            downloads: '📱 Загрузки',\n            cart: '🛒 Корзина',\n            profile_info: '👤 Данные профиля',\n            profile_settings: '⚙️ Настройки профиля',\n            settings: '🔧 Настройки',\n            logout: '🚪 Выход',\n            login: '🔐 Вход',\n            register: '📝 Регистрация',\n            user: '👤 Пользователь',\n            staff: '👨‍💼 Сотрудник',\n            courier: '🚚 Курьер',\n            admin: '🔧 Админ',\n            dashboard: '🏠 Панель',\n            analytics: '📊 Аналитика',\n            reports: '📈 Отчеты',\n            system: '⚙️ Система',\n            logs: '📝 Логи'\n        },\n        en: {\n            menu: '📋 Menu',\n            favorites: '❤️ Favorites',\n            contact: '📞 Contact',\n            about: '❓ About',\n            downloads: '📱 Downloads',\n            cart: '🛒 Cart',\n            profile_info: '👤 Profile Info',\n            profile_settings: '⚙️ Profile Settings',\n            settings: '🔧 Settings',\n            logout: '🚪 Logout',\n            login: '🔐 Login',\n            register: '📝 Register',\n            user: '👤 User',\n            staff: '👨‍💼 Staff',\n            courier: '🚚 Courier',\n            admin: '🔧 Admin',\n            dashboard: '🏠 Dashboard',\n            analytics: '📊 Analytics',\n            reports: '📈 Reports',\n            system: '⚙️ System',\n            logs: '📝 Logs'\n        }\n    };\n}\n\n// Universal Theme Management\nclass UniversalThemeManager {\n    constructor() {\n        this.initializeTheme();\n        this.setupEventListeners();\n    }\n\n    initializeTheme() {\n        const darkMode = localStorage.getItem('darkMode') === 'true';\n        const fontSize = localStorage.getItem('fontSize') || 'medium';\n        const language = localStorage.getItem('language') || 'uz';\n\n        console.log('Universal Theme - Initializing:', { darkMode, fontSize, language });\n\n        this.applyTheme(darkMode);\n        this.applyFontSize(fontSize);\n        this.applyLanguage(language);\n    }\n\n    applyTheme(isDark) {\n        const body = document.body;\n        const navbar = document.querySelector('.navbar');\n\n        // Clear theme classes\n        body.classList.remove('dark-theme', 'light-theme');\n\n        if (isDark) {\n            body.classList.add('dark-theme');\n            body.setAttribute('data-theme', 'dark');\n\n            if (navbar) {\n                navbar.classList.remove('navbar-light', 'bg-light');\n                navbar.classList.add('navbar-dark', 'bg-dark');\n            }\n\n            console.log('Universal Theme - Dark mode applied');\n        } else {\n            body.classList.add('light-theme');\n            body.setAttribute('data-theme', 'light');\n\n            if (navbar) {\n                navbar.classList.remove('navbar-dark', 'bg-dark');\n                navbar.classList.add('navbar-light', 'bg-light');\n            }\n\n            console.log('Universal Theme - Light mode applied');\n        }\n\n        // Save to localStorage\n        localStorage.setItem('darkMode', isDark);\n\n        // Save to server\n        this.saveToServer('theme', isDark ? 'dark' : 'light');\n    }\n\n    applyFontSize(size) {\n        const body = document.body;\n\n        // Clear font classes\n        body.classList.remove('font-small', 'font-medium', 'font-large', 'font-xlarge');\n\n        // Apply font size\n        body.classList.add('font-' + size);\n        body.setAttribute('data-font-size', size);\n\n        console.log('Universal Theme - Font size applied:', size);\n\n        // Save to localStorage\n        localStorage.setItem('fontSize', size);\n\n        // Save to server\n        this.saveToServer('font_size', size);\n    }\n\n    applyLanguage(language) {\n        const body = document.body;\n\n        // Clear language classes\n        body.classList.remove('lang-uz', 'lang-ru', 'lang-en');\n\n        // Apply language\n        body.classList.add('lang-' + language);\n        body.setAttribute('data-language', language);\n\n        console.log('Universal Theme - Language applied:', language);\n\n        // Save to localStorage\n        localStorage.setItem('language', language);\n\n        // Translate page\n        this.translatePage(language);\n\n        // Save to server\n        this.saveToServer('language', language);\n    }\n\n    translatePage(language) {\n        const trans = window.translations[language] || window.translations.uz;\n\n        // Navbar links\n        this.updateElementText('a[href*=\"menu\"]', trans.menu);\n        this.updateElementText('a[href*=\"favorites\"]', trans.favorites);\n        this.updateElementText('a[href*=\"contact\"]', trans.contact);\n        this.updateElementText('a[href*=\"about\"]', trans.about);\n        this.updateElementText('a[href*=\"downloads\"]', trans.downloads);\n\n        // Cart link\n        const cartLink = document.querySelector('a[href*=\"cart\"]');\n        if (cartLink && cartLink.innerHTML.includes('🛒')) {\n            const cartBadge = cartLink.querySelector('.cart-badge') || cartLink.querySelector('#cart-count');\n            const badgeHtml = cartBadge ? cartBadge.outerHTML : '';\n            cartLink.innerHTML = trans.cart + ' ' + badgeHtml;\n        }\n\n        // Login/Register links\n        this.updateElementText('a[href*=\"login\"]:not([href*=\"staff\"]):not([href*=\"courier\"])', trans.login);\n        this.updateElementText('a[href*=\"register\"]:not([href*=\"staff\"]):not([href*=\"courier\"])', trans.register);\n\n        // Dropdown items\n        this.translateDropdownItems(trans);\n\n        console.log('Universal Theme - Translation completed:', language);\n    }\n\n    updateElementText(selector, text) {\n        const element = document.querySelector(selector);\n        if (element && !element.innerHTML.includes('<')) {\n            element.innerHTML = text;\n        }\n    }\n\n    translateDropdownItems(trans) {\n        const dropdownItems = document.querySelectorAll('.dropdown-item');\n        dropdownItems.forEach(item => {\n            const text = item.textContent.trim();\n\n            if (text.includes('Foydalanuvchi')) {\n                item.innerHTML = trans.user;\n            } else if (text.includes('Xodim')) {\n                item.innerHTML = trans.staff;\n            } else if (text.includes('Kuryer')) {\n                item.innerHTML = trans.courier;\n            } else if (text.includes('Admin')) {\n                item.innerHTML = trans.admin;\n            } else if (text.includes('Profil ma\\'lumotlari')) {\n                item.innerHTML = trans.profile_info;\n            } else if (text.includes('Profil sozlamalari')) {\n                item.innerHTML = trans.profile_settings;\n            } else if (text.includes('Sozlamalar')) {\n                item.innerHTML = trans.settings;\n            } else if (text.includes('Dashboard')) {\n                item.innerHTML = trans.dashboard;\n            } else if (text.includes('Chiqish')) {\n                item.innerHTML = trans.logout;\n            } else if (text.includes('Analytics')) {\n                item.innerHTML = trans.analytics;\n            } else if (text.includes('Hisobotlar')) {\n                item.innerHTML = trans.reports;\n            } else if (text.includes('Tizim')) {\n                item.innerHTML = trans.system;\n            } else if (text.includes('Loglar')) {\n                item.innerHTML = trans.logs;\n            }\n        });\n    }\n\n    saveToServer(setting, value) {\n        const endpoint = setting === 'language' ? '/api/set-language' : '/api/set-settings';\n        const payload = setting === 'language' ? { language: value } : { [setting]: value };\n\n        fetch(endpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload)\n        }).then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                console.log('Universal Theme - Setting saved:', setting, value);\n            }\n        }).catch(error => {\n            console.log('Universal Theme - Save error:', error);\n        });\n    }\n\n    setupEventListeners() {\n        // Storage event listener\n        window.addEventListener('storage', (e) => {\n            if (e.key === 'darkMode') {\n                this.applyTheme(e.newValue === 'true');\n            } else if (e.key === 'fontSize') {\n                this.applyFontSize(e.newValue);\n            } else if (e.key === 'language') {\n                this.applyLanguage(e.newValue);\n            }\n        });\n\n        // Theme toggle listeners\n        document.addEventListener('change', (e) => {\n            if (e.target.name === 'theme_mode') {\n                this.applyTheme(e.target.value === 'dark');\n            } else if (e.target.name === 'font_size') {\n                this.applyFontSize(e.target.value);\n            }\n        });\n    }\n}\n\n// Global functions\nwindow.changeTheme = function(isDark) {\n    if (window.universalTheme) {\n        window.universalTheme.applyTheme(isDark);\n    }\n};\n\nwindow.changeFontSize = function(size) {\n    if (window.universalTheme) {\n        window.universalTheme.applyFontSize(size);\n    }\n};\n\nwindow.changeLanguage = function(language) {\n    if (window.universalTheme) {\n        window.universalTheme.applyLanguage(language);\n        // Show notification\n        showNotification('Til muvaffaqiyatli o\\'zgartirildi');\n    }\n};\n\n// Cart Management\nclass CartManager {\n    constructor() {\n        this.updateCartCount();\n        this.setupAutoUpdate();\n    }\n\n    updateCartCount() {\n        fetch('/api/cart-count')\n            .then(response => response.json())\n            .then(data => {\n                const cartCountElements = document.querySelectorAll('#cart-count, .cart-badge');\n                cartCountElements.forEach(element => {\n                    if (data.count > 0) {\n                        element.textContent = data.count;\n                        element.style.display = 'inline-block';\n                        if (element.classList.contains('cart-badge-floating')) {\n                            element.classList.add('show');\n                        }\n                    } else {\n                        element.style.display = 'none';\n                        if (element.classList.contains('cart-badge-floating')) {\n                            element.classList.remove('show');\n                        }\n                    }\n                });\n                cartCount = data.count;\n            })\n            .catch(error => console.log('Cart count error:', error));\n    }\n\n    setupAutoUpdate() {\n        // Update every 10 seconds\n        setInterval(() => {\n            this.updateCartCount();\n        }, 10000);\n    }\n\n    addToCart(itemId, quantity = 1) {\n        fetch('/api/add-to-cart', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                item_id: itemId,\n                quantity: quantity\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                this.updateCartCount();\n                showNotification('Mahsulot savatga qo\\'shildi', 'success');\n            } else {\n                showNotification(data.message || 'Xatolik yuz berdi', 'error');\n            }\n        })\n        .catch(error => {\n            console.log('Add to cart error:', error);\n            showNotification('Savatga qo\\'shishda xatolik', 'error');\n        });\n    }\n}\n\n// Notification System\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `toast-notification toast-${type}`;\n\n    notification.innerHTML = `\n        <div class=\"toast-content\">\n            <span class=\"toast-icon\">${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'}</span>\n            <span class=\"toast-message\">${message}</span>\n        </div>\n    `;\n\n    document.body.appendChild(notification);\n\n    // Show notification\n    setTimeout(() => {\n        notification.classList.add('show');\n    }, 100);\n\n    // Hide and remove notification\n    setTimeout(() => {\n        notification.classList.remove('show');\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 300);\n    }, 3000);\n}\n\n// Service Worker Registration\nfunction registerServiceWorker() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('/static/sw.js')\n            .then(registration => {\n                console.log('SW registered: ', registration);\n            })\n            .catch(error => {\n                console.log('SW registration failed: ', error);\n            });\n    }\n}\n\n// Universal Initialization\nlet universalTheme;\nlet cartManager;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    try {\n        // Initialize theme manager\n        universalTheme = new UniversalThemeManager();\n        window.universalTheme = universalTheme;\n\n        // Initialize cart manager\n        cartManager = new CartManager();\n        window.cartManager = cartManager;\n\n        // Register service worker\n        registerServiceWorker();\n\n        // Setup menu item clicks\n        setupMenuItemClicks();\n\n        // Setup form submissions\n        setupFormSubmissions();\n\n        console.log('Universal System - Initialization complete');\n\n    } catch (error) {\n        console.error('Initialization error:', error);\n    }\n});\n\n// Menu item click handlers\nfunction setupMenuItemClicks() {\n    document.addEventListener('click', function(e) {\n        // Add to cart buttons\n        if (e.target.classList.contains('add-to-cart-btn')) {\n            e.preventDefault();\n            const itemId = e.target.getAttribute('data-item-id');\n            const quantity = e.target.getAttribute('data-quantity') || 1;\n            if (itemId && window.cartManager) {\n                window.cartManager.addToCart(itemId, quantity);\n            }\n        }\n\n        // Theme toggle buttons\n        if (e.target.classList.contains('theme-toggle')) {\n            e.preventDefault();\n            const isDark = !document.body.classList.contains('dark-theme');\n            if (window.universalTheme) {\n                window.universalTheme.applyTheme(isDark);\n            }\n        }\n    });\n}\n\n// Form submission handlers\nfunction setupFormSubmissions() {\n    // Settings form\n    const settingsForm = document.getElementById('settings-form');\n    if (settingsForm) {\n        settingsForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n\n            const formData = new FormData(settingsForm);\n            const settings = Object.fromEntries(formData);\n\n            // Apply settings immediately\n            if (settings.theme_mode && window.universalTheme) {\n                window.universalTheme.applyTheme(settings.theme_mode === 'dark');\n            }\n            if (settings.font_size && window.universalTheme) {\n                window.universalTheme.applyFontSize(settings.font_size);\n            }\n            if (settings.language && window.universalTheme) {\n                window.universalTheme.applyLanguage(settings.language);\n            }\n\n            showNotification('Sozlamalar saqlandi', 'success');\n        });\n    }\n}\n\n// Utility Functions\nfunction formatPrice(price) {\n    return new Intl.NumberFormat('uz-UZ', {\n        style: 'currency',\n        currency: 'UZS',\n        minimumFractionDigits: 0\n    }).format(price);\n}\n\nfunction formatDate(date) {\n    return new Intl.DateTimeFormat('uz-UZ', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    }).format(new Date(date));\n}\n\n// Global error handler\nwindow.addEventListener('error', function(e) {\n    console.error('JavaScript xatosi:', e.error);\n    if (typeof showNotification === 'function') {\n        showNotification('Sahifada xatolik yuz berdi', 'error');\n    }\n});\n\n// Page visibility handler\ndocument.addEventListener('visibilitychange', function() {\n    if (!document.hidden && window.cartManager) {\n        window.cartManager.updateCartCount();\n    }\n});\n\n// Resize handler\nwindow.addEventListener('resize', function() {\n    // Handle responsive changes if needed\n    const isMobile = window.innerWidth < 768;\n    document.body.classList.toggle('mobile-view', isMobile);\n});\n\n// Export for global use\nwindow.showNotification = showNotification;","size_bytes":18170},"static/style.css":{"content":"\n/* Professional CSS Framework - Restaurant Pro Universal */\n\n:root {\n    /* Light Theme Colors */\n    --primary-color: #2c5530;\n    --primary-hover: #1e3a21;\n    --secondary-color: #f8f9fa;\n    --accent-color: #28a745;\n    --accent-hover: #218838;\n    --success-color: #28a745;\n    --error-color: #dc3545;\n    --warning-color: #ffc107;\n    --info-color: #17a2b8;\n    \n    /* Text Colors */\n    --text-primary: #2c3e50;\n    --text-secondary: #6c757d;\n    --text-muted: #868e96;\n    --text-light: #ffffff;\n    \n    /* Background Colors */\n    --bg-primary: #ffffff;\n    --bg-secondary: #f8f9fa;\n    --bg-tertiary: #e9ecef;\n    --bg-hover: #f5f5f5;\n    \n    /* Border & Shadow */\n    --border-color: #dee2e6;\n    --border-radius: 12px;\n    --shadow-sm: 0 2px 4px rgba(0,0,0,0.1);\n    --shadow-md: 0 4px 12px rgba(0,0,0,0.15);\n    --shadow-lg: 0 8px 25px rgba(0,0,0,0.2);\n    \n    /* Spacing */\n    --spacing-xs: 0.25rem;\n    --spacing-sm: 0.5rem;\n    --spacing-md: 1rem;\n    --spacing-lg: 1.5rem;\n    --spacing-xl: 2rem;\n    \n    /* Typography */\n    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    --font-size-sm: 0.875rem;\n    --font-size-base: 1rem;\n    --font-size-lg: 1.125rem;\n    --font-size-xl: 1.25rem;\n    --font-size-2xl: 1.5rem;\n    --font-size-3xl: 1.875rem;\n    \n    /* Animation */\n    --transition-fast: 0.15s ease-out;\n    --transition-normal: 0.3s ease-out;\n    --transition-slow: 0.5s ease-out;\n}\n\n/* Universal Dark Theme */\nbody.dark-theme,\n[data-theme=\"dark\"],\n.dark-theme {\n    --primary-color: #4ade80;\n    --primary-hover: #22c55e;\n    --secondary-color: #1f2937;\n    --accent-color: #10b981;\n    --accent-hover: #059669;\n    --success-color: #10b981;\n    --error-color: #ef4444;\n    --warning-color: #f59e0b;\n    --info-color: #06b6d4;\n    \n    --text-primary: #f9fafb;\n    --text-secondary: #d1d5db;\n    --text-muted: #9ca3af;\n    --text-light: #ffffff;\n    \n    --bg-primary: #111827;\n    --bg-secondary: #1f2937;\n    --bg-tertiary: #374151;\n    --bg-hover: #2d3748;\n    \n    --border-color: #374151;\n    --shadow-sm: 0 2px 4px rgba(0,0,0,0.3);\n    --shadow-md: 0 4px 12px rgba(0,0,0,0.4);\n    --shadow-lg: 0 8px 25px rgba(0,0,0,0.5);\n}\n\n/* Global Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 16px;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: var(--font-family);\n    font-size: var(--font-size-base);\n    line-height: 1.6;\n    color: var(--text-primary);\n    background-color: var(--bg-primary);\n    transition: all var(--transition-normal);\n}\n\n/* Universal Font Size Classes */\n.font-small, body.font-small { font-size: 14px !important; }\n.font-medium, body.font-medium { font-size: 16px !important; }\n.font-large, body.font-large { font-size: 18px !important; }\n.font-xlarge, body.font-xlarge { font-size: 20px !important; }\n\n/* Universal Dark Theme Classes */\nbody.dark-theme,\n.dark-theme {\n    background: linear-gradient(135deg, #1e293b 0%, #334155 20%, #475569 100%) !important;\n    color: #f8fafc !important;\n}\n\nbody.dark-theme .navbar,\nbody.dark-theme .navbar-nav,\nbody.dark-theme .navbar-dark,\n.dark-theme .navbar {\n    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95) 0%, rgba(51, 65, 85, 0.95) 100%) !important;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3) !important;\n}\n\nbody.dark-theme .nav-link,\nbody.dark-theme .navbar-brand,\nbody.dark-theme .navbar-text,\n.dark-theme .nav-link,\n.dark-theme .navbar-brand,\n.dark-theme .navbar-text {\n    color: #f8fafc !important;\n}\n\nbody.dark-theme .dropdown-menu,\n.dark-theme .dropdown-menu {\n    background: rgba(45, 55, 72, 0.98) !important;\n    border: 1px solid rgba(203, 213, 225, 0.2) !important;\n}\n\nbody.dark-theme .dropdown-item,\n.dark-theme .dropdown-item {\n    color: #f8fafc !important;\n}\n\nbody.dark-theme .dropdown-item:hover,\n.dark-theme .dropdown-item:hover {\n    background: rgba(71, 85, 105, 0.8) !important;\n    color: #ffffff !important;\n}\n\nbody.dark-theme .card,\nbody.dark-theme .modal-content,\nbody.dark-theme .hero-section,\nbody.dark-theme .service-card,\n.dark-theme .card,\n.dark-theme .modal-content,\n.dark-theme .hero-section,\n.dark-theme .service-card {\n    background: linear-gradient(145deg, rgba(51, 65, 85, 0.9) 0%, rgba(71, 85, 105, 0.8) 100%) !important;\n    color: #f8fafc !important;\n    border: 1px solid rgba(203, 213, 225, 0.2) !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3) !important;\n}\n\nbody.dark-theme .btn-primary,\n.dark-theme .btn-primary {\n    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%) !important;\n    border: none !important;\n    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3) !important;\n}\n\nbody.dark-theme .form-control,\nbody.dark-theme .form-select,\n.dark-theme .form-control,\n.dark-theme .form-select {\n    background: rgba(51, 65, 85, 0.9) !important;\n    border: 1px solid rgba(203, 213, 225, 0.2) !important;\n    color: #f8fafc !important;\n}\n\nbody.dark-theme .table,\n.dark-theme .table {\n    background: var(--bg-secondary) !important;\n    color: var(--text-primary) !important;\n}\n\nbody.dark-theme .table th,\n.dark-theme .table th {\n    background: var(--primary-color) !important;\n    color: var(--text-light) !important;\n}\n\nbody.dark-theme .table td,\n.dark-theme .table td {\n    border-color: var(--border-color) !important;\n    color: var(--text-primary) !important;\n}\n\n/* Typography */\nh1, h2, h3, h4, h5, h6 {\n    font-weight: 600;\n    line-height: 1.2;\n    margin-bottom: var(--spacing-md);\n    color: var(--text-primary);\n}\n\nh1 { font-size: var(--font-size-3xl); }\nh2 { font-size: var(--font-size-2xl); }\nh3 { font-size: var(--font-size-xl); }\nh4 { font-size: var(--font-size-lg); }\n\np {\n    margin-bottom: var(--spacing-md);\n    color: var(--text-secondary);\n}\n\na {\n    color: var(--primary-color);\n    text-decoration: none;\n    transition: color var(--transition-fast);\n}\n\na:hover {\n    color: var(--primary-hover);\n    text-decoration: underline;\n}\n\n/* Container & Layout */\n.container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 var(--spacing-md);\n}\n\n.row {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0 calc(-1 * var(--spacing-sm));\n}\n\n.col-md-6 {\n    flex: 0 0 50%;\n    max-width: 50%;\n    padding: 0 var(--spacing-sm);\n}\n\n.col-md-4 {\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n    padding: 0 var(--spacing-sm);\n}\n\n.col-md-3 {\n    flex: 0 0 25%;\n    max-width: 25%;\n    padding: 0 var(--spacing-sm);\n}\n\n/* Cards */\n.card {\n    background: var(--bg-primary);\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-normal);\n    overflow: hidden;\n}\n\n.card:hover {\n    box-shadow: var(--shadow-md);\n    transform: translateY(-2px);\n}\n\n.card-header {\n    padding: var(--spacing-lg);\n    background: var(--bg-secondary);\n    border-bottom: 1px solid var(--border-color);\n}\n\n.card-body {\n    padding: var(--spacing-lg);\n}\n\n.card-footer {\n    padding: var(--spacing-md) var(--spacing-lg);\n    background: var(--bg-secondary);\n    border-top: 1px solid var(--border-color);\n}\n\n/* Buttons */\n.btn {\n    display: inline-block;\n    padding: var(--spacing-sm) var(--spacing-lg);\n    font-size: var(--font-size-base);\n    font-weight: 500;\n    text-align: center;\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    text-decoration: none;\n    transition: all var(--transition-fast);\n    white-space: nowrap;\n    user-select: none;\n}\n\n.btn-primary {\n    background-color: var(--primary-color);\n    color: var(--text-light);\n}\n\n.btn-primary:hover {\n    background-color: var(--primary-hover);\n    transform: translateY(-1px);\n    box-shadow: var(--shadow-sm);\n}\n\n.btn-success {\n    background-color: var(--success-color);\n    color: var(--text-light);\n}\n\n.btn-success:hover {\n    background-color: #218838;\n    transform: translateY(-1px);\n}\n\n.btn-danger {\n    background-color: var(--error-color);\n    color: var(--text-light);\n}\n\n.btn-danger:hover {\n    background-color: #c82333;\n    transform: translateY(-1px);\n}\n\n.btn-warning {\n    background-color: var(--warning-color);\n    color: var(--text-primary);\n}\n\n.btn-info {\n    background-color: var(--info-color);\n    color: var(--text-light);\n}\n\n.btn-sm {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    font-size: var(--font-size-sm);\n}\n\n.btn-lg {\n    padding: var(--spacing-md) var(--spacing-xl);\n    font-size: var(--font-size-lg);\n}\n\n/* Forms */\n.form-group {\n    margin-bottom: var(--spacing-lg);\n}\n\n.form-label {\n    display: block;\n    margin-bottom: var(--spacing-xs);\n    font-weight: 500;\n    color: var(--text-primary);\n}\n\n.form-control {\n    width: 100%;\n    padding: var(--spacing-sm) var(--spacing-md);\n    font-size: var(--font-size-base);\n    border: 2px solid var(--border-color);\n    border-radius: var(--border-radius);\n    background-color: var(--bg-primary);\n    color: var(--text-primary);\n    transition: all var(--transition-fast);\n}\n\n.form-control:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.1);\n}\n\n.form-control::placeholder {\n    color: var(--text-muted);\n}\n\n/* Tables */\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: var(--spacing-lg);\n    background: var(--bg-primary);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n    box-shadow: var(--shadow-sm);\n}\n\n.table th {\n    background: var(--primary-color);\n    color: var(--text-light);\n    padding: var(--spacing-md);\n    text-align: left;\n    font-weight: 600;\n    border-bottom: 2px solid var(--primary-hover);\n}\n\n.table td {\n    padding: var(--spacing-md);\n    border-bottom: 1px solid var(--border-color);\n    color: var(--text-primary);\n}\n\n.table tr {\n    transition: all var(--transition-fast);\n}\n\n.table tbody tr:hover {\n    background-color: var(--bg-hover);\n}\n\n/* Navigation */\n.navbar {\n    background: var(--bg-primary) !important;\n    border-bottom: 1px solid var(--border-color);\n    padding: var(--spacing-md) 0;\n    position: sticky;\n    top: 0;\n    z-index: 1000;\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-normal);\n}\n\n.navbar .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.navbar-brand {\n    font-size: var(--font-size-xl);\n    font-weight: 700;\n    color: var(--primary-color) !important;\n    text-decoration: none;\n}\n\n.navbar-nav {\n    display: flex;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    gap: var(--spacing-lg);\n}\n\n.nav-link {\n    padding: var(--spacing-sm) var(--spacing-md);\n    color: var(--text-primary) !important;\n    border-radius: calc(var(--border-radius) / 2);\n    transition: all var(--transition-fast);\n    text-decoration: none;\n}\n\n.nav-link:hover {\n    background-color: var(--bg-hover);\n    color: var(--primary-color) !important;\n}\n\n/* Menu Grid */\n.menu-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: var(--spacing-lg);\n    padding: var(--spacing-lg) 0;\n}\n\n.menu-item {\n    background: var(--bg-primary);\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n    transition: all var(--transition-normal);\n    cursor: pointer;\n}\n\n.menu-item:hover {\n    transform: translateY(-4px);\n    box-shadow: var(--shadow-lg);\n}\n\n.menu-item-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    background-color: var(--bg-tertiary);\n}\n\n.menu-item-content {\n    padding: var(--spacing-lg);\n}\n\n.menu-item-name {\n    font-size: var(--font-size-lg);\n    font-weight: 600;\n    color: var(--text-primary);\n    margin-bottom: var(--spacing-sm);\n}\n\n.menu-item-description {\n    color: var(--text-secondary);\n    font-size: var(--font-size-sm);\n    margin-bottom: var(--spacing-md);\n}\n\n.menu-item-price {\n    font-size: var(--font-size-xl);\n    font-weight: 700;\n    color: var(--primary-color);\n    margin-bottom: var(--spacing-md);\n}\n\n.discount-badge {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: var(--error-color);\n    color: white;\n    padding: 4px 8px;\n    border-radius: 20px;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n/* Floating Cart Icon */\n.floating-cart-icon {\n    position: fixed;\n    bottom: 25px;\n    left: 25px;\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n    width: 70px;\n    height: 70px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    box-shadow: var(--shadow-lg);\n    z-index: 1050;\n    transition: all var(--transition-normal);\n    border: 4px solid var(--bg-primary);\n    text-decoration: none;\n}\n\n.floating-cart-icon:hover {\n    transform: scale(1.1) translateY(-2px);\n    box-shadow: 0 12px 35px rgba(44, 85, 48, 0.4);\n    text-decoration: none;\n}\n\n.cart-icon {\n    font-size: 28px;\n    color: var(--text-light);\n    animation: floatCart 3s ease-in-out infinite;\n}\n\n@keyframes floatCart {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-3px); }\n}\n\n.cart-badge-floating {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    background: linear-gradient(135deg, var(--error-color), #dc3545);\n    color: var(--text-light);\n    border-radius: 50%;\n    width: 24px;\n    height: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 12px;\n    font-weight: bold;\n    transform: scale(0);\n    transition: transform var(--transition-normal);\n    border: 2px solid var(--bg-primary);\n}\n\n.cart-badge-floating.show {\n    transform: scale(1);\n    animation: pulseBadge 2s ease-in-out infinite;\n}\n\n@keyframes pulseBadge {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n}\n\n/* Toast Notifications */\n.toast-notification {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    padding: var(--spacing-md) var(--spacing-lg);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    z-index: 9999;\n    transform: translateX(400px);\n    transition: all var(--transition-normal);\n    max-width: 350px;\n}\n\n.toast-notification.show {\n    transform: translateX(0);\n}\n\n.toast-success {\n    background: var(--success-color);\n    color: white;\n}\n\n.toast-error {\n    background: var(--error-color);\n    color: white;\n}\n\n.toast-info {\n    background: var(--info-color);\n    color: white;\n}\n\n.toast-content {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n}\n\n.toast-icon {\n    font-size: var(--font-size-lg);\n}\n\n.toast-message {\n    flex: 1;\n    font-weight: 500;\n}\n\n/* Alert Messages */\n.alert {\n    padding: var(--spacing-md) var(--spacing-lg);\n    margin-bottom: var(--spacing-lg);\n    border: 1px solid transparent;\n    border-radius: var(--border-radius);\n    font-weight: 500;\n}\n\n.alert-success {\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    color: #155724;\n}\n\n.alert-danger, .alert-error {\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    color: #721c24;\n}\n\n.alert-warning {\n    background-color: #fff3cd;\n    border-color: #ffeaa7;\n    color: #856404;\n}\n\n.alert-info {\n    background-color: #d1ecf1;\n    border-color: #bee5eb;\n    color: #0c5460;\n}\n\n/* Dark theme alerts */\n.dark-theme .alert-success,\nbody.dark-theme .alert-success {\n    background-color: rgba(40, 167, 69, 0.2);\n    border-color: rgba(40, 167, 69, 0.3);\n    color: #90ee90;\n}\n\n.dark-theme .alert-danger,\n.dark-theme .alert-error,\nbody.dark-theme .alert-danger,\nbody.dark-theme .alert-error {\n    background-color: rgba(220, 53, 69, 0.2);\n    border-color: rgba(220, 53, 69, 0.3);\n    color: #ffb3ba;\n}\n\n.dark-theme .alert-warning,\nbody.dark-theme .alert-warning {\n    background-color: rgba(255, 193, 7, 0.2);\n    border-color: rgba(255, 193, 7, 0.3);\n    color: #ffeb3b;\n}\n\n.dark-theme .alert-info,\nbody.dark-theme .alert-info {\n    background-color: rgba(23, 162, 184, 0.2);\n    border-color: rgba(23, 162, 184, 0.3);\n    color: #87ceeb;\n}\n\n/* Modal */\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.75);\n    display: none;\n    z-index: 2000;\n    backdrop-filter: blur(5px);\n}\n\n.modal-content {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: var(--bg-primary);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-xl);\n    max-width: 90vw;\n    max-height: 90vh;\n    overflow-y: auto;\n    box-shadow: var(--shadow-lg);\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: var(--spacing-lg);\n    padding-bottom: var(--spacing-md);\n    border-bottom: 1px solid var(--border-color);\n}\n\n.modal-close {\n    background: none;\n    border: none;\n    font-size: var(--font-size-2xl);\n    cursor: pointer;\n    color: var(--text-muted);\n    padding: 0;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal-close:hover {\n    color: var(--text-primary);\n}\n\n/* Status Badges */\n.badge {\n    display: inline-block;\n    padding: var(--spacing-xs) var(--spacing-sm);\n    font-size: var(--font-size-sm);\n    font-weight: 600;\n    border-radius: 20px;\n    text-transform: uppercase;\n}\n\n.badge-waiting {\n    background-color: #ffc107;\n    color: #212529;\n}\n\n.badge-ready {\n    background-color: #28a745;\n    color: white;\n}\n\n.badge-served {\n    background-color: #6c757d;\n    color: white;\n}\n\n.badge-cancelled {\n    background-color: #dc3545;\n    color: white;\n}\n\n.badge-on-way {\n    background-color: #17a2b8;\n    color: white;\n}\n\n.badge-delivered {\n    background-color: #007bff;\n    color: white;\n}\n\n/* Loading States */\n.loading {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid var(--border-color);\n    border-radius: 50%;\n    border-top-color: var(--primary-color);\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n.skeleton {\n    background: linear-gradient(90deg, var(--bg-secondary) 25%, var(--bg-tertiary) 50%, var(--bg-secondary) 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n}\n\n/* Utility Classes */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mt-1 { margin-top: var(--spacing-xs); }\n.mt-2 { margin-top: var(--spacing-sm); }\n.mt-3 { margin-top: var(--spacing-md); }\n.mt-4 { margin-top: var(--spacing-lg); }\n.mt-5 { margin-top: var(--spacing-xl); }\n\n.mb-1 { margin-bottom: var(--spacing-xs); }\n.mb-2 { margin-bottom: var(--spacing-sm); }\n.mb-3 { margin-bottom: var(--spacing-md); }\n.mb-4 { margin-bottom: var(--spacing-lg); }\n.mb-5 { margin-bottom: var(--spacing-xl); }\n\n.p-1 { padding: var(--spacing-xs); }\n.p-2 { padding: var(--spacing-sm); }\n.p-3 { padding: var(--spacing-md); }\n.p-4 { padding: var(--spacing-lg); }\n.p-5 { padding: var(--spacing-xl); }\n\n.d-none { display: none; }\n.d-block { display: block; }\n.d-flex { display: flex; }\n.d-grid { display: grid; }\n\n.justify-content-center { justify-content: center; }\n.justify-content-between { justify-content: space-between; }\n.align-items-center { align-items: center; }\n\n.w-100 { width: 100%; }\n.h-100 { height: 100%; }\n\n/* Section Cards */\n.section-card {\n    background: var(--bg-primary);\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-xl);\n    margin-bottom: var(--spacing-lg);\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-normal);\n}\n\n.section-card:hover {\n    box-shadow: var(--shadow-md);\n}\n\n/* Super Admin Dashboard Styles */\n.dashboard-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 25px;\n    margin-bottom: 30px;\n}\n\n.dashboard-card {\n    background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);\n    border: 1px solid var(--border-color);\n    border-radius: 15px;\n    padding: 30px;\n    text-align: center;\n    transition: all var(--transition-normal);\n    box-shadow: var(--shadow-md);\n    cursor: pointer;\n    text-decoration: none;\n    color: var(--text-primary);\n}\n\n.dashboard-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-lg);\n    text-decoration: none;\n    color: var(--text-primary);\n}\n\n.dashboard-icon {\n    font-size: 4rem;\n    margin-bottom: 20px;\n    opacity: 0.8;\n}\n\n.dashboard-title {\n    font-size: 1.5rem;\n    font-weight: 700;\n    margin-bottom: 10px;\n    color: var(--text-primary);\n}\n\n.dashboard-description {\n    color: var(--text-secondary);\n    font-size: 1rem;\n    line-height: 1.5;\n}\n\n/* Analytics specific styles */\n.analytics-container {\n    padding: 20px;\n    max-width: 1400px;\n    margin: 0 auto;\n}\n\n.kpi-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    margin-bottom: 30px;\n}\n\n.kpi-card {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n    color: white;\n    padding: 25px;\n    border-radius: 15px;\n    text-align: center;\n    box-shadow: var(--shadow-md);\n}\n\n.kpi-value {\n    font-size: 2.5rem;\n    font-weight: bold;\n    margin: 10px 0;\n}\n\n.kpi-change {\n    font-size: 1.1rem;\n    font-weight: 500;\n}\n\n.kpi-change.positive { color: #4ade80; }\n.kpi-change.negative { color: #f87171; }\n.kpi-change.neutral { color: #fbbf24; }\n\n.charts-section {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    gap: 30px;\n    margin-bottom: 30px;\n}\n\n.chart-container {\n    background: var(--bg-primary);\n    padding: 25px;\n    border-radius: 15px;\n    box-shadow: var(--shadow-sm);\n}\n\n.activity-section {\n    background: var(--bg-primary);\n    padding: 25px;\n    border-radius: 15px;\n    box-shadow: var(--shadow-sm);\n}\n\n.activity-feed {\n    max-height: 400px;\n    overflow-y: auto;\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    padding: 15px;\n}\n\n.activity-item {\n    padding: 10px;\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.activity-time {\n    color: var(--text-muted);\n    font-size: var(--font-size-sm);\n}\n\n/* System Monitor Styles */\n.system-container {\n    padding: 20px;\n    max-width: 1400px;\n    margin: 0 auto;\n}\n\n.status-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 20px;\n    margin-bottom: 30px;\n}\n\n.status-card {\n    background: var(--bg-primary);\n    border-radius: 12px;\n    padding: 25px;\n    box-shadow: var(--shadow-sm);\n    display: flex;\n    align-items: center;\n    gap: 20px;\n}\n\n.status-icon {\n    font-size: 3rem;\n    opacity: 0.8;\n}\n\n.status-content h4 {\n    color: var(--text-secondary);\n    font-size: 1rem;\n    margin-bottom: 8px;\n}\n\n.status-value {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: var(--text-primary);\n    margin-bottom: 5px;\n}\n\n.status-uptime {\n    color: var(--text-muted);\n    font-size: 0.9rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .container {\n        padding: 0 var(--spacing-sm);\n    }\n    \n    .menu-grid {\n        grid-template-columns: 1fr;\n        gap: var(--spacing-md);\n    }\n    \n    .navbar .container {\n        flex-direction: column;\n        gap: var(--spacing-md);\n    }\n    \n    .navbar-nav {\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: var(--spacing-sm);\n    }\n    \n    .floating-cart-icon {\n        width: 60px;\n        height: 60px;\n        bottom: 20px;\n        left: 20px;\n    }\n    \n    .cart-icon {\n        font-size: 24px;\n    }\n    \n    .cart-badge-floating {\n        width: 20px;\n        height: 20px;\n        font-size: 11px;\n        top: -3px;\n        right: -3px;\n    }\n    \n    .col-md-6, .col-md-4, .col-md-3 {\n        flex: 0 0 100%;\n        max-width: 100%;\n    }\n    \n    .modal-content {\n        max-width: 95vw;\n        padding: var(--spacing-lg);\n    }\n    \n    .table {\n        font-size: var(--font-size-sm);\n    }\n    \n    .table th, .table td {\n        padding: var(--spacing-sm);\n    }\n    \n    .dashboard-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .kpi-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .charts-section {\n        grid-template-columns: 1fr;\n        gap: 20px;\n    }\n    \n    .status-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n}\n\n@media (max-width: 480px) {\n    html {\n        font-size: 14px;\n    }\n    \n    .floating-cart-icon {\n        width: 55px;\n        height: 55px;\n        bottom: 15px;\n        left: 15px;\n    }\n    \n    .cart-icon {\n        font-size: 22px;\n    }\n    \n    .menu-item-content {\n        padding: var(--spacing-md);\n    }\n    \n    .dashboard-card {\n        padding: 20px;\n    }\n    \n    .dashboard-icon {\n        font-size: 3rem;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar, .floating-cart-icon, .btn {\n        display: none;\n    }\n    \n    .container {\n        max-width: none;\n        padding: 0;\n    }\n    \n    .card {\n        border: 1px solid #000;\n        box-shadow: none;\n    }\n}\n\n/* High Contrast Support */\n@media (prefers-contrast: high) {\n    :root {\n        --border-color: #000000;\n        --shadow-sm: 0 2px 4px rgba(0,0,0,0.5);\n        --shadow-md: 0 4px 12px rgba(0,0,0,0.6);\n        --shadow-lg: 0 8px 25px rgba(0,0,0,0.7);\n    }\n}\n\n/* Reduced Motion Support */\n@media (prefers-reduced-motion: reduce) {\n    * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Focus Styles for Accessibility */\n.btn:focus,\n.form-control:focus,\n.nav-link:focus {\n    outline: 3px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* Screen Reader Only */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Admin Monitor Specific Styles */\n.monitor-container {\n    padding: 30px;\n    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);\n    min-height: 100vh;\n    color: #f8fafc;\n}\n\n.monitor-header {\n    text-align: center;\n    margin-bottom: 40px;\n}\n\n.monitor-header h1 {\n    font-size: 3rem;\n    color: #60a5fa;\n    text-shadow: 0 0 20px rgba(96, 165, 250, 0.5);\n    margin-bottom: 15px;\n}\n\n.monitor-section {\n    background: rgba(51, 65, 85, 0.9);\n    border-radius: 15px;\n    padding: 30px;\n    margin-bottom: 30px;\n    border: 1px solid rgba(148, 163, 184, 0.2);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n}\n\n.monitor-section h4 {\n    color: #fbbf24;\n    font-size: 1.8rem;\n    margin-bottom: 25px;\n    text-align: center;\n    text-shadow: 0 0 10px rgba(251, 191, 36, 0.3);\n}\n\n.monitor-table {\n    width: 100%;\n    background: rgba(30, 41, 59, 0.8);\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n}\n\n.monitor-table thead {\n    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n}\n\n.monitor-table thead th {\n    color: #ffffff;\n    font-size: 1.3rem;\n    font-weight: bold;\n    text-align: center;\n    padding: 20px 15px;\n    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n}\n\n.monitor-table td {\n    padding: 20px 15px;\n    text-align: center;\n    border-bottom: 1px solid rgba(148, 163, 184, 0.1);\n    color: #e2e8f0;\n    font-size: 1.1rem;\n}\n\n.monitor-table tbody tr {\n    transition: all 0.3s ease;\n}\n\n.monitor-table tbody tr:hover {\n    background: rgba(59, 130, 246, 0.1);\n    transform: scale(1.02);\n}\n\n.datetime-widget {\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    background: rgba(0,0,0,0.8);\n    color: white;\n    padding: 25px 35px;\n    border-radius: 15px;\n    font-weight: 600;\n    z-index: 1000;\n    backdrop-filter: blur(10px);\n    border: 2px solid rgba(255,255,255,0.2);\n    text-align: center;\n}\n\n.current-date {\n    font-size: 1.4rem;\n    margin-bottom: 8px;\n    color: #ffd700;\n}\n\n.current-time {\n    font-size: 2.5rem;\n    font-weight: 700;\n    color: #00ff88;\n    margin-bottom: 8px;\n}\n\n.current-year {\n    font-size: 1.2rem;\n    color: #87ceeb;\n}\n\n.weather-widget {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: rgba(0,0,0,0.8);\n    color: white;\n    padding: 25px 35px;\n    border-radius: 15px;\n    font-weight: 600;\n    z-index: 1000;\n    backdrop-filter: blur(10px);\n    border: 2px solid rgba(255,255,255,0.2);\n    text-align: center;\n    min-width: 200px;\n    height: 192px;\n}\n\n.weather-location {\n    font-size: 1.3rem;\n    color: #87ceeb;\n    margin-bottom: 10px;\n}\n\n.temperature {\n    font-size: 2.5rem;\n    margin-bottom: 8px;\n    color: #ff6b6b;\n    font-weight: 700;\n}\n\n.weather-desc {\n    font-size: 1.3rem;\n    color: #74c0fc;\n    margin-bottom: 8px;\n}\n\n.weather-details {\n    font-size: 1rem;\n    color: #ffffff;\n    opacity: 0.8;\n}\n\n/* Settings Page Styles */\n.settings-card {\n    background: var(--bg-primary);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: var(--shadow-lg);\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.settings-section {\n    margin-bottom: 30px;\n    padding: 20px;\n    background: var(--bg-secondary);\n    border-radius: 15px;\n}\n\n.setting-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 15px 0;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.setting-item:last-child {\n    border-bottom: none;\n}\n\n.setting-label {\n    font-weight: 600;\n    color: var(--text-primary);\n}\n\n.btn-setting {\n    background: linear-gradient(135deg, var(--success-color) 0%, var(--accent-hover) 100%);\n    border: none;\n    color: white;\n    padding: 8px 20px;\n    border-radius: 10px;\n    font-weight: 600;\n}\n\n.theme-selector {\n    display: flex;\n    gap: 15px;\n}\n\n.radio-option {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    background: var(--bg-tertiary);\n    padding: 8px 15px;\n    border-radius: 8px;\n    transition: background 0.3s ease;\n}\n\n.radio-option input[type=\"radio\"] {\n    margin-right: 8px;\n    accent-color: var(--success-color);\n}\n\n.radio-option .radio-text {\n    font-weight: 500;\n    color: var(--text-secondary);\n}\n\n.radio-option:hover {\n    background: var(--bg-hover);\n}\n\n.radio-option input[type=\"radio\"]:checked + .radio-text {\n    color: var(--primary-color);\n    font-weight: 700;\n}\n\n/* Receipt Styles */\n.receipt-container {\n    max-width: 600px;\n    margin: 0 auto;\n    background: var(--bg-primary);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    overflow: hidden;\n}\n\n.receipt-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n    color: var(--text-light);\n    padding: var(--spacing-xl);\n    text-align: center;\n}\n\n.receipt-body {\n    padding: var(--spacing-xl);\n}\n\n.receipt-footer {\n    background: var(--bg-secondary);\n    padding: var(--spacing-lg);\n    text-align: center;\n    border-top: 1px solid var(--border-color);\n}\n\n/* Login Card Styles */\n.login-card {\n    background: var(--bg-primary);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: var(--shadow-lg);\n    backdrop-filter: blur(10px);\n    border: 1px solid var(--border-color);\n    max-width: 400px;\n    width: 100%;\n}\n\n.btn-login {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n    border: none;\n    color: white;\n    padding: 12px 30px;\n    border-radius: 10px;\n    font-weight: 600;\n    font-size: 16px;\n    width: 100%;\n}\n\n.btn-login:hover {\n    background: linear-gradient(135deg, var(--primary-hover) 0%, var(--primary-color) 100%);\n    color: white;\n}\n\n.login-title {\n    color: var(--primary-color);\n    font-weight: 700;\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n/* Service Card Styles */\n.service-card {\n    background: var(--bg-primary);\n    border-radius: 20px;\n    padding: 40px;\n    margin: 20px 0;\n    box-shadow: var(--shadow-lg);\n    transition: transform 0.3s ease;\n    border: 1px solid var(--border-color);\n}\n\n.service-card:hover {\n    transform: translateY(-10px);\n}\n\n.service-icon {\n    font-size: 4rem;\n    margin-bottom: 20px;\n}\n\n.btn-service {\n    background: linear-gradient(135deg, var(--success-color) 0%, var(--accent-hover) 100%);\n    border: none;\n    color: white;\n    padding: 15px 30px;\n    border-radius: 50px;\n    font-size: 18px;\n    font-weight: 600;\n    text-decoration: none;\n    display: inline-block;\n    transition: all 0.3s ease;\n}\n\n.btn-service:hover {\n    background: linear-gradient(135deg, var(--accent-hover) 0%, var(--success-color) 100%);\n    color: white;\n    transform: translateY(-2px);\n}\n\n/* Hero Section */\n.hero-section {\n    text-align: center;\n    color: var(--text-light);\n    padding: 100px 0;\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);\n}\n\n/* Language Classes */\n.lang-uz, .lang-ru, .lang-en {\n    direction: ltr;\n}\n\n/* Footer */\n.footer {\n    background: var(--bg-secondary);\n    color: var(--text-secondary);\n    text-align: center;\n    padding: var(--spacing-lg) 0;\n    border-top: 1px solid var(--border-color);\n    margin-top: auto;\n}\n","size_bytes":33226},"static/sw.js":{"content":"\n// Service Worker for PWA functionality\nconst CACHE_NAME = 'restaurant-v2.0.0';\nconst urlsToCache = [\n    '/',\n    '/static/style.css',\n    '/static/main.js',\n    '/static/images/default-food.jpg',\n    '/static/images/default-drink.jpg',\n    '/menu',\n    '/about',\n    '/contact'\n];\n\n// Install event\nself.addEventListener('install', function(event) {\n    event.waitUntil(\n        caches.open(CACHE_NAME)\n        .then(function(cache) {\n            return cache.addAll(urlsToCache);\n        })\n    );\n});\n\n// Fetch event\nself.addEventListener('fetch', function(event) {\n    event.respondWith(\n        caches.match(event.request)\n        .then(function(response) {\n            // Return cached version or fetch from network\n            return response || fetch(event.request);\n        })\n    );\n});\n\n// Activate event\nself.addEventListener('activate', function(event) {\n    event.waitUntil(\n        caches.keys().then(function(cacheNames) {\n            return Promise.all(\n                cacheNames.map(function(cacheName) {\n                    if (cacheName !== CACHE_NAME) {\n                        return caches.delete(cacheName);\n                    }\n                })\n            );\n        })\n    );\n});\n","size_bytes":1213},"app_fixed.py":{"content":"import time\nimport string\nimport secrets as secrets_module\n\n# Global start time tracking\nstart_time = time.time()\n\n# Cleanup function\ndef cleanup_resources():\n    \"\"\"Resource cleanup on app shutdown\"\"\"\n    try:\n        if 'executor' in globals():\n            executor.shutdown(wait=True)\n        if 'db_pool' in globals() and hasattr(db_pool, 'connections'):\n            for conn in db_pool.connections:\n                try:\n                    conn.close()\n                except:\n                    pass\n        if 'app_logger' in globals():\n            app_logger.info(\"Resources cleaned up successfully\")\n    except Exception as e:\n        if 'app_logger' in globals():\n            app_logger.error(f\"Cleanup error: {str(e)}\")\n\nimport atexit\natexit.register(cleanup_resources)\n\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, g\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport sqlite3, os, datetime, json, uuid, secrets\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom flask_cors import CORS\nfrom flask_compress import Compress\nimport pytz\nimport qrcode\nfrom io import BytesIO\nimport base64\nimport requests\nfrom functools import wraps\nimport threading\nfrom contextlib import contextmanager\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\nimport hashlib\nfrom collections import defaultdict\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.middleware.profiler import ProfilerMiddleware\nfrom dotenv import load_dotenv\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\n# Redis import - optional\ntry:\n    import redis\n    REDIS_AVAILABLE = True\nexcept ImportError:\n    REDIS_AVAILABLE = False\n    redis = None\n\n# Environment variables yuklash\nload_dotenv()\n\napp = Flask(__name__)\n\n# Universal configuration class\nclass Config:\n    \"\"\"Universal dastur konfiguratsiyasi\"\"\"\n\n    # Environment detection\n    ENVIRONMENT = os.environ.get('FLASK_ENV', 'production')\n    IS_DEVELOPMENT = ENVIRONMENT == 'development'\n    IS_PRODUCTION = ENVIRONMENT == 'production'\n\n    # Database configuration\n    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///database.sqlite3')\n    SQLALCHEMY_DATABASE_URI = DATABASE_URL\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    # SQLite-specific engine options\n    if DATABASE_URL.startswith('sqlite'):\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'connect_args': {\n                'check_same_thread': False,\n                'timeout': 60\n            }\n        }\n    else:\n        # PostgreSQL options (if using PostgreSQL)\n        SQLALCHEMY_ENGINE_OPTIONS = {\n            'pool_timeout': 30,\n            'pool_recycle': 3600,\n            'pool_pre_ping': True\n        }\n\n    # Security configuration\n    SECRET_KEY = os.environ.get(\"SECRET_KEY\", secrets_module.token_urlsafe(32))\n    SESSION_COOKIE_SECURE = IS_PRODUCTION\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n    PERMANENT_SESSION_LIFETIME = 7200\n    WTF_CSRF_ENABLED = True\n\n    # File upload configuration\n    MAX_CONTENT_LENGTH = 32 * 1024 * 1024  # 32MB\n    UPLOAD_FOLDER = 'static/uploads'\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\n\n    # JSON configuration\n    JSON_SORT_KEYS = False\n    JSONIFY_PRETTYPRINT_REGULAR = IS_DEVELOPMENT\n\n    # Cache configuration\n    SEND_FILE_MAX_AGE_DEFAULT = 31536000 if IS_PRODUCTION else 300\n    REDIS_URL = os.environ.get('REDIS_URL', 'memory://')\n\n    # External APIs\n    YANDEX_GEOCODER_API = os.environ.get('YANDEX_GEOCODER_API', '')\n    GOOGLE_MAPS_API = os.environ.get('GOOGLE_MAPS_API', '')\n    SERPER_API_KEY = os.environ.get('SERPER_API_KEY', '1b077296f67499a12ee28ce232bb48221d29be14')\n\n    # Localization\n    DEFAULT_LANGUAGE = os.environ.get('DEFAULT_LANGUAGE', 'uz')\n    SUPPORTED_LANGUAGES = ['uz', 'ru', 'en', 'tr', 'ar']\n    DEFAULT_CURRENCY = os.environ.get('DEFAULT_CURRENCY', 'UZS')\n    TIMEZONE = os.environ.get('TIMEZONE', 'Asia/Tashkent')\n\n    # Business logic\n    AVG_PREP_MINUTES = int(os.environ.get(\"AVG_PREP_MINUTES\", \"7\"))\n    DELIVERY_BASE_PRICE = int(os.environ.get(\"DELIVERY_BASE_PRICE\", \"10000\"))\n    COURIER_BASE_RATE = int(os.environ.get(\"COURIER_BASE_RATE\", \"8000\"))\n    CASHBACK_PERCENTAGE = float(os.environ.get(\"CASHBACK_PERCENTAGE\", \"1.0\"))\n    MAX_DELIVERY_DISTANCE = float(os.environ.get(\"MAX_DELIVERY_DISTANCE\", \"50.0\"))\n\n    # Rate limiting\n    RATE_LIMIT_DAILY = int(os.environ.get(\"RATE_LIMIT_DAILY\", \"1000\"))\n    RATE_LIMIT_HOURLY = int(os.environ.get(\"RATE_LIMIT_HOURLY\", \"200\"))\n    RATE_LIMIT_MINUTE = int(os.environ.get(\"RATE_LIMIT_MINUTE\", \"50\"))\n\n    # Logging\n    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')\n    LOG_FILE_MAX_SIZE = int(os.environ.get('LOG_FILE_MAX_SIZE', '10485760'))  # 10MB\n    LOG_BACKUP_COUNT = int(os.environ.get('LOG_BACKUP_COUNT', '5'))\n\n    # Performance\n    THREAD_POOL_MAX_WORKERS = int(os.environ.get('THREAD_POOL_MAX_WORKERS', '10'))\n    DB_POOL_MAX_CONNECTIONS = int(os.environ.get('DB_POOL_MAX_CONNECTIONS', '20'))\n\n    # Admin credentials\n    SUPER_ADMIN_USERNAME = os.environ.get('SUPER_ADMIN_USERNAME', 'masteradmin')\n    SUPER_ADMIN_PASSWORD = os.environ.get('SUPER_ADMIN_PASSWORD', 'SuperAdmin2025!@#$%')\n\n# Apply configuration\napp.config.from_object(Config)\n\n# Professional middleware stack\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)\n\n# CORS support\nCORS(app, origins=['*'], methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])\n\n# Compression\nCompress(app)\n\n# Rate limiting with universal configuration\nlimiter = Limiter(\n    key_func=get_remote_address,\n    app=app,\n    default_limits=[\n        f\"{Config.RATE_LIMIT_DAILY} per day\",\n        f\"{Config.RATE_LIMIT_HOURLY} per hour\",\n        f\"{Config.RATE_LIMIT_MINUTE} per minute\"\n    ],\n    storage_uri=Config.REDIS_URL\n)\n\n# Performance profiling (faqat debug rejimida)\nif os.environ.get('FLASK_ENV') == 'development':\n    app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[30])\n\n# Upload papkasini yaratish\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# Logs papkasini yaratish\nos.makedirs('logs', exist_ok=True)\n\n# Advanced logging konfiguratsiyasi - funksiyani oldinroq e'lon qilish\ndef setup_logging():\n    \"\"\"Professional logging setup with structured logging\"\"\"\n    # Detailed formatter\n    detailed_formatter = logging.Formatter(\n        '%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s'\n    )\n\n    # Simple formatter\n    simple_formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s'\n    )\n\n    try:\n        # Rotating file handler (maksimal 10MB, 5 ta backup)\n        file_handler = RotatingFileHandler('logs/restaurant.log', maxBytes=10485760, backupCount=5)\n        file_handler.setFormatter(detailed_formatter)\n        file_handler.setLevel(logging.INFO)\n\n        # Error file handler\n        error_handler = RotatingFileHandler('logs/errors.log', maxBytes=10485760, backupCount=5)\n        error_handler.setFormatter(detailed_formatter)\n        error_handler.setLevel(logging.ERROR)\n\n        # Console handler - faqat development uchun\n        console_handler = logging.StreamHandler()\n        if Config.IS_DEVELOPMENT:\n            console_handler.setFormatter(simple_formatter)\n            console_handler.setLevel(logging.INFO)\n        else:\n            console_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n            console_handler.setLevel(logging.ERROR)\n\n        # Root logger konfiguratsiya\n        root_logger = logging.getLogger()\n        root_logger.setLevel(logging.INFO if Config.IS_DEVELOPMENT else logging.WARNING)\n        root_logger.addHandler(file_handler)\n        root_logger.addHandler(error_handler)\n        root_logger.addHandler(console_handler)\n\n        # Flask app logger\n        app.logger.setLevel(logging.INFO if Config.IS_DEVELOPMENT else logging.ERROR)\n        app.logger.addHandler(error_handler)\n\n        # Werkzeug loglarni sozlash\n        werkzeug_logger = logging.getLogger('werkzeug')\n        werkzeug_logger.setLevel(logging.WARNING)\n\n        return logging.getLogger('restaurant_app')\n\n    except Exception as e:\n        app_logger.error(f\"Logging setup failed: {e}\")\n        # Fallback logging\n        print(f\"Logging setup failed: {e}\")\n        return logging.getLogger('restaurant_app')\n\n# Logging ni sozlash\napp_logger = setup_logging()\n\n# Location service instance - xatolik bo'lsa fallback yaratish\ntry:\n    from location_service import LocationService\n    location_service = LocationService()\n    app_logger.info(\"Location service muvaffaqiyatli yuklandi\")\nexcept (ImportError, Exception) as e:\n    app_logger.warning(f\"Location service yuklanmadi: {str(e)}\")\n    class FallbackLocationService:\n        def search_places(self, query):\n            return {\"places\": [], \"error\": \"Location service not available\"}\n    location_service = FallbackLocationService()\n\n# Cache tizimi\nclass CacheManager:\n    def __init__(self):\n        self.memory_cache = {}\n        self.cache_timestamps = {}\n        self.cache_lock = threading.Lock()\n        self.redis_client = None\n        self._init_redis()\n\n    def _init_redis(self):\n        \"\"\"Redis connection (agar mavjud bo'lsa)\"\"\"\n        try:\n            if not REDIS_AVAILABLE:\n                return\n\n            redis_url = os.environ.get('REDIS_URL')\n            if redis_url and not redis_url.startswith('memory'):\n                self.redis_client = redis.from_url(redis_url)\n                self.redis_client.ping()\n                app_logger.info(\"Redis cache tizimi ulandi\")\n        except Exception as e:\n            app_logger.warning(f\"Redis ulanmadi, memory cache ishlatiladi: {str(e)}\")\n            self.redis_client = None\n\n    def get(self, key, default=None):\n        \"\"\"Cache dan ma'lumot olish\"\"\"\n        try:\n            if self.redis_client:\n                value = self.redis_client.get(f\"restaurant:{key}\")\n                if value:\n                    return json.loads(value.decode())\n\n            # Memory cache dan olish\n            with self.cache_lock:\n                if key in self.memory_cache:\n                    timestamp = self.cache_timestamps.get(key, 0)\n                    if time.time() - timestamp < 300:  # 5 daqiqa\n                        return self.memory_cache[key]\n                    else:\n                        del self.memory_cache[key]\n                        del self.cache_timestamps[key]\n        except Exception as e:\n            app_logger.error(f\"Cache get error: {str(e)}\")\n\n        return default\n\n    def set(self, key, value, ttl=300):\n        \"\"\"Cache ga ma'lumot saqlash\"\"\"\n        try:\n            if self.redis_client:\n                self.redis_client.setex(f\"restaurant:{key}\", ttl, json.dumps(value, default=str))\n\n            # Memory cache ga ham saqlash\n            with self.cache_lock:\n                self.memory_cache[key] = value\n                self.cache_timestamps[key] = time.time()\n\n                # Memory cache ni tozalash (maksimal 1000 ta element)\n                if len(self.memory_cache) > 1000:\n                    oldest_key = min(self.cache_timestamps.keys(), key=lambda k: self.cache_timestamps[k])\n                    del self.memory_cache[oldest_key]\n                    del self.cache_timestamps[oldest_key]\n        except Exception as e:\n            app_logger.error(f\"Cache set error: {str(e)}\")\n\n    def delete(self, key):\n        \"\"\"Cache dan o'chirish\"\"\"\n        try:\n            if self.redis_client:\n                self.redis_client.delete(f\"restaurant:{key}\")\n\n            with self.cache_lock:\n                self.memory_cache.pop(key, None)\n                self.cache_timestamps.pop(key, None)\n        except Exception as e:\n            app_logger.error(f\"Cache delete error: {str(e)}\")\n\n# Global cache manager\ncache_manager = CacheManager()\n\n# Rate limiting\nclass RateLimiter:\n    def __init__(self):\n        self.requests = defaultdict(list)\n        self.lock = threading.Lock()\n\n    def is_allowed(self, identifier, max_requests=100, window=3600):\n        \"\"\"Rate limiting tekshiruvi\"\"\"\n        current_time = time.time()\n\n        with self.lock:\n            # Eski so'rovlarni tozalash\n            self.requests[identifier] = [\n                req_time for req_time in self.requests[identifier]\n                if current_time - req_time < window\n            ]\n\n            # Yangi so'rovni qo'shish\n            if len(self.requests[identifier]) < max_requests:\n                self.requests[identifier].append(current_time)\n                return True\n\n            return False\n\nrate_limiter = RateLimiter()\n\n# Thread pool for async operations with configurable workers\nexecutor = ThreadPoolExecutor(max_workers=Config.THREAD_POOL_MAX_WORKERS)\n\n# Database fayl yo'lini to'g'rilash\nDB_PATH = os.path.join(os.path.dirname(__file__), \"database.sqlite3\")\n\nimport logging\nfrom logging.handlers import RotatingFileHandler, SMTPHandler\n\n\n\n# Global error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    app_logger.warning(f\"404 Error: {request.url}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Not found\", \"code\": 404}), 404\n\n    # Error template mavjudligini tekshirish\n    try:\n        return render_template('error.html', error_code=404, error_message=\"Sahifa topilmadi\"), 404\n    except:\n        return f\"\"\"\n        <h1>404 - Sahifa topilmadi</h1>\n        <p>So'ralgan sahifa mavjud emas.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    app_logger.error(f\"500 Error: {str(error)} - URL: {request.url}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Internal server error\", \"code\": 500}), 500\n\n    try:\n        return render_template('error.html', error_code=500, error_message=\"Server xatoligi\"), 500\n    except:\n        return f\"\"\"\n        <h1>500 - Server xatoligi</h1>\n        <p>Ichki server xatoligi yuz berdi.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 500\n\n@app.errorhandler(429)\ndef rate_limit_error(error):\n    app_logger.warning(f\"Rate limit exceeded: {request.remote_addr}\")\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\"error\": \"Rate limit exceeded\", \"code\": 429}), 429\n\n    try:\n        return render_template('error.html', error_code=429, error_message=\"Juda ko'p so'rov\"), 429\n    except:\n        return f\"\"\"\n        <h1>429 - Juda ko'p so'rov</h1>\n        <p>Juda ko'p so'rov yuborildi. Biroz kuting.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 429\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    \"\"\"Global exception handler\"\"\"\n    app_logger.error(f\"Unhandled exception: {str(e)} - URL: {request.url}\")\n\n    if request.is_json or request.path.startswith('/api/'):\n        return jsonify({\n            \"error\": \"Unexpected error occurred\",\n            \"code\": 500,\n            \"details\": str(e) if Config.IS_DEVELOPMENT else \"Internal server error\"\n        }), 500\n\n    try:\n        return render_template('error.html',\n                             error_code=500,\n                             error_message=\"Kutilmagan xatolik yuz berdi\"), 500\n    except:\n        return f\"\"\"\n        <h1>Kutilmagan xatolik</h1>\n        <p>Dasturda kutilmagan xatolik yuz berdi.</p>\n        <a href=\"/\">Bosh sahifaga qaytish</a>\n        \"\"\", 500\n\n# Performance monitoring\nclass PerformanceMonitor:\n    def __init__(self):\n        self.request_times = []\n        self.lock = threading.Lock()\n        self.error_count = 0\n        self.success_count = 0\n        self.last_cleanup = time.time()\n\n    def record_request(self, duration, endpoint, status_code=200):\n        with self.lock:\n            try:\n                self.request_times.append({\n                    'duration': duration,\n                    'endpoint': endpoint,\n                    'timestamp': time.time(),\n                    'status_code': status_code\n                })\n\n                # Status ni hisoblash\n                if status_code >= 400:\n                    self.error_count += 1\n                else:\n                    self.success_count += 1\n\n                # Memory management - har 10 daqiqada eski ma'lumotlarni tozalash\n                current_time = time.time()\n                if current_time - self.last_cleanup > 600:  # 10 daqiqa\n                    cutoff_time = current_time - 3600  # 1 soat\n                    self.request_times = [\n                        req for req in self.request_times\n                        if req['timestamp'] > cutoff_time\n                    ]\n                    self.last_cleanup = current_time\n\n                # Faqat so'nggi 1000 ta so'rovni saqlash\n                if len(self.request_times) > 1000:\n                    self.request_times = self.request_times[-1000:]\n\n            except Exception as e:\n                app_logger.error(f\"Performance monitoring xatoligi: {str(e)}\")\n\n    def get_stats(self):\n        with self.lock:\n            if not self.request_times:\n                return {}\n\n            durations = [req['duration'] for req in self.request_times]\n            return {\n                'avg_response_time': sum(durations) / len(durations),\n                'max_response_time': max(durations),\n                'min_response_time': min(durations),\n                'total_requests': len(durations)\n            }\n\n# Performance monitor instance yaratish - to'g'ri e'lon qilish\ntry:\n    performance_monitor = PerformanceMonitor()\n    app_logger.info(\"Performance monitor muvaffaqiyatli yaratildi\")\nexcept Exception as e:\n    app_logger.warning(f\"Performance monitor yaratishda xatolik: {str(e)}\")\n    # Fallback performance monitor yaratish\n    class DummyPerformanceMonitor:\n        def record_request(self, duration, endpoint, status_code=200):\n            pass\n        def get_stats(self):\n            return {}\n    performance_monitor = DummyPerformanceMonitor()\n\n@app.before_request\ndef before_request():\n    \"\"\"So'rov boshlanishida xavfsiz pre-processing\"\"\"\n    try:\n        # Request time tracking\n        request.start_time = time.time()\n\n        # Session ni tekshirish va tuzatish\n        if not session.get('session_id') or session.get('session_id') == 'None':\n            session['session_id'] = get_session_id()\n\n        # Database connection test\n        if not hasattr(g, 'db_test_done'):\n            try:\n                test_conn = get_db()\n                test_conn.execute(\"SELECT 1\")\n                test_conn.close()\n                g.db_test_done = True\n            except Exception as db_error:\n                app_logger.error(f\"Database connection test failed: {str(db_error)}\")\n\n    except Exception as e:\n        app_logger.error(f\"Before request error: {str(e)}\")\n        # Error bo'lsa ham davom ettirish\n\n@app.after_request\ndef after_request(response):\n    \"\"\"Request tugagandan keyin ishlaydigan function\"\"\"\n    try:\n        end_time = time.time()\n        duration = end_time - getattr(g, 'start_time', end_time)\n\n        # Performance monitoring - check if it's a proper instance\n        if hasattr(performance_monitor, 'record_request') and callable(getattr(performance_monitor, 'record_request', None)):\n            performance_monitor.record_request(duration, request.endpoint, response.status_code)\n\n        # Security headers qo'shish\n        response.headers['X-Content-Type-Options'] = 'nosniff'\n        response.headers['X-Frame-Options'] = 'DENY'\n        response.headers['X-XSS-Protection'] = '1; mode=block'\n\n        # Cache headers faqat static files uchun emas\n        if not request.path.startswith('/static/'):\n            response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n            response.headers['Pragma'] = 'no-cache'\n            response.headers['Expires'] = '0'\n\n        if Config.IS_PRODUCTION:\n            response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n\n    except Exception as e:\n        # Silent pass - xavfsizlik uchun\n        pass\n\n    return response\n\n\n\nAVG_PREP_MINUTES = int(os.environ.get(\"AVG_PREP_MINUTES\", \"7\"))\n# o'rtacha tayyorlanish vaqti (daqiqalarda)\n\n# Initialize SQLAlchemy only if using PostgreSQL\nif Config.DATABASE_URL.startswith('postgresql'):\n    db = SQLAlchemy(app)\nelse:\n    db = None  # Use custom SQLite connection pool instead\n\n# O'zbekiston vaqt zonasi\nTASHKENT_TZ = pytz.timezone('Asia/Tashkent')\n\ndef get_current_time():\n    return datetime.datetime.now(TASHKENT_TZ)\n\n# Database connection pool\nclass DatabasePool:\n    def __init__(self, db_path, max_connections=20):\n        self.db_path = db_path\n        self.max_connections = max_connections\n        self.connections = []\n        self.lock = threading.Lock()\n        self._init_pool()\n\n    def _init_pool(self):\n        \"\"\"Connection pool ni ishga tushirish\"\"\"\n        for _ in range(5):  # Boshlang'ich 5 ta connection\n            conn = self._create_connection()\n            if conn:\n                self.connections.append(conn)\n\n    def _create_connection(self):\n        \"\"\"Yangi database connection yaratish\"\"\"\n        max_retries = 3\n        for attempt in range(max_retries):\n            try:\n                conn = sqlite3.connect(\n                    self.db_path,\n                    check_same_thread=False,\n                    timeout=30.0,\n                    isolation_level=None\n                )\n                conn.row_factory = sqlite3.Row\n\n                # SQLite optimallashtirish sozlamalari - xavfsiz\n                try:\n                    conn.execute(\"PRAGMA journal_mode=WAL\")\n                    conn.execute(\"PRAGMA synchronous=NORMAL\")\n                    conn.execute(\"PRAGMA cache_size=5000\")\n                    conn.execute(\"PRAGMA temp_store=MEMORY\")\n                    conn.execute(\"PRAGMA foreign_keys=ON\")\n                    conn.execute(\"PRAGMA busy_timeout=15000\")\n                except Exception as pragma_error:\n                    app_logger.warning(f\"PRAGMA settings failed: {str(pragma_error)}\")\n\n                # Connection test\n                conn.execute(\"SELECT 1\").fetchone()\n                return conn\n\n            except Exception as e:\n                app_logger.error(f\"Database connection attempt {attempt + 1} failed: {str(e)}\")\n                if attempt == max_retries - 1:\n                    app_logger.critical(f\"Database connection yaratishda XATOLIK: {str(e)}\")\n                    return None\n                time.sleep(0.5 * (attempt + 1))\n\n    @contextmanager\n    def get_connection(self):\n        \"\"\"Context manager orqali connection olish\"\"\"\n        conn = None\n        try:\n            with self.lock:\n                if self.connections:\n                    conn = self.connections.pop()\n                else:\n                    conn = self._create_connection()\n\n            if not conn:\n                raise Exception(\"Database connection olinmadi\")\n\n            yield conn\n\n        except Exception as e:\n            if conn:\n                try:\n                    conn.rollback()\n                except:\n                    pass\n            raise e\n        finally:\n            if conn:\n                try:\n                    with self.lock:\n                        if len(self.connections) < self.max_connections:\n                            self.connections.append(conn)\n                        else:\n                            conn.close()\n                except:\n                    pass\n\n# Global database pool with configurable max connections\ndb_pool = DatabasePool(DB_PATH, Config.DB_POOL_MAX_CONNECTIONS)\n\ndef get_db():\n    \"\"\"Legacy support uchun\"\"\"\n    return sqlite3.connect(DB_PATH, check_same_thread=False)\n\n# Optimized database operations\ndef execute_query(query, params=None, fetch_one=False, fetch_all=False):\n    \"\"\"Optimizatsiya qilingan database so'rovi\"\"\"\n    with db_pool.get_connection() as conn:\n        try:\n            cur = conn.cursor()\n\n            if params:\n                cur.execute(query, params)\n            else:\n                cur.execute(query)\n\n            if fetch_one:\n                result = cur.fetchone()\n                # Ensure result is a dictionary-like object for easier access\n                if result and hasattr(result, 'keys'):\n                    return dict(zip(result.keys(), result))\n                elif result:\n                    # Fallback for tuple results if row_factory is not set correctly\n                    return result\n                return None\n            elif fetch_all:\n                # fetch_all uchun alohida result olish\n                all_results = cur.fetchall()\n                if all_results and hasattr(all_results[0], 'keys'):\n                    return [dict(zip(row.keys(), row)) for row in all_results]\n                else:\n                    return all_results or []\n            else:\n                conn.commit()\n                return cur.lastrowid\n        except Exception as e:\n            conn.rollback()\n            raise e\n\ndef execute_many(query, params_list):\n    \"\"\"Bulk operations uchun optimizatsiya\"\"\"\n    with db_pool.get_connection() as conn:\n        try:\n            cur = conn.cursor()\n            cur.executemany(query, params_list)\n            conn.commit()\n            return cur.rowcount\n        except Exception as e:\n            conn.rollback()\n            raise e\n\ndef init_db():\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Foydalanuvchilar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL,\n            phone TEXT,\n            password_hash TEXT NOT NULL,\n            address TEXT,\n            card_number TEXT,\n            card_expiry TEXT,\n            created_at TEXT NOT NULL,\n            address_latitude REAL,\n            address_longitude REAL,\n            interface_language TEXT DEFAULT 'uz',\n            font_size TEXT DEFAULT 'medium',\n            dark_theme BOOLEAN DEFAULT 0\n        );\n    \"\"\")\n\n    # Xodimlar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS staff (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            birth_date TEXT NOT NULL,\n            phone TEXT NOT NULL,\n            passport_series TEXT NOT NULL,\n            passport_number TEXT NOT NULL,\n            password_hash TEXT NOT NULL,\n            total_hours REAL DEFAULT 0,\n            orders_handled INTEGER DEFAULT 0,\n            last_activity TEXT,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Kuryerlar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS couriers (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            birth_date TEXT NOT NULL,\n            phone TEXT NOT NULL,\n            passport_series TEXT NOT NULL,\n            passport_number TEXT NOT NULL,\n            password_hash TEXT NOT NULL,\n            total_hours REAL DEFAULT 0,\n            deliveries_completed INTEGER DEFAULT 0,\n            last_activity TEXT,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Buyurtmalar jadvali (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS orders (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            customer_name TEXT NOT NULL,\n            ticket_no INTEGER NOT NULL,\n            order_type TEXT NOT NULL, -- 'dine_in' yoki 'delivery'\n            status TEXT NOT NULL,\n            delivery_address TEXT,\n            delivery_distance REAL DEFAULT 0, -- masofa km da\n            delivery_price REAL DEFAULT 0, -- yetkazish narxi\n            delivery_latitude REAL,\n            delivery_longitude REAL,\n            delivery_map_url TEXT,\n            customer_note TEXT,\n            customer_phone TEXT,\n            card_number TEXT,\n            courier_id INTEGER,\n            courier_price REAL DEFAULT 0,\n            courier_delivery_minutes INTEGER DEFAULT 0,\n            branch_id INTEGER DEFAULT 1,\n            created_at TEXT NOT NULL,\n            eta_time TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (courier_id) REFERENCES couriers (id)\n        );\n    \"\"\")\n\n    # Tikketlar hisoblagich\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS counters (\n            name TEXT PRIMARY KEY,\n            value INTEGER NOT NULL\n        );\n    \"\"\")\n    cur.execute(\"INSERT OR IGNORE INTO counters (name, value) VALUES ('ticket', 10000);\")\n\n    # Menyu mahsulotlari (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS menu_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            price REAL NOT NULL,\n            category TEXT NOT NULL,\n            description TEXT,\n            image_url TEXT,\n            available BOOLEAN DEFAULT 1,\n            stock_quantity INTEGER DEFAULT 0,\n            orders_count INTEGER DEFAULT 0,\n            rating REAL DEFAULT 0.0,\n            discount_percentage REAL DEFAULT 0.0,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Sevimlilar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS favorites (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id),\n            UNIQUE(user_id, menu_item_id)\n        );\n    \"\"\")\n\n    # Savatcha jadvali (yangilangan)\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS cart_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            session_id TEXT NOT NULL DEFAULT 'default_session',\n            menu_item_id INTEGER NOT NULL,\n            quantity INTEGER NOT NULL DEFAULT 1,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id)\n        );\n    \"\"\")\n\n    # Buyurtma tafsilotlari jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS order_details (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            order_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            quantity INTEGER NOT NULL,\n            price REAL NOT NULL,\n            FOREIGN KEY (order_id) REFERENCES orders (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id)\n        );\n    \"\"\")\n\n    # Baholar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS ratings (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            menu_item_id INTEGER NOT NULL,\n            rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),\n            comment TEXT,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            FOREIGN KEY (menu_item_id) REFERENCES menu_items (id),\n            UNIQUE(user_id, menu_item_id)\n        );\n    \"\"\")\n\n    # Savollar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS questions (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_name TEXT NOT NULL,\n            email TEXT,\n            phone TEXT,\n            subject TEXT NOT NULL,\n            message TEXT NOT NULL,\n            status TEXT DEFAULT 'pending',\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Cheklar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS receipts (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            order_id INTEGER NOT NULL,\n            receipt_number TEXT NOT NULL UNIQUE,\n            total_amount REAL NOT NULL,\n            cashback_amount REAL NOT NULL,\n            cashback_percentage REAL DEFAULT 1.0,\n            created_at TEXT NOT NULL,\n            FOREIGN KEY (order_id) REFERENCES orders (id)\n        );\n    \"\"\")\n\n    # Filiallar jadvali\n    cur.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS branches (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            address TEXT NOT NULL,\n            latitude REAL NOT NULL,\n            longitude REAL NOT NULL,\n            phone TEXT,\n            working_hours TEXT DEFAULT '09:00-22:00',\n            is_active BOOLEAN DEFAULT 1,\n            delivery_radius REAL DEFAULT 15.0,\n            created_at TEXT NOT NULL\n        );\n    \"\"\")\n\n    # Boshlang'ich taomlar qo'shish\n    cur.execute(\"SELECT COUNT(*) FROM menu_items\")\n    if cur.fetchone()[0] == 0:\n        now = get_current_time().isoformat()\n        sample_items = [\n            ('Osh', 25000, 'food', 'An\\'anaviy o\\'zbek taomi, guruch va go\\'sht bilan', '/static/images/osh.jpg', 1, 50, 0, 4.5, 0.0, now),\n            ('Manti', 20000, 'food', 'Bug\\'da pishirilgan go\\'shtli manti', '/static/images/manti.jpg', 1, 30, 0, 4.8, 5.0, now),\n            ('Shashlik', 30000, 'food', 'Mangalda pishirilgan mazali shashlik', '/static/images/shashlik.jpg', 1, 25, 0, 4.7, 0.0, now),\n            ('Lagmon', 22000, 'food', 'Qo\\'l tortmasi bilan tayyorlangan lagmon', '/static/images/lagmon.jpg', 1, 40, 0, 4.6, 10.0, now),\n            ('Choy', 5000, 'drink', 'Issiq qora choy', '/static/images/choy.jpg', 1, 100, 0, 4.2, 0.0, now),\n            ('Qora choy', 6000, 'drink', 'O\\'zbek an\\'anaviy choy', '/static/images/qora_choy.jpg', 1, 80, 0, 4.3, 0.0, now),\n            ('Kompot', 8000, 'drink', 'Mevali kompot', '/static/images/kompot.jpg', 1, 60, 0, 4.1, 15.0, now),\n            ('Coca Cola', 10000, 'drink', 'Sovuq ichimlik', '/static/images/coca_cola.jpg', 1, 70, 0, 4.0, 0.0, now),\n        ]\n        cur.executemany(\"INSERT INTO menu_items (name, price, category, description, image_url, available, stock_quantity, orders_count, rating, discount_percentage, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", sample_items)\n\n    # Boshlang'ich filiallarni qo'shish\n    cur.execute(\"SELECT COUNT(*) FROM branches\")\n    if cur.fetchone()[0] == 0:\n        now = get_current_time().isoformat()\n        sample_branches = [\n            ('Markaziy filial', 'Amir Temur ko\\'chasi 1, Toshkent', 41.2995, 69.2401, '+998712345678', '09:00-23:00', 1, 20.0, now),\n            ('Chilonzor filiali', 'Chilonzor tumani, Bunyodkor ko\\'chasi 10', 41.2753, 69.2056, '+998712345679', '09:00-22:00', 1, 15.0, now),\n            ('Yunusobod filiali', 'Yunusobod tumani, Shahrisabz ko\\'chasi 5', 41.3506, 69.2896, '+998712345680', '08:00-22:00', 1, 18.0, now),\n            ('Sergeli filiali', 'Sergeli tumani, Yangi Sergeli MFY', 41.2278, 69.2233, '+998712345681', '09:00-22:00', 1, 12.0, now),\n        ]\n        cur.executemany(\"INSERT INTO branches (name, address, latitude, longitude, phone, working_hours, is_active, delivery_radius, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\", sample_branches)\n\n    conn.commit()\n    conn.close()\n\ndef ensure_orders_columns():\n    \"\"\"Orders jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(orders);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'status' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN status TEXT NOT NULL DEFAULT 'waiting';\")\n            conn.commit()\n\n        if 'user_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN user_id INTEGER;\")\n            conn.commit()\n\n        if 'delivery_address' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_address TEXT;\")\n            conn.commit()\n\n        if 'delivery_distance' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_distance REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'delivery_price' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_price REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'customer_phone' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN customer_phone TEXT;\")\n            conn.commit()\n\n        if 'card_number' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN card_number TEXT;\")\n            conn.commit()\n\n        if 'courier_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_id INTEGER;\")\n            conn.commit()\n\n        if 'order_type' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN order_type TEXT NOT NULL DEFAULT 'dine_in';\")\n            conn.commit()\n\n        if 'delivery_latitude' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_latitude REAL;\")\n            conn.commit()\n\n        if 'delivery_longitude' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_longitude REAL;\")\n            conn.commit()\n\n        if 'courier_delivery_time' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_delivery_time INTEGER DEFAULT 30;\")\n            conn.commit()\n\n        if 'delivery_map_url' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN delivery_map_url TEXT;\")\n            conn.commit()\n\n        if 'customer_note' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN customer_note TEXT;\")\n            conn.commit()\n\n        if 'courier_price' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_price REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'courier_delivery_minutes' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN courier_delivery_minutes INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'branch_id' not in cols:\n            cur.execute(\"ALTER TABLE orders ADD COLUMN branch_id INTEGER DEFAULT 1;\")\n            conn.commit()\n\n    except Exception as e:\n        app_logger.error(f\"Orders jadval migration xatoligi: {str(e)}\")\n        logging.error(f\"Orders jadval migration xatoligi: {str(e)}\")\n    finally:\n        conn.close()\n\ndef ensure_users_columns():\n    \"\"\"Users jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(users);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'address_latitude' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN address_latitude REAL;\")\n            conn.commit()\n\n        if 'address_longitude' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN address_longitude REAL;\")\n            conn.commit()\n\n        if 'interface_language' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN interface_language TEXT DEFAULT 'uz';\")\n            conn.commit()\n\n        if 'font_size' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN font_size TEXT DEFAULT 'medium';\")\n            conn.commit()\n\n        if 'dark_theme' not in cols:\n            cur.execute(\"ALTER TABLE users ADD COLUMN dark_theme BOOLEAN DEFAULT 0;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_cart_items_columns():\n    \"\"\"Cart_items jadvaliga user_id ustunini qo'shadi va session_id ni optional qiladi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(cart_items);\")\n        cols = [r[1] for r in cur.fetchall()]\n        if 'user_id' not in cols:\n            cur.execute(\"ALTER TABLE cart_items ADD COLUMN user_id INTEGER;\")\n            conn.commit()\n\n        # Eski jadval strukturasini yangilash - session_id ni NULL qilib qo'yish\n        cur.execute(\"UPDATE cart_items SET session_id = 'temp_session' WHERE session_id IS NULL OR session_id = ''\")\n        conn.commit()\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_staff_columns():\n    \"\"\"Staff jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(staff);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'passport_series' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN passport_series TEXT;\")\n            conn.commit()\n\n        if 'passport_number' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN passport_number TEXT;\")\n            conn.commit()\n\n        if 'orders_handled' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN orders_handled INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'last_activity' not in cols:\n            cur.execute(\"ALTER TABLE staff ADD COLUMN last_activity TEXT;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_courier_columns():\n    \"\"\"Courier jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    try:\n        cur.execute(\"PRAGMA table_info(couriers);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        if 'passport_series' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN passport_series TEXT;\")\n            conn.commit()\n\n        if 'passport_number' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN passport_number TEXT;\")\n            conn.commit()\n\n        if 'total_hours' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN total_hours REAL DEFAULT 0;\")\n            conn.commit()\n\n        if 'deliveries_completed' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN deliveries_completed INTEGER DEFAULT 0;\")\n            conn.commit()\n\n        if 'last_activity' not in cols:\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN last_activity TEXT;\")\n            conn.commit()\n\n    except Exception as e:\n        pass\n    conn.close()\n\ndef ensure_menu_items_columns():\n    \"\"\"Menu_items jadvaliga kerakli ustunlarni qo'shadi (migration).\"\"\"\n    conn = None\n    try:\n        conn = get_db()\n        cur = conn.cursor()\n\n        cur.execute(\"PRAGMA table_info(menu_items);\")\n        cols = [r[1] for r in cur.fetchall()]\n\n        # Kerakli ustunlarni qo'shish\n        columns_to_add = [\n            ('description', 'TEXT'),\n            ('image_url', 'TEXT'),\n            ('available', 'BOOLEAN DEFAULT 1'),\n            ('stock_quantity', 'INTEGER DEFAULT 0'),\n            ('orders_count', 'INTEGER DEFAULT 0'),\n            ('rating', 'REAL DEFAULT 0.0'),\n            ('discount_percentage', 'REAL DEFAULT 0.0'),\n            ('created_at', 'TEXT')\n        ]\n\n        for col_name, col_type in columns_to_add:\n            if col_name not in cols:\n                try:\n                    cur.execute(f\"ALTER TABLE menu_items ADD COLUMN {col_name} {col_type};\")\n                    conn.commit()\n                    app_logger.info(f\"Menu_items jadvaliga {col_name} ustuni qo'shildi\")\n                except Exception as col_error:\n                    app_logger.warning(f\"Menu_items jadvaliga {col_name} ustunini qo'shishda xatolik: {str(col_error)}\")\n\n    except Exception as e:\n        app_logger.error(f\"Menu items migration xatoligi: {str(e)}\")\n    finally:\n        if conn:\n            conn.close()\n\ndef cleanup_expired_orders():\n    \"\"\"Waiting holatidagi, 30 daqiqadan oshgan buyurtmalarni cancelled ga o'tkazadi.\"\"\"\n    conn = get_db()\n    cur = conn.cursor()\n    cutoff = (get_current_time() - datetime.timedelta(minutes=30)).isoformat()\n    try:\n        cur.execute(\"UPDATE orders SET status='cancelled' WHERE status='waiting' AND created_at < ?\", (cutoff,))\n        conn.commit()\n    except Exception as e:\n        pass\n    conn.close()\n\ndef safe_init_database():\n    \"\"\"Xavfsiz ma'lumotlar bazasini ishga tushirish\"\"\"\n    try:\n        app_logger.info(\"Ma'lumotlar bazasini ishga tushirish boshlandi...\")\n        init_db()\n        app_logger.info(\"Ma'lumotlar bazasi muvaffaqiyatli ishga tushirildi\")\n        return True\n    except Exception as e:\n        app_logger.error(f\"Ma'lumotlar bazasini ishga tushirishda xatolik: {str(e)}\")\n        try:\n            # Fallback - basic initialization\n            conn = sqlite3.connect(DB_PATH)\n            conn.execute(\"CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY)\")\n            conn.close()\n            app_logger.warning(\"Ma'lumotlar bazasi qisman ishga tushirildi\")\n            return False\n        except Exception as fallback_error:\n            app_logger.critical(f\"Ma'lumotlar bazasi fallback ham ishlamadi: {str(fallback_error)}\")\n            return False\n\ndef create_minimal_app():\n    \"\"\"Minimal Flask app yaratish (emergency fallback)\"\"\"\n    from flask import Flask as MinimalFlask\n\n    minimal_app = MinimalFlask(__name__)\n    minimal_app.secret_key = 'emergency-fallback-key'\n\n    @minimal_app.route('/')\n    def emergency_home():\n        return \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Restaurant System - Emergency Mode</title>\n            <meta charset=\"utf-8\">\n            <style>\n                body { font-family: Arial, sans-serif; margin: 50px; background: #f5f5f5; }\n                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }\n                .error { color: #d32f2f; background: #ffebee; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                .info { color: #1976d2; background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }\n                h1 { color: #333; }\n                .btn { background: #1976d2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>🆘 Restaurant System - Emergency Mode</h1>\n                <div class=\"error\">\n                    <strong>Server xatoligi:</strong> Asosiy tizim ishga tushmadi.\n                </div>\n                <div class=\"info\">\n                    <strong>Status:</strong> Emergency fallback server ishlayapti.\n                </div>\n                <p>Iltimos, quyidagi amallarni bajaring:</p>\n                <ul>\n                    <li>Server loglarini tekshiring</li>\n                    <li>Dependencies o'rnatilganligini tekshiring</li>\n                    <li>Database fayli mavjudligini tekshiring</li>\n                    <li>Replit console da xatolarni ko'ring</li>\n                </ul>\n                <a href=\"/\" class=\"btn\">Qayta urinish</a>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n\n    @minimal_app.route('/health')\n    def emergency_health():\n        return {\"status\": \"emergency\", \"message\": \"Minimal fallback server\"}\n\n    return minimal_app\n\n# Ensure columns exist on startup\nensure_orders_columns()\nensure_cart_items_columns()\nensure_staff_columns()\nensure_courier_columns()\nensure_menu_items_columns()\nensure_users_columns()\n\n\n# Database ni xavfsiz ishga tushirish\nwith app.app_context():\n    try:\n        safe_init_database()\n    except Exception as init_error:\n        app_logger.error(f\"App context da database initialization xatoligi: {str(init_error)}\")\n\n# ---------- Helpers ----------\n\ndef next_ticket_no(conn):\n    cur = conn.cursor()\n    cur.execute(\"UPDATE counters SET value = value + 1 WHERE name = 'ticket';\")\n    cur.execute(\"SELECT value FROM counters WHERE name = 'ticket';\")\n    return cur.fetchone()[0]\n\ndef waiting_position(conn):\n    cur = conn.cursor()\n    cur.execute(\"SELECT COUNT(*) FROM orders WHERE status='waiting';\")\n    return cur.fetchone()[0]\n\ndef calc_eta_minutes(conn):\n    # navbatdagi pozitsiya bo'yicha ETA ni hisoblash\n    position = waiting_position(conn)  # sizdan oldingi kutayotganlar soni\n    eta_minutes = (position + 1) * AVG_PREP_MINUTES\n    return eta_minutes\n\ndef get_user_queue_position(conn, ticket_no):\n    # Foydalanuvchining navbatdagi o'rni\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n        SELECT COUNT(*) FROM orders\n        WHERE status='waiting' AND created_at < (\n            SELECT created_at FROM orders WHERE ticket_no=? AND status='waiting'\n        )\n    \"\"\", (ticket_no,))\n    result = cur.fetchone()\n    return result[0] + 1 if result else 0\n\ndef fmt_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef search_location_with_serper(query, gl=\"uz\", hl=\"uz\"):\n    \"\"\"Serper API orqali joylashuvlarni qidirish\"\"\"\n    try:\n        url = \"https://google.serper.dev/search\"\n        headers = {\n            'X-API-KEY': Config.SERPER_API_KEY, # Config dan API kalitini olish\n            'Content-Type': 'application/json'\n        }\n        data = {\n            \"q\": query,\n            \"gl\": gl,\n            \"hl\": hl\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            app_logger.error(f\"Serper API search error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        app_logger.error(f\"Serper API xatoligi: {e}\")\n        return None\n\ndef get_places_with_serper(query, gl=\"uz\", hl=\"uz\"):\n    \"\"\"Serper API orqali Google Places ma'lumotlarini olish\"\"\"\n    try:\n        url = \"https://google.serper.dev/places\"\n        headers = {\n            'X-API-KEY': Config.SERPER_API_KEY, # Config dan API kalitini olish\n            'Content-Type': 'application/json'\n        }\n        data = {\n            \"q\": query,\n            \"gl\": gl,\n            \"hl\": hl\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            app_logger.error(f\"Serper API places error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        app_logger.error(f\"Serper Places API xatoligi: {e}\")\n        return None\n\ndef validate_delivery_address(address):\n    \"\"\"Yetkazib berish manzilini tekshirish Yandex API orqali\"\"\"\n    if not address:\n        return False, \"Manzil kiritilmagan\"\n\n    # Yandex API kaliti mavjudligini tekshirish\n    if not app.config['YANDEX_GEOCODER_API']:\n        app_logger.warning(\"Yandex Geocoding API kaliti belgilanmagan. Manzil tekshiruvi cheklangan.\")\n        # Agar API kaliti bo'lmasa, oddiy tekshiruv\n        if len(address) > 5 and any(word in address.lower() for word in ['ko\\'cha', 'mahalla', 'tuman', 'shoh', 'yo\\'l']):\n            return True, \"Manzil qabul qilindi (API kaliti yo'q)\"\n        else:\n            return False, \"Manzilni to'liqroq kiriting (API kaliti yo'q)\"\n\n    try:\n        # Yandex Geocoding API orqali manzilni tekshirish\n        geocoding_url = \"https://geocode-maps.yandex.ru/1.x/\"\n        params = {\n            'apikey': app.config['YANDEX_GEOCODER_API'],\n            'geocode': f\"{address}, Toshkent, O'zbekiston\",\n            'format': 'json',\n            'results': 1\n        }\n\n        response = requests.get(geocoding_url, params=params, timeout=5)\n\n        if response.status_code == 200:\n            data = response.json()\n\n            # Natijalarni tekshirish\n            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])\n\n            if geo_objects:\n                return True, \"Manzil topildi\"\n            else:\n                return False, \"Manzil topilmadi\"\n        else:\n            app_logger.error(f\"Yandex Geocoding API error: {response.status_code} - {response.text}\")\n            # API ishlamasa, oddiy tekshirish\n            if len(address) > 5 and any(word in address.lower() for word in ['ko\\'cha', 'mahalla', 'tuman', 'shoh', 'yo\\'l']):\n                return True, \"Manzil qabul qilindi (API xatosi)\"\n            else:\n                return False, \"Manzilni to'liqroq kiriting (API xatosi)\"\n\n    except Exception as e:\n        # Xatolik bo'lsa, oddiy tekshirish\n        app_logger.error(f\"Manzil tekshirishda umumiy xatolik: {str(e)}\")\n        if len(address) > 5:\n            return True, \"Manzil qabul qilindi (Xatolik)\"\n        else:\n            return False, \"Manzilni to'liqroq kiriting (Xatolik)\"\n\ndef calculate_delivery_distance(address):\n    \"\"\"Yetkazib berish masofasini hisoblash Yandex API orqali\"\"\"\n    # Yandex API kaliti mavjudligini tekshirish\n    if not app.config['YANDEX_GEOCODER_API']:\n        app_logger.warning(\"Yandex Geocoding API kaliti belgilanmagan. Masofa hisoblash cheklangan.\")\n        # Agar API kaliti bo'lmasa, taxminiy masofa\n        return calculate_distance_fallback(address)\n\n    try:\n        # Restoran koordinatalari (Toshkent markazi)\n        restaurant_coords = [41.2995, 69.2401]\n\n        # Yandex Geocoding API orqali manzilni manzilga o'tkazish\n        geocoding_url = \"https://geocode-maps.yandex.ru/1.x/\"\n        params = {\n            'apikey': app.config['YANDEX_GEOCODER_API'],\n            'geocode': f\"{address}, Toshkent, O'zbekiston\",\n            'format': 'json',\n            'results': 1\n        }\n\n        response = requests.get(geocoding_url, params=params, timeout=5)\n\n        if response.status_code == 200:\n            data = response.json()\n            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])\n\n            if geo_objects:\n                # Koordinatalarni olish\n                point = geo_objects[0]['GeoObject']['Point']['pos'].split()\n                dest_coords = [float(point[1]), float(point[0])]  # lat, lng formatida\n\n                # To'g'ri chiziq bo'yicha masofa hisoblash (Haversine formula)\n                import math\n\n                lat1, lng1 = math.radians(restaurant_coords[0]), math.radians(restaurant_coords[1])\n                lat2, lng2 = math.radians(dest_coords[0]), math.radians(dest_coords[1])\n\n                dlat = lat2 - lat1\n                dlng = lng2 - lng1\n\n                a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2\n                c = 2 * math.asin(math.sqrt(a))\n                distance_km = 6371 * c  # Yer radiusi 6371 km\n\n                return round(min(50, max(0.5, distance_km)), 1)\n            else:\n                # Agar Yandex API manzilni topa olmasa, fallback\n                return calculate_distance_fallback(address)\n\n        else:\n            app_logger.error(f\"Yandex Geocoding API distance error: {response.status_code} - {response.text}\")\n            return calculate_distance_fallback(address) # Agar API xato bersa, fallback\n\n    except Exception as e:\n        app_logger.error(f\"Masofa hisoblashda umumiy xatolik: {str(e)}\")\n        return calculate_distance_fallback(address) # Umumiy xatolikda fallback\n\ndef calculate_distance_fallback(address):\n    \"\"\"Masofa hisoblash uchun fallback funksiyasi\"\"\"\n    address_lower = address.lower()\n    if 'toshkent' in address_lower or 'алмазар' in address_lower or 'olmazor' in address_lower:\n        if any(word in address_lower for word in ['chilonzor', 'olmazor', 'shayxontohur']):\n            return 8.0\n        elif any(word in address_lower for word in ['yunusobod', 'yashnobod']):\n            return 12.0\n        elif any(word in address_lower for word in ['sergeli', 'bektemir']):\n            return 15.0\n        else:\n            return 5.0\n    elif 'sirdaryo' in address_lower or 'jizzax' in address_lower:\n        return 20.0\n    elif 'samarqand' in address_lower:\n        return 30.0\n    else:\n        return 7.0 # Umumiy taxminiy qiymat\n\n\ndef find_nearest_branch(user_latitude, user_longitude):\n    \"\"\"Foydalanuvchiga eng yaqin filialni topish\"\"\"\n    import math\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM branches WHERE is_active = 1\")\n    branches_raw = cur.fetchall() or [] # Ensure branches_raw is a list\n    conn.close()\n\n    if not branches_raw:\n        return None\n\n    nearest_branch = None\n    min_distance = float('inf')\n\n    for branch_row in branches_raw:\n        try:\n            # Safe access to branch data, assuming branch_row is a dictionary-like object from fetchall\n            branch = dict(branch_row)\n\n            # Ensure coordinates and radius are valid numbers\n            branch_lat = float(branch.get('latitude', 0)) if branch.get('latitude') is not None else 0\n            branch_lng = float(branch.get('longitude', 0)) if branch.get('longitude') is not None else 0\n            delivery_radius = float(branch.get('delivery_radius', 15.0)) if branch.get('delivery_radius') is not None else 15.0\n\n            if not branch_lat or not branch_lng:\n                continue # Skip if coordinates are missing or invalid\n\n            # Haversine formula bilan masofa hisoblash\n            lat1, lng1 = math.radians(user_latitude), math.radians(user_longitude)\n            lat2, lng2 = math.radians(branch_lat), math.radians(branch_lng)\n\n            dlat = lat2 - lat1\n            dlng = lng2 - lng1\n\n            a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2\n            c = 2 * math.asin(math.sqrt(a))\n            distance = 6371 * c  # Yer radiusi 6371 km\n\n            if distance < min_distance and distance <= delivery_radius:\n                min_distance = distance\n                nearest_branch = {\n                    'branch': branch,\n                    'distance': round(distance, 2)\n                }\n        except (ValueError, TypeError, KeyError, IndexError) as e:\n            app_logger.warning(f\"Filial ma'lumotlarini qayta ishlashda xatolik (ID: {branch_row.get('id', 'N/A')}): {str(e)}\")\n            continue # Skip this branch if error occurs\n\n    return nearest_branch\n\ndef calculate_delivery_cost_and_time(distance_km):\n    \"\"\"Masofa bo'yicha yetkazib berish narxi va vaqtini hisoblash\"\"\"\n    # 1 km uchun 10000 so'm, 2 km uchun 20000 so'm\n    base_price = 10000\n    price = distance_km * base_price\n\n    # 1 km taxminan 10 daqiqada\n    delivery_time_minutes = max(10, int(distance_km * 10))\n\n    return round(price), delivery_time_minutes\n\ndef auto_calculate_courier_delivery_price(distance_km):\n    \"\"\"Kuryer uchun avtomatik yetkazish narxini hisoblash\"\"\"\n    # Asosiy narx: 1 km uchun 8000 so'm\n    base_rate = 8000\n\n    # Masofa bo'yicha narx hisoblash\n    distance_price = distance_km * base_rate\n\n    # Minimum narx 15000 so'm\n    minimum_price = 15000\n\n    # Maksimum narx 50000 so'm (juda uzoq masofalar uchun)\n    maximum_price = 50000\n\n    # Yakuniy narx\n    final_price = max(minimum_price, min(distance_price, maximum_price))\n\n    # Yetkazish vaqti: 1 km = 8 daqiqa (shahar trafigi hisobga olingan)\n    delivery_time = max(15, int(distance_km * 8))\n\n    return round(final_price), delivery_time\n\ndef get_branch_average_rating(branch_id):\n    \"\"\"Filial uchun o'rtacha bahoni hisoblash\"\"\"\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Filial uchun berilgan baholarni olish (menu_item_id = -branch_id)\n            cur.execute(\"\"\"\n                SELECT AVG(CAST(rating AS REAL)) as avg_rating, COUNT(*) as total_ratings\n                FROM ratings\n                WHERE menu_item_id = ?\n            \"\"\", (-branch_id,))\n\n            result = cur.fetchone()\n\n            if result and result[0] is not None:\n                # Xavfsiz type conversion\n                try:\n                    avg_rating = float(str(result[0])) if result[0] is not None else 0.0\n                    total_ratings = int(str(result[1])) if result[1] is not None else 0\n                except (ValueError, TypeError):\n                    avg_rating = 0.0\n                    total_ratings = 0\n\n                return {\n                    'average_rating': round(avg_rating, 1),\n                    'total_ratings': total_ratings\n                }\n\n        return {\n            'average_rating': 0.0,\n            'total_ratings': 0\n        }\n\n    except Exception as e:\n        app_logger.error(f\"Filial bahosini hisoblashda xatolik: {str(e)}\")\n        return {\n            'average_rating': 0.0,\n            'total_ratings': 0\n        }\n\ndef generate_qr_code(receipt_data):\n    \"\"\"Chek uchun QR kod yaratish\"\"\"\n    # Soliq.uz uchun chek ma'lumotlari\n    qr_data = {\n        \"receipt_number\": receipt_data.get('receipt_number', 'N/A'),\n        \"total_amount\": receipt_data.get('total_amount', 0.0),\n        \"cashback_amount\": receipt_data.get('cashback_amount', 0.0),\n        \"date\": receipt_data.get('receipt_created', '')[:10],\n        \"time\": receipt_data.get('receipt_created', '')[11:19],\n        \"restaurant\": \"O'zbek Milliy Taomlar Restorani\",\n        \"inn\": \"123456789\",  # Restoran INN raqami\n        \"cashback_percent\": receipt_data.get('cashback_percentage', 1.0)\n    }\n\n    # JSON formatda ma'lumotlarni tayyorlash\n    qr_text = json.dumps(qr_data, ensure_ascii=False)\n\n    # QR kod yaratish\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=10,\n        border=4,\n    )\n    qr.add_data(qr_text)\n    qr.make(fit=True)\n\n    # QR kod rasmini yaratish\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n    # Base64 formatga o'tkazish\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n\n    return img_str\n\ndef get_session_id():\n    \"\"\"Session ID yaratish yoki olish - yaxshilangan versiya\"\"\"\n    try:\n        # Session mavjudligini tekshirish\n        if not session or 'session_id' not in session or not session['session_id'] or session['session_id'] == 'None':\n            import uuid as uuid_module\n            session_id = str(uuid_module.uuid4())\n            session['session_id'] = session_id\n            session.permanent = True  # Session ni permanent qilish\n\n            # Session timeout belgilash\n            session.permanent_session_lifetime = datetime.timedelta(days=30)\n\n            app_logger.info(f\"Yangi session yaratildi: {session_id[:8]}...\")\n            return session_id\n\n        # Mavjud session ID ni validatsiya qilish\n        session_id = session['session_id']\n        if len(session_id) < 10:  # UUID minimal uzunlik tekshiruvi\n            import uuid as uuid_module\n            new_session_id = str(uuid_module.uuid4())\n            session['session_id'] = new_session_id\n            app_logger.warning(f\"Noto'g'ri session ID tuzatildi: {session_id} -> {new_session_id[:8]}...\")\n            return new_session_id\n\n        return session_id\n\n    except Exception as e:\n        app_logger.error(f\"Session ID yaratishda xatolik: {str(e)}\")\n        # Fallback - oddiy UUID\n        import uuid as uuid_module\n        fallback_id = str(uuid_module.uuid4())\n        try:\n            session['session_id'] = fallback_id\n            session.permanent = True\n        except:\n            pass  # Agar session ishlamasa ham davom etish\n        return fallback_id\n\ndef get_cart_items(conn, session_id, user_id=None):\n    \"\"\"Savatchadagi mahsulotlarni olish - xavfsizligi yuqori\"\"\"\n    if not conn:\n        app_logger.error(\"Database connection not available in get_cart_items\")\n        return []\n\n    cur = conn.cursor()\n\n    try:\n        # Parametrlarni tekshirish\n        if not session_id and not user_id:\n            app_logger.warning(\"Neither session_id nor user_id provided to get_cart_items\")\n            return []\n\n        if user_id:\n            # Asosiy so'rov\n            cur.execute(\"\"\"\n                SELECT ci.id, ci.menu_item_id, mi.name, mi.price, ci.quantity,\n                       COALESCE(mi.discount_percentage, 0) as discount_percentage,\n                       CASE\n                           WHEN COALESCE(mi.discount_percentage, 0) > 0\n                           THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                           ELSE mi.price * ci.quantity\n                       END as total\n                FROM cart_items ci\n                JOIN menu_items mi ON ci.menu_item_id = mi.id\n                WHERE ci.user_id = ? AND mi.available = 1\n                ORDER BY ci.created_at DESC\n            \"\"\", (user_id,))\n        else:\n            cur.execute(\"\"\"\n                SELECT ci.id, ci.menu_item_id, mi.name, mi.price, ci.quantity,\n                       COALESCE(mi.discount_percentage, 0) as discount_percentage,\n                       CASE\n                           WHEN COALESCE(mi.discount_percentage, 0) > 0\n                           THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                           ELSE mi.price * ci.quantity\n                       END as total\n                FROM cart_items ci\n                JOIN menu_items mi ON ci.menu_item_id = mi.id\n                WHERE ci.session_id = ? AND mi.available = 1\n                ORDER BY ci.created_at DESC\n            \"\"\", (session_id,))\n\n        results = cur.fetchall()\n\n        # Agar natijalar bo'lmasa, bo'sh list qaytarish\n        if not results:\n            return []\n\n        # Row obyektlarini dict formatiga o'tkazish\n        cart_items = []\n        for row in results:\n            try:\n                # SQLite Row obyektini dict ga o'tkazish\n                if hasattr(row, 'keys'):\n                    item_dict = dict(zip(row.keys(), row))\n                else:\n                    # Tuple holatida bo'lsa\n                    item_dict = {\n                        'id': row[0],\n                        'menu_item_id': row[1],\n                        'name': row[2],\n                        'price': row[3],\n                        'quantity': row[4],\n                        'discount_percentage': row[5] if row[5] is not None else 0,\n                        'total': row[6] if len(row) > 6 else row[3] * row[4]\n                    }\n\n                # discount_percentage ni tekshirish va None bo'lsa 0 qilib qo'yish\n                if item_dict.get('discount_percentage') is None:\n                    item_dict['discount_percentage'] = 0\n\n                cart_items.append(item_dict)\n            except Exception as row_error:\n                app_logger.error(f\"Savatcha element o'qishda xatolik: {str(row_error)}\")\n                continue\n\n        return cart_items\n\n    except Exception as e:\n        app_logger.error(f\"Savatcha ma'lumotlarini olishda xatolik: {str(e)}\")\n        return []\n\ndef get_cart_total(conn, session_id, user_id=None):\n    \"\"\"Savatchaning umumiy summasini hisoblash\"\"\"\n    cur = conn.cursor()\n    if user_id:\n        cur.execute(\"\"\"\n            SELECT SUM(\n                CASE\n                    WHEN COALESCE(mi.discount_percentage, 0) > 0\n                    THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                    ELSE mi.price * ci.quantity\n                END\n            )\n            FROM cart_items ci\n            JOIN menu_items mi ON ci.menu_item_id = mi.id\n            WHERE ci.user_id = ?\n        \"\"\", (user_id,))\n    else:\n        cur.execute(\"\"\"\n            SELECT SUM(\n                CASE\n                    WHEN COALESCE(mi.discount_percentage, 0) > 0\n                    THEN (mi.price * (100 - COALESCE(mi.discount_percentage, 0)) / 100) * ci.quantity\n                    ELSE mi.price * ci.quantity\n                END\n            )\n            FROM cart_items ci\n            JOIN menu_items mi ON ci.menu_item_id = mi.id\n            WHERE ci.session_id = ?\n        \"\"\", (session_id,))\n    result = cur.fetchone()[0]\n    return result if result else 0\n\ndef clear_cart(conn, session_id, user_id=None):\n    \"\"\"Savatchani tozalash\"\"\"\n    cur = conn.cursor()\n    if user_id:\n        cur.execute(\"DELETE FROM cart_items WHERE user_id = ?\", (user_id,))\n    else:\n        cur.execute(\"DELETE FROM cart_items WHERE session_id = ?\", (session_id,))\n    conn.commit()\n\ndef save_user_to_json(name, ticket_no, order_time, order_items):\n    \"\"\"Foydalanuvchi ma'lumotlarini users.json fayliga saqlash\"\"\"\n    users_file = 'users.json'\n\n    # Yangi foydalanuvchi ma'lumotlari\n    user_data = {\n        'ism': name,\n        'buyurtma_raqami': ticket_no,\n        'buyurtma_vaqti': order_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n        'buyurtma_mahsulotlari': order_items\n    }\n\n    # Mavjud ma'lumotlarni o'qish\n    users_list = []\n    if os.path.exists(users_file):\n        try:\n            with open(users_file, 'r', encoding='utf-8') as f:\n                users_list = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            users_list = []\n\n    # Yangi ma'lumotni qo'shish\n    users_list.append(user_data)\n\n    # Faylga saqlash\n    with open(users_file, 'w', encoding='utf-8') as f:\n        json.dump(users_list, f, ensure_ascii=False, indent=2)\n\ndef save_staff_to_json(first_name, last_name, birth_date, phone, staff_id, register_time):\n    \"\"\"Xodim ma'lumotlarini employees.json fayliga saqlash\"\"\"\n    employees_file = 'employees.json'\n\n    # Yangi xodim ma'lumotlari\n    employee_data = {\n        'id': staff_id,\n        'ism': first_name,\n        'familiya': last_name,\n        'tugulgan_sana': birth_date,\n        'telefon': phone,\n        'royxatdan_otgan_vaqti': register_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    }\n\n    # Mavjud ma'lumotlarni o'qish\n    employees_list = []\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees_list = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            employees_list = []\n\n    # Yangi ma'lumotni qo'shish\n    employees_list.append(employee_data)\n\n    # Faylga saqlash\n    with open(employees_file, 'w', encoding='utf-8') as f:\n        json.dump(employees_list, f, ensure_ascii=False, indent=2)\n\n# ---------- Routes ----------\n\n@app.route(\"/\")\ndef index():\n    \"\"\"Bosh sahifa - xavfsiz error handling bilan\"\"\"\n    try:\n        # Session ID ni olish va tekshirish\n        session_id = get_session_id()\n\n        # Asosiy sahifani render qilish\n        return render_template(\"index.html\")\n    except Exception as e:\n        app_logger.error(f\"Index sahifasida xatolik: {str(e)}\")\n        # Emergency fallback\n        return f\"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head><title>Restaurant</title></head>\n        <body>\n            <h1>O'zbek Milliy Taomlar Restorani</h1>\n            <p>Sahifa yuklashda xatolik yuz berdi.</p>\n            <a href=\"/menu\">Menyu</a>\n        </body>\n        </html>\n        \"\"\", 500\n\n@app.route(\"/system-management-panel-x8k2m\")\ndef admin_index():\n    # Super admin yoki staff kirgan bo'lishi kerak\n    if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n        flash(\"Bu sahifaga kirish uchun admin huquqi kerak.\", \"error\")\n        return redirect(url_for(\"index\"))\n    return render_template(\"admin_index.html\")\n\n@app.route(\"/display-monitor-tv-screen-z9p4n\")\ndef admin_monitor():\n    # Super admin yoki staff kirgan bo'lishi kerak\n    if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n        flash(\"Bu sahifaga kirish uchun admin huquqi kerak.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    cleanup_expired_orders()\n\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Waiting orders - kutayotgan buyurtmalar\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='waiting'\n                GROUP BY o.id\n                ORDER BY o.eta_time ASC\n            \"\"\")\n            waiting = cur.fetchall() or []\n\n            # Ready orders - tayyor buyurtmalar\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='ready'\n                GROUP BY o.id\n                ORDER BY o.eta_time ASC\n            \"\"\")\n            ready = cur.fetchall() or []\n\n            # Served orders in last 5 minutes - so'nggi 5 daqiqada berilgan buyurtmalar\n            five_min_ago = (get_current_time() - datetime.timedelta(minutes=5)).isoformat()\n            cur.execute(\"\"\"SELECT o.*,\n                       GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n                FROM orders o\n                LEFT JOIN order_details od ON o.id = od.order_id\n                LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n                WHERE o.status='served' AND o.created_at >= ?\n                GROUP BY o.id\n                ORDER BY o.created_at DESC\n            \"\"\", (five_min_ago,))\n            served_recent = cur.fetchall() or []\n\n            return render_template('admin_monitor.html',\n                                 waiting=[dict(w) for w in waiting],\n                                 ready=[dict(r) for r in ready],\n                                 served_recent=[dict(s) for s in served_recent])\n\n    except Exception as e:\n        app_logger.error(f\"Monitor sahifasida xatolik: {str(e)}\")\n        return render_template('admin_monitor.html',\n                             waiting=[],\n                             ready=[],\n                             served_recent=[])\n\n# Advanced decorators\ndef login_required(f):\n    \"\"\"Enhanced login decorator\"\"\"\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        if not session.get(\"super_admin\") and not session.get(\"staff_id\"):\n            if request.is_json:\n                return jsonify({\"error\": \"Authorization required\"}), 401\n            return redirect(url_for(\"staff_login\"))\n        return f(*args, **kwargs)\n    return wrapper\n\ndef rate_limit(max_requests=100, window=3600):\n    \"\"\"Rate limiting decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            identifier = request.remote_addr\n            if not rate_limiter.is_allowed(identifier, max_requests, window):\n                if request.is_json:\n                    return jsonify({\"error\": \"Rate limit exceeded\"}), 429\n                flash(\"Juda ko'p so'rov yuborildi. Biroz kuting.\", \"error\")\n                return redirect(url_for(\"index\"))\n            return f(*args, **kwargs)\n        return wrapper\n    return decorator\n\ndef cache_result(ttl=300):\n    \"\"\"Result caching decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            # Cache key yaratish\n            cache_key = f\"{f.__name__}:{hashlib.md5(str(args + tuple(kwargs.items())).encode()).hexdigest()}\"\n\n            # Cache dan olishga harakat qilish\n            cached_result = cache_manager.get(cache_key)\n            if cached_result is not None:\n                return cached_result\n\n            # Yangi natija hisoblash va cache ga saqlash\n            result = f(*args, **kwargs)\n            cache_manager.set(cache_key, result, ttl)\n            return result\n        return wrapper\n    return decorator\n\ndef async_task(f):\n    \"\"\"Asynchronous task decorator\"\"\"\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        return executor.submit(f, *args, **kwargs)\n    return wrapper\n\ndef validate_json(required_fields=None):\n    \"\"\"JSON validation decorator\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if not request.is_json:\n                return jsonify({\"error\": \"JSON format required\"}), 400\n\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"Empty JSON\"}), 400\n\n            if required_fields:\n                missing_fields = [field for field in required_fields if field not in data]\n                if missing_fields:\n                    return jsonify({\"error\": f\"Missing fields: {missing_fields}\"}), 400\n\n            return f(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# Performance monitoring decorator ni olib tashlaymiz - conflict keltiryapti\n\n# ---- MENU ----\n@app.route(\"/menu\")\n@rate_limit(max_requests=500, window=60)\n@cache_result(ttl=120)\ndef menu():\n    \"\"\"Optimized menu endpoint\"\"\"\n    try:\n        # Cache dan menu ma'lumotlarini olish\n        cached_menu = cache_manager.get(\"menu_items_active\")\n\n        if not cached_menu:\n            menu_items = execute_query(\n                \"\"\"SELECT m.*, COALESCE(AVG(r.rating), 0) as avg_rating, COUNT(r.rating) as rating_count\n                   FROM menu_items m\n                   LEFT JOIN ratings r ON m.id = r.menu_item_id\n                   WHERE m.available = 1\n                   GROUP BY m.id\n                   ORDER BY m.category, m.orders_count DESC, m.name\"\"\",\n                fetch_all=True\n            )\n\n            # Cache ga saqlash\n            cache_manager.set(\"menu_items_active\", menu_items, 120)\n        else:\n            menu_items = cached_menu\n\n        # Kategoriyalar bo'yicha ajratish\n        foods = [item for item in menu_items if item['category'] == 'food']\n        drinks = [item for item in menu_items if item['category'] == 'drink']\n\n        # Foydalanuvchi sevimlilarini olish\n        favorites = []\n        if session.get('user_id'):\n            favorites_raw = execute_query(\n                \"SELECT menu_item_id FROM favorites WHERE user_id = ?\",\n                (session['user_id'],),\n                fetch_all=True\n            )\n            favorites = [fav['menu_item_id'] for fav in favorites_raw] if favorites_raw else []\n\n\n        return render_template(\"menu.html\",\n                             foods=foods,\n                             drinks=drinks,\n                             favorites=favorites,\n                             current_page='menu')\n\n    except Exception as e:\n        app_logger.error(f\"Menu endpoint error: {str(e)}\")\n        # Fallback - oddiy menu\n        try:\n            menu_items = execute_query(\n                \"SELECT * FROM menu_items WHERE available = 1 ORDER BY category, name\",\n                fetch_all=True\n            )\n            foods = [item for item in menu_items if item['category'] == 'food']\n            drinks = [item for item in menu_items if item['category'] == 'drink']\n            return render_template(\"menu.html\", foods=foods, drinks=drinks, current_page='menu')\n        except:\n            flash(\"Menu yuklashda xatolik yuz berdi.\", \"error\")\n            return redirect(url_for(\"index\"))\n\n@app.route(\"/add_to_cart\", methods=[\"POST\"])\ndef add_to_cart():\n    try:\n        menu_item_id = request.form.get(\"menu_item_id\")\n        quantity = int(request.form.get(\"quantity\", 1))\n\n        if not menu_item_id:\n            if request.is_json or request.headers.get('Content-Type') == 'application/json':\n                return jsonify({\"success\": False, \"message\": \"Mahsulot tanlanmadi\"})\n            flash(\"Mahsulot tanlanmadi.\", \"error\")\n            return redirect(url_for(\"menu\"))\n\n        session_id = get_session_id()\n        user_id = session.get(\"user_id\")\n\n        # Cache dan savatchani tozalash\n        cache_manager.delete(f\"cart_count_{user_id}_{session_id}\")\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Mavjudligini tekshirish\n        if user_id:\n            cur.execute(\"SELECT * FROM cart_items WHERE user_id = ? AND menu_item_id = ?\", (user_id, menu_item_id))\n        else:\n            cur.execute(\"SELECT * FROM cart_items WHERE session_id = ? AND menu_item_id = ?\", (session_id, menu_item_id))\n\n        existing = cur.fetchone()\n        now = get_current_time().isoformat()\n\n        if existing:\n            # Mavjud bo'lsa miqdorni oshirish - SQLite Row obyektini xavfsiz dict ga aylantirish\n            try:\n                if hasattr(existing, 'keys'):\n                    existing_dict = dict(existing)\n                elif isinstance(existing, (tuple, list)) and len(existing) > 0:\n                    existing_dict = {'id': existing[0]}\n                else:\n                    existing_dict = {'id': 1}  # Fallback\n\n                cur.execute(\"UPDATE cart_items SET quantity = quantity + ? WHERE id = ?\", (quantity, existing_dict['id']))\n            except Exception as cart_error:\n                app_logger.error(f\"Cart update error: {str(cart_error)}\")\n                # Yangi element qo'shish\n                if user_id:\n                    cur.execute(\"INSERT INTO cart_items (user_id, session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?, ?)\",\n                               (user_id, session_id, menu_item_id, quantity, now))\n                else:\n                    cur.execute(\"INSERT INTO cart_items (session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?)\",\n                               (session_id, menu_item_id, quantity, now))\n        else:\n            # Yangi qo'shish - har doim session_id ni ham berish\n            if user_id:\n                cur.execute(\"INSERT INTO cart_items (user_id, session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?, ?)\",\n                           (user_id, session_id, menu_item_id, quantity, now))\n            else:\n                cur.execute(\"INSERT INTO cart_items (session_id, menu_item_id, quantity, created_at) VALUES (?, ?, ?, ?)\",\n                           (session_id, menu_item_id, quantity, now))\n\n        conn.commit()\n\n        # Yangi cart count ni olish\n        if user_id:\n            cur.execute(\"SELECT COALESCE(SUM(quantity), 0) as total_count FROM cart_items WHERE user_id = ?\", (user_id,))\n        else:\n            cur.execute(\"SELECT COALESCE(SUM(quantity), 0) as total_count FROM cart_items WHERE session_id = ?\", (session_id,))\n\n        cart_result = cur.fetchone()\n        if hasattr(cart_result, 'keys'):\n            cart_count = cart_result['total_count']\n        else:\n            cart_count = cart_result[0] if cart_result else 0\n        conn.close()\n\n        if request.is_json or request.headers.get('Content-Type') == 'application/json':\n            return jsonify({\"success\": True, \"message\": \"Mahsulot qo'shildi\", \"cart_count\": cart_count})\n\n        flash(\"Mahsulot savatchaga qo'shildi!\", \"success\")\n        return redirect(url_for(\"menu\"))\n\n    except Exception as e:\n        app_logger.error(f\"Add to cart error: {str(e)}\")\n        if request.is_json or request.headers.get('Content-Type') == 'application/json':\n            return jsonify({\"success\": False, \"message\": \"Xatolik yuz berdi\"})\n        flash(\"Savatchaga qo'shishda xatolik yuz berdi.\", \"error\")\n        return redirect(url_for(\"menu\"))\n\n@app.route(\"/cart\")\ndef cart():\n    session_id = get_session_id()\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n\n    try:\n        # Foydalanuvchi ma'lumotlarini olish va session ga yuklash\n        if user_id:\n            cur = conn.cursor()\n            cur.execute(\"SELECT phone, address, address_latitude, address_longitude, first_name, last_name FROM users WHERE id = ?\", (user_id,))\n            user_profile = cur.fetchone()\n\n            if user_profile:\n                session['user_phone'] = user_profile['phone'] or ''\n                session['user_address'] = user_profile['address'] or ''\n                session['user_address_latitude'] = user_profile['address_latitude'] or ''\n                session['user_address_longitude'] = user_profile['address_longitude'] or ''\n                session['user_first_name'] = user_profile['first_name'] or ''\n                session['user_last_name'] = user_profile['last_name'] or ''\n\n        # Savatcha ma'lumotlarini olish\n        cart_items = get_cart_items(conn, session_id, user_id)\n        total = get_cart_total(conn, session_id, user_id)\n\n        conn.close()\n        return render_template(\"cart.html\", cart_items=cart_items or [], total=total or 0)\n\n    except Exception as e:\n        app_logger.error(f\"Cart sahifasida xatolik: {str(e)}\")\n        conn.close()\n        return render_template(\"cart.html\", cart_items=[], total=0)\n\n@app.route(\"/remove_from_cart/<int:cart_item_id>\", methods=[\"POST\"])\ndef remove_from_cart(cart_item_id):\n    session_id = get_session_id()\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    if user_id:\n        cur.execute(\"DELETE FROM cart_items WHERE id = ? AND user_id = ?\", (cart_item_id, user_id))\n    else:\n        cur.execute(\"DELETE FROM cart_items WHERE id = ? AND session_id = ?\", (cart_item_id, session_id))\n\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot savatchadan olib tashlandi.\", \"success\")\n    return redirect(url_for(\"cart\"))\n\n# ---- USER LOGIN & REGISTER ----\n\n@app.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"\").strip()\n        last_name = request.form.get(\"last_name\", \"\").strip()\n        email = request.form.get(\"email\", \"\").strip()\n        phone = request.form.get(\"phone\", \"\").strip()\n        address = request.form.get(\"address\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n        confirm_password = request.form.get(\"confirm_password\", \"\")\n\n        if not all([first_name, last_name, email, password, confirm_password]):\n            flash(\"Majburiy maydonlarni to'ldiring.\", \"error\")\n            return redirect(url_for(\"register\"))\n\n        if password != confirm_password:\n            flash(\"Parollar mos kelmaydi.\", \"error\")\n            return redirect(url_for(\"register\"))\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Email mavjudligini tekshirish\n        cur.execute(\"SELECT id FROM users WHERE email = ?\", (email,))\n        if cur.fetchone():\n            flash(\"Bu email allaqachon ro'yxatdan o'tgan.\", \"error\")\n            conn.close()\n            return redirect(url_for(\"register\"))\n\n        # Xarita koordinatalari\n        address_latitude = request.form.get(\"address_latitude\", \"\")\n        address_longitude = request.form.get(\"address_longitude\", \"\")\n\n        # Yangi foydalanuvchi yaratish\n        password_hash = generate_password_hash(password)\n        now = get_current_time().isoformat()\n\n        cur.execute(\"\"\"\n            INSERT INTO users (first_name, last_name, email, phone, address, password_hash, created_at)\n            VALUES (?, ?, ?, ?, ?, ?, ?)\n        \"\"\", (first_name, last_name, email, phone, address, password_hash, now))\n\n        conn.commit()\n        user_id = cur.lastrowid\n        conn.close()\n\n        # Avtomatik tizimga kiritish\n        session[\"user_id\"] = user_id\n        session[\"user_name\"] = f\"{first_name} {last_name}\"\n        session[\"user_email\"] = email\n        session['interface_language'] = 'uz'  # Default til\n        session['font_size'] = 'medium'       # Default font size\n        session['dark_theme'] = False         # Default theme\n\n        flash(f\"Muvaffaqiyatli ro'yxatdan o'tdingiz! Xush kelibsiz, {first_name}!\", \"success\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"register.html\")\n\n@app.route(\"/profile\")\ndef profile():\n    if not session.get(\"user_id\"):\n        flash(\"Profilni ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    try:\n        # Foydalanuvchi ma'lumotlarini olish\n        cur.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n        user = cur.fetchone()\n\n        if not user:\n            conn.close()\n            flash(\"Foydalanuvchi ma'lumotlari topilmadi.\", \"error\")\n            return redirect(url_for(\"logout\"))\n\n        # Foydalanuvchi buyurtmalar tarixi va umumiy summa\n        cur.execute(\"\"\"\n            SELECT o.*,\n                   COALESCE(r.total_amount, 0) as total_amount,\n                   GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n            FROM orders o\n            LEFT JOIN receipts r ON o.id = r.order_id\n            LEFT JOIN order_details od ON o.id = od.order_id\n            LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n            WHERE o.user_id = ?\n            GROUP BY o.id\n            ORDER BY o.created_at DESC\n            LIMIT 10\n        \"\"\", (user_id,))\n        orders = cur.fetchall()\n\n        conn.close()\n\n        return render_template(\"profile.html\", user=user, orders=orders)\n\n    except Exception as e:\n        conn.close()\n        logging.error(f\"Profile sahifasida xatolik: {str(e)}\")\n        flash(\"Profilni yuklashda xatolik yuz berdi.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n@app.route(\"/update_profile\", methods=[\"POST\"])\ndef update_profile():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    first_name = request.form.get(\"first_name\", \"\").strip()\n    last_name = request.form.get(\"last_name\", \"\").strip()\n    email = request.form.get(\"email\", \"\").strip()\n    phone = request.form.get(\"phone\", \"\").strip()\n\n    if not all([first_name, last_name, email]):\n        flash(\"Ism, familiya va email majburiy.\", \"error\")\n        return redirect(url_for(\"profile\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Email takrorlanishini tekshirish\n    cur.execute(\"SELECT id FROM users WHERE email = ? AND id != ?\", (email, user_id))\n    if cur.fetchone():\n        flash(\"Bu email allaqachon ishlatilmoqda.\", \"error\")\n        conn.close()\n        return redirect(url_for(\"profile\"))\n\n    # Ma'lumotlarni yangilash\n    cur.execute(\"\"\"\n        UPDATE users\n        SET first_name = ?, last_name = ?, email = ?, phone = ?\n        WHERE id = ?\n    \"\"\", (first_name, last_name, email, phone, user_id))\n\n    conn.commit()\n    conn.close()\n\n    # Session ma'lumotlarini yangilash\n    session[\"user_name\"] = f\"{first_name} {last_name}\"\n    session[\"user_email\"] = email\n\n    flash(\"Profil muvaffaqiyatli yangilandi!\", \"success\")\n    return redirect(url_for(\"profile\"))\n\n@app.route(\"/update_address\", methods=[\"POST\"])\ndef update_address():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    address = request.form.get(\"address\", \"\").strip()\n    address_latitude = request.form.get(\"address_latitude\", \"\")\n    address_longitude = request.form.get(\"address_longitude\", \"\")\n\n    if not address:\n        flash(\"Manzilni xaritadan tanlang.\", \"error\")\n        return redirect(url_for(\"profile\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Manzilni yangilash\n    cur.execute(\"\"\"\n        UPDATE users\n        SET address = ?, address_latitude = ?, address_longitude = ?\n        WHERE id = ?\n    \"\"\", (address, address_latitude if address_latitude else None,\n          address_longitude if address_longitude else None, user_id))\n\n    conn.commit()\n    conn.close()\n\n    flash(\"Manzil muvaffaqiyatli yangilandi!\", \"success\")\n    return redirect(url_for(\"profile\"))\n\n@app.route(\"/change_password\", methods=[\"POST\"])\ndef change_password():\n    if not session.get(\"user_id\"):\n        flash(\"Tizimga kiring.\", \"error\")\n        return redirect(url_for(\"login\"))\n\n    user_id = session.get(\"user_id\")\n    current_password = request.form.get(\"current_password\", \"\")\n    new_password = request.form.get(\"new_password\", \"\")\n    confirm_password = request.form.get(\"confirm_password\", \"\")\n\n    if not all([current_password, new_password, confirm_password]):\n        flash(\"Barcha parol maydonlarini to'ldiring.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    if new_password != confirm_password:\n        flash(\"Yangi parollar mos kelmaydi.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    if len(new_password) < 6:\n        flash(\"Yangi parol kamida 6 ta belgidan iborat bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"profile_settings\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Joriy parolni tekshirish\n    cur.execute(\"SELECT password_hash FROM users WHERE id = ?\", (user_id,))\n    user_hash = cur.fetchone()\n\n    if not user_hash or not check_password_hash(user_hash[\"password_hash\"], current_password):\n        flash(\"Joriy parol noto'g'ri.\", \"error\")\n        conn.close()\n        return redirect(url_for(\"profile_settings\"))\n\n    # Yangi parolni saqlash\n    new_password_hash = generate_password_hash(new_password)\n    cur.execute(\"UPDATE users SET password_hash = ? WHERE id = ?\", (new_password_hash, user_id))\n\n    conn.commit()\n    conn.close()\n\n    flash(\"Parol muvaffaqiyatli o'zgartirildi!\", \"success\")\n    return redirect(url_for(\"profile_settings\"))\n\n@app.route(\"/profile/settings\")\ndef profile_settings():\n    # Har qanday turdagi foydalanuvchi (user, staff, courier, super_admin) kirishi mumkin\n    if not (session.get(\"user_id\") or session.get(\"staff_id\") or session.get(\"courier_id\") or session.get(\"super_admin\")):\n        flash(\"Profil sozlamalarini ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"profile_settings.html\")\n\n@app.route(\"/settings\")\ndef general_settings():\n    # Har qanday turdagi foydalanuvchi (user, staff, courier, super_admin) kirishi mumkin\n    if not (session.get(\"user_id\") or session.get(\"staff_id\") or session.get(\"courier_id\") or session.get(\"super_admin\")):\n        flash(\"Umumi sozlamalarni ko'rish uchun tizimga kiring.\", \"error\")\n        return redirect(url_for(\"index\"))\n\n    return render_template(\"general_settings.html\")\n\n@app.route(\"/logout\")\ndef logout():\n    user_name = session.get(\"user_name\", \"\")\n    session.clear()\n    flash(f\"Tizimdan chiqdingiz. Xayr, {user_name}!\", \"info\")\n    return redirect(url_for(\"index\"))\n\n# ---- PLACE ORDER ----\n@app.route(\"/place_order\", methods=[\"POST\"])\ndef place_order():\n    \"\"\"Buyurtma berish funksiyasi - to'liq qayta ishlangan\"\"\"\n    try:\n        # Rate limiting\n        identifier = request.remote_addr\n        if not rate_limiter.is_allowed(identifier, 20, 300):\n            flash(\"Juda ko'p buyurtma. 5 daqiqa kuting.\", \"error\")\n            return redirect(url_for(\"cart\"))\n\n        # Foydalanuvchi session'dan ismni olish\n        if not session.get(\"user_id\"):\n            flash(\"Buyurtma berish uchun avval tizimga kiring.\", \"error\")\n            return redirect(url_for(\"login\"))\n\n        name = session.get(\"user_name\", \"\")\n        user_id = session.get(\"user_id\")\n\n        if not name:\n            flash(\"Foydalanuvchi ma'lumotlari topilmadi.\", \"error\")\n            return redirect(url_for(\"login\"))\n\n        # Ma'lumotlar bazasi bilan ishash\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Foydalanuvchi profilidan ma'lumotlarni olish\n            cur.execute(\"SELECT phone, address, card_number FROM users WHERE id = ?\", (user_id,))\n            user_profile = cur.fetchone()\n\n            # Session ga profil ma'lumotlarini saqlash\n            if user_profile:\n                session['user_phone'] = user_profile['phone'] or ''\n                session['user_address'] = user_profile['address'] or ''\n                session['user_card_number'] = user_profile['card_number'] or ''\n\n            session_id = get_session_id()\n\n            # Savatchani tekshirish\n            cart_items = get_cart_items(conn, session_id, user_id)\n\n            if not cart_items or len(cart_items) == 0:\n                flash(\"Savatchangiz bo'sh. Avval taom tanlang.\", \"error\")\n                return redirect(url_for(\"menu\"))\n\n            # Formdan ma'lumotlarni xavfsiz olish\n            order_type = request.form.get(\"order_type\", \"dine_in\")\n            delivery_address = request.form.get(\"delivery_address\", \"\").strip()\n            home_address = request.form.get(\"home_address\", \"\").strip()\n            customer_phone_new = request.form.get(\"customer_phone\", \"\").strip()\n            card_number_new = request.form.get(\"card_number\", \"\").strip()\n\n            # Delivery uchun kerakli tekshiruvlar\n            if order_type == \"delivery\":\n                if not delivery_address:\n                    flash(\"Yetkazib berish manzilini kiriting!\", \"error\")\n                    return redirect(url_for(\"cart\"))\n\n                # Telefon tekshiruvi\n                if not session.get('user_phone') and not customer_phone_new:\n                    flash(\"Telefon raqamingizni kiriting!\", \"error\")\n                    return redirect(url_for(\"cart\"))\n\n            # Foydalanuvchi profilini yangilash\n            if home_address:\n                cur.execute(\"UPDATE users SET address = ? WHERE id = ?\", (home_address, user_id))\n                session['user_address'] = home_address\n            if customer_phone_new:\n                cur.execute(\"UPDATE users SET phone = ? WHERE id = ?\", (customer_phone_new, user_id))\n                session['user_phone'] = customer_phone_new\n            if card_number_new:\n                cur.execute(\"UPDATE users SET card_number = ? WHERE id = ?\", (card_number_new, user_id))\n                session['user_card_number'] = card_number_new\n\n            # Buyurtma raqami va vaqt hisoblash\n            tno = next_ticket_no(conn)\n            eta_minutes = calc_eta_minutes(conn)\n            now = get_current_time()\n            eta_time = now + datetime.timedelta(minutes=eta_minutes)\n            total = get_cart_total(conn, session_id, user_id)\n\n            # Delivery uchun qo'shimcha ma'lumotlar\n            delivery_latitude = request.form.get(\"delivery_latitude\", \"\")\n            delivery_longitude = request.form.get(\"delivery_longitude\", \"\")\n            delivery_distance = request.form.get(\"delivery_distance\", 0)\n            delivery_map_url = request.form.get(\"delivery_map_url\", \"\")\n            customer_note = request.form.get(\"customer_note\", \"\")\n\n            # Telefon va karta ma'lumotlarini olish\n            customer_phone = session.get('user_phone', '') or customer_phone_new\n            card_number = session.get('user_card_number', '') or card_number_new\n\n            # Masofa va vaqtni xavfsiz aylantirish\n            try:\n                delivery_distance = float(delivery_distance) if delivery_distance else 0\n            except (ValueError, TypeError):\n                delivery_distance = 0\n\n            # Delivery uchun ETA ni qayta hisoblash\n            if order_type == \"delivery\":\n                courier_delivery_time = 30\n                eta_time = now + datetime.timedelta(minutes=eta_minutes + courier_delivery_time)\n\n            # Branch ID ni xavfsiz olish\n            branch_id = 1\n            try:\n                branch_id = int(request.form.get(\"branch_id\", 1))\n            except (ValueError, TypeError):\n                branch_id = 1\n\n            # Buyurtma yaratish\n            cur.execute(\"\"\"\n                INSERT INTO orders (user_id, customer_name, ticket_no, order_type, status, delivery_address, delivery_distance, delivery_latitude, delivery_longitude, delivery_map_url, customer_note, customer_phone, card_number, branch_id, created_at, eta_time)\n                VALUES (?, ?, ?, ?, 'waiting', ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (user_id, name, tno, order_type, delivery_address, delivery_distance, delivery_latitude, delivery_longitude, delivery_map_url, customer_note, customer_phone, card_number, branch_id, now.isoformat(), eta_time.isoformat()))\n\n            order_id = cur.lastrowid\n\n            # Savatchadagi mahsulotlarni order_details ga ko'chirish\n            order_items_for_json = []\n            total_amount = 0\n\n            for item in cart_items:\n                # Skidka narxini hisoblash\n                discount_percentage = item.get('discount_percentage', 0) or 0\n                final_price = item['price']\n                if discount_percentage > 0:\n                    final_price = item['price'] * (100 - discount_percentage) / 100\n\n                item_total = final_price * item['quantity']\n                total_amount += item_total\n\n                cur.execute(\"\"\"\n                    INSERT INTO order_details (order_id, menu_item_id, quantity, price)\n                    VALUES (?, ?, ?, ?)\n                \"\"\", (order_id, item['menu_item_id'], item['quantity'], final_price))\n\n                # JSON uchun mahsulot ma'lumotlarini to'plash\n                order_items_for_json.append({\n                    'nomi': item['name'],\n                    'miqdori': item['quantity'],\n                    'asl_narxi': item['price'],\n                    'skidka_foizi': discount_percentage,\n                    'yakuniy_narxi': final_price,\n                    'jami': item_total\n                })\n\n            # Chek yaratish\n            receipt_number = f\"R{tno}{now.strftime('%H%M%S')}\"\n            cashback_percentage = 1.0\n            cashback_amount = total_amount * (cashback_percentage / 100)\n\n            cur.execute(\"\"\"\n                INSERT INTO receipts (order_id, receipt_number, total_amount, cashback_amount, cashback_percentage, created_at)\n                VALUES (?, ?, ?, ?, ?, ?);\n            \"\"\", (order_id, receipt_number, total_amount, cashback_amount, cashback_percentage, now.isoformat()))\n\n            # Savatchani tozalash\n            clear_cart(conn, session_id, user_id)\n\n            # Cache ni tozalash\n            cache_manager.delete(f\"cart_count_{user_id}_{session_id}\")\n\n            # Foydalanuvchini JSON fayliga saqlash\n            executor.submit(save_user_to_json, name, tno, now, order_items_for_json)\n\n            flash(\"Buyurtma muvaffaqiyatli berildi!\", \"success\")\n            return redirect(url_for(\"user_success\", ticket_no=tno))\n\n    except Exception as e:\n        app_logger.error(f\"Buyurtma berishda xatolik: {str(e)}\")\n        flash(\"Buyurtma berishda xatolik yuz berdi. Qaytadan urinib ko'ring.\", \"error\")\n        return redirect(url_for(\"cart\"))\n\n@app.route(\"/user\", methods=[\"GET\", \"POST\"])\ndef user_page():\n    # Eski user route ni redirect qilish\n    if request.method == \"POST\":\n        return place_order()\n    return redirect(url_for(\"menu\"))\n\n@app.route(\"/user/success/<int:ticket_no>\")\ndef user_success(ticket_no):\n    conn = get_db()\n    cur = conn.cursor()\n\n    # Buyurtma ma'lumotlarini olish\n    cur.execute(\"SELECT * FROM orders WHERE ticket_no=? ORDER BY id DESC LIMIT 1;\", (ticket_no,))\n    order = cur.fetchone()\n\n    if not order:\n        conn.close()\n        flash(\"Buyurtma topilmadi.\", \"error\")\n        return redirect(url_for(\"menu\"))\n\n    # Buyurtma tafsilotlarini olish\n    cur.execute(\"\"\"\n        SELECT od.*, mi.name\n        FROM order_details od\n        JOIN menu_items mi ON od.menu_item_id = mi.id\n        WHERE od.order_id = ?\n    \"\"\", (order['id'],))\n    order_items = cur.fetchall()\n\n    conn.close()\n\n    # ETA vaqtini formatlash\n    eta_time = datetime.datetime.fromisoformat(order[\"eta_time\"])\n\n    return render_template(\"user_success.html\",\n                         order=order,\n                         order_items=order_items,\n                         eta_hhmm=eta_time.strftime(\"%H:%M\"))\n\n# ---- COURIER AUTH ----\n@app.route(\"/courier-secure-login-k4m7p\", methods=[\"GET\", \"POST\"])\ndef courier_login():\n    if request.method == \"POST\":\n        courier_id = request.form.get(\"courier_id\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n        if not courier_id or not password:\n            flash(\"ID va parolni kiriting.\", \"error\")\n            return redirect(url_for(\"courier_login\"))\n        conn = get_db()\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM couriers WHERE id=?;\", (courier_id,))\n        row = cur.fetchone()\n        conn.close()\n        if row:\n            # Faollik vaqtini yangilash va ishchi soatlarini hisoblash\n            now = get_current_time().isoformat()\n\n            # Yangi connection yaratish\n            conn_update = get_db()\n            cur_update = conn_update.cursor()\n\n            # Agar avvalgi faollik vaqti mavjud bo'lsa, ishchi soatlarni yangilash\n            if row[\"last_activity\"]:\n                try:\n                    last_activity = datetime.datetime.fromisoformat(row[\"last_activity\"])\n                    current_time = get_current_time()\n                    time_diff = current_time - last_activity\n\n                    # Agar 8 soatdan kam bo'lsa, ishchi vaqtga qo'shish\n                    if time_diff.total_seconds() < 28800:  # 8 soat\n                        additional_hours = time_diff.total_seconds() / 3600\n                        cur_update.execute(\"UPDATE couriers SET total_hours = COALESCE(total_hours, 0) + ?, last_activity = ? WHERE id = ?\",\n                                   (additional_hours, now, courier_id))\n                    else:\n                        cur_update.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n                except:\n                    cur_update.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n            else:\n                cur.execute(\"UPDATE couriers SET last_activity = ? WHERE id = ?\", (now, courier_id))\n\n            conn_update.commit()\n            conn_update.close()\n\n        conn.close()\n        if row:\n            # SQLite Row obyektini xavfsiz dict ga aylantirish\n            try:\n                if hasattr(row, 'keys'):\n                    row_dict = dict(row)\n                else:\n                    # Tuple format uchun manual dict yaratish\n                    columns = ['id', 'first_name', 'last_name', 'birth_date', 'phone', 'passport_series', 'passport_number', 'password_hash', 'total_hours', 'deliveries_completed', 'last_activity', 'created_at']\n                    row_dict = {columns[i]: row[i] if i < len(row) else None for i in range(len(columns))}\n            except Exception as dict_error:\n                app_logger.error(f\"Courier row dict conversion error: {str(dict_error)}\")\n                conn.close()\n                flash(\"Database xatoligi yuz berdi.\", \"error\")\n                return redirect(url_for(\"courier_login\"))\n\n            if check_password_hash(row_dict.get(\"password_hash\", \"\"), password):\n                # Login muvaffaqiyatli\n                pass\n            else:\n                conn.close()\n                flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                return redirect(url_for(\"courier_login\"))\n        else:\n            conn.close()\n            flash(\"Kuryer topilmadi.\", \"error\")\n            return redirect(url_for(\"courier_login\"))\n\n        session[\"courier_id\"] = row_dict[\"id\"]\n        session[\"courier_name\"] = f\"{row_dict['first_name']} {row_dict['last_name']}\"\n        return redirect(url_for(\"courier_dashboard\"))\n    return render_template(\"courier_login.html\")\n\n@app.route(\"/courier-register-secure-p8x3m\", methods=[\"GET\", \"POST\"])\ndef courier_register():\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"\").strip()\n        last_name = request.form.get(\"last_name\", \"\").strip()\n        birth_date = request.form.get(\"birth_date\", \"\").strip()\n        phone = request.form.get(\"phone\", \"\").strip()\n        passport_series = request.form.get(\"passport_series\", \"\").strip()\n        passport_number = request.form.get(\"passport_number\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n\n        if not all([first_name, last_name, birth_date, phone, passport_series, passport_number, password]):\n            flash(\"Barcha maydonlarni to'ldiring.\", \"error\")\n            return redirect(url_for(\"courier_register\"))\n\n        conn = get_db()\n        cur = conn.cursor()\n        password_hash = generate_password_hash(password)\n        now = get_current_time()\n        try:\n            cur.execute(\"\"\"\n                INSERT INTO couriers (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n        except sqlite3.OperationalError:\n            # Agar birth_date ustuni mavjud bo'lmasa, uni qo'shish\n            cur.execute(\"ALTER TABLE couriers ADD COLUMN birth_date TEXT;\")\n            cur.execute(\"\"\"\n                INSERT INTO couriers (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n            \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n\n        new_id = cur.lastrowid\n        # ID kamida 5 ta raqamdan iborat bo'lishi uchun\n        if new_id < 10000:\n            cur.execute(\"UPDATE couriers SET id = ? WHERE id = ?\", (10000 + new_id, new_id))\n            new_id = 10000 + new_id\n\n        conn.commit()\n        conn.close()\n\n        flash(f\"Kuryer sifatida ro'yxatdan o'tdingiz. Sizning ID raqamingiz: {new_id}\", \"success\")\n        return redirect(url_for(\"courier_login\"))\n\n    return render_template(\"courier_register.html\")\n\n@app.route(\"/courier/dashboard\")\ndef courier_dashboard():\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    courier_id = session.get(\"courier_id\")\n\n    # Barcha ready delivery buyurtmalar va kuryerga tegishli buyurtmalarni olish\n    cur.execute(\"\"\"\n        SELECT o.*,\n               GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n        FROM orders o\n        LEFT JOIN order_details od ON o.id = od.order_id\n        LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n        WHERE (o.order_type = 'delivery' AND o.status = 'ready')\n           OR (o.courier_id = ? AND o.status IN ('on_way', 'delivered'))\n        GROUP BY o.id\n        ORDER BY\n            CASE\n                WHEN o.status = 'ready' THEN 1\n                WHEN o.status = 'on_way' THEN 2\n                WHEN o.status = 'delivered' THEN 3\n                ELSE 4\n            END,\n            o.created_at ASC\n    \"\"\", (courier_id,))\n    delivery_orders = cur.fetchall()\n\n    # Kuryer statistikasini olish\n    cur.execute(\"SELECT deliveries_completed, total_hours FROM couriers WHERE id = ?\", (courier_id,))\n    courier_stats = cur.fetchone()\n\n    # Faol buyurtmalar sonini olish\n    cur.execute(\"SELECT COUNT(*) FROM orders WHERE courier_id = ? AND status = 'on_way'\", (courier_id,))\n    active_orders = cur.fetchone()[0]\n\n    # Session ga statistikani saqlash\n    if courier_stats:\n        try:\n            # courier_stats tuple yoki Row obyekti bo'lishi mumkin\n            if hasattr(courier_stats, '__getitem__'):\n                session['courier_deliveries'] = courier_stats[0] or 0\n                session['courier_hours'] = round(courier_stats[1] or 0, 1) if courier_stats[1] else 0\n            else:\n                session['courier_deliveries'] = getattr(courier_stats, 'deliveries_completed', 0) or 0\n                session['courier_hours'] = round(getattr(courier_stats, 'total_hours', 0) or 0, 1)\n        except (TypeError, IndexError) as e:\n            logging.error(f\"Kuryer statistikasini o'qishda xatolik: {str(e)}\")\n            session['courier_deliveries'] = 0\n            session['courier_hours'] = 0\n    else:\n        session['courier_deliveries'] = 0\n        session['courier_hours'] = 0\n    session['courier_active_orders'] = active_orders\n\n    conn.close()\n    return render_template(\"courier_dashboard.html\", orders=delivery_orders)\n\n@app.route(\"/courier/order/<int:order_id>/take\", methods=[\"POST\"])\ndef courier_take_order(order_id):\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    courier_id = session.get(\"courier_id\")\n\n    try:\n        with db_pool.get_connection() as conn:\n            cur = conn.cursor()\n\n            # Buyurtma ma'lumotlarini olish\n            cur.execute(\"SELECT * FROM orders WHERE id=? AND status='ready' AND order_type='delivery'\", (order_id,))\n            order = cur.fetchone()\n\n            if order:\n                # Avtomatik narx va vaqt hisoblash\n                distance = float(order['delivery_distance']) if order['delivery_distance'] else 5.0\n                auto_price, auto_delivery_time = auto_calculate_courier_delivery_price(distance)\n\n                # Buyurtmani yangilash\n                cur.execute(\"\"\"\n                    UPDATE orders\n                    SET status='on_way', courier_id=?, courier_price=?, courier_delivery_minutes=?, delivery_price=?\n                    WHERE id=? AND status='ready'\n                \"\"\", (courier_id, auto_price, auto_delivery_time, auto_price, order_id))\n\n                flash(f\"Buyurtma olib ketildi! Avtomatik narx: {auto_price:,} so'm, Vaqt: {auto_delivery_time} daqiqa\", \"success\")\n            else:\n                flash(\"Buyurtma topilmadi yoki allaqachon olingan!\", \"error\")\n\n    except Exception as e:\n        app_logger.error(f\"Courier take order error: {str(e)}\")\n        flash(\"Buyurtmani olishda xatolik yuz berdi.\", \"error\")\n\n    return redirect(url_for(\"courier_dashboard\"))\n\n@app.route(\"/courier/order/<int:order_id>/delivered\", methods=[\"POST\"])\ndef courier_mark_delivered(order_id):\n    if \"courier_id\" not in session:\n        return redirect(url_for(\"courier_login\"))\n\n    courier_id = session.get(\"courier_id\")\n    conn = get_db()\n    cur = conn.cursor()\n\n    cur.execute(\"UPDATE orders SET status='delivered' WHERE id=? AND courier_id=?\", (order_id, courier_id))\n\n    # Kuryerning yetkazib bergan buyurtmalar sonini oshirish\n    cur.execute(\"UPDATE couriers SET deliveries_completed = COALESCE(deliveries_completed, 0) + 1 WHERE id = ?\", (courier_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma yetkazib berildi!\", \"success\")\n    return redirect(url_for(\"courier_dashboard\"))\n\n@app.route(\"/courier/set-price-time\", methods=[\"POST\"])\ndef courier_set_price_time():\n    if \"courier_id\" not in session:\n        return jsonify({\"success\": False, \"message\": \"Kuryer tizimga kirmagan\"}), 401\n\n    data = request.get_json()\n    order_id = data.get(\"order_id\")\n    price = data.get(\"price\")\n    delivery_time = data.get(\"delivery_time\")\n\n    if not all([order_id, price, delivery_time]):\n        return jsonify({\"success\": False, \"message\": \"Barcha maydonlarni to'ldiring\"})\n\n    try:\n        price = float(price)\n        delivery_time = int(delivery_time)\n\n        if price <= 0 or delivery_time <= 0:\n            return jsonify({\"success\": False, \"message\": \"Narx va vaqt musbat bo'lishi kerak\"})\n\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Buyurtma mavjudligini va statusini tekshirish\n        cur.execute(\"SELECT * FROM orders WHERE id = ? AND status = 'ready'\", (order_id,))\n        order = cur.fetchone()\n\n        if not order:\n            conn.close()\n            return jsonify({\"success\": False, \"message\": \"Buyurtma topilmadi yoki tayyor emas\"})\n\n        # Narx va vaqtni yangilash\n        cur.execute(\"\"\"\n            UPDATE orders\n            SET courier_price = ?, courier_delivery_minutes = ?, delivery_price = ?\n            WHERE id = ?\n        \"\"\", (price, delivery_time, price, order_id))\n\n        conn.commit()\n        conn.close()\n\n        return jsonify({\"success\": True, \"message\": \"Narx va vaqt belgilandi\"})\n\n    except Exception as e:\n        logging.error(f\"Kuryer narx belgilashda xatolik: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": \"Server xatoligi\"}), 500\n\n@app.route(\"/courier/logout\")\ndef courier_logout():\n    session.pop(\"courier_id\", None)\n    session.pop(\"courier_name\", None)\n    return redirect(url_for(\"index\"))\n\n# Cart count endpoint moved to top priority section\n\n# ---- STATIC FILE HANDLING ----\n@app.route('/static/<path:filename>')\ndef static_files(filename):\n    \"\"\"Static fayllar uchun xavfsiz route\"\"\"\n    try:\n        return app.send_static_file(filename)\n    except Exception as e:\n        app_logger.error(f\"Static file error for {filename}: {str(e)}\")\n        return \"File not found\", 404\n\n# ---- LOGIN ROUTES ----\n@app.route(\"/login\")\ndef login():\n    \"\"\"Login route - login_page ga yo'naltirish\"\"\"\n    return redirect(url_for(\"login_page\"))\n\n@app.route(\"/login_page\", methods=[\"GET\", \"POST\"])\ndef login_page():\n    # URL dan role parametrini tekshirish\n    role_param = request.args.get('role')\n\n    if role_param == 'staff':\n        return redirect(url_for(\"staff_login\"))\n    elif role_param == 'courier':\n        return redirect(url_for(\"courier_login\"))\n    elif role_param == 'admin':\n        return redirect(url_for(\"super_admin_login\"))\n    else:\n        # Regular user login\n        if request.method == \"POST\":\n            email = request.form.get(\"email\", \"\").strip()\n            password = request.form.get(\"password\", \"\")\n\n            if not email or not password:\n                flash(\"Email va parolni kiriting.\", \"error\")\n                return redirect(url_for(\"login_page\"))\n\n            conn = get_db()\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM users WHERE email = ?\", (email,))\n            user = cur.fetchone()\n            conn.close()\n\n            if user:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(user, 'keys'):\n                        user_dict = dict(user)\n                    elif isinstance(user, (tuple, list)) and len(user) >= 4:\n                        # Tuple format uchun manual dict yaratish\n                        columns = ['id', 'first_name', 'last_name', 'email', 'phone', 'password_hash', 'address', 'card_number', 'card_expiry', 'created_at', 'address_latitude', 'address_longitude', 'interface_language', 'font_size', 'dark_theme']\n                        user_dict = {columns[i]: user[i] if i < len(user) else None for i in range(len(columns))}\n                    else:\n                        flash(\"Foydalanuvchi ma'lumotlari noto'g'ri formatda.\", \"error\")\n                        return redirect(url_for(\"login_page\"))\n\n                    if check_password_hash(user_dict.get(\"password_hash\", \"\"), password):\n                        # User ma'lumotlarini alohida o'zgaruvchilarga saqlash\n                        user_id = user_dict.get(\"id\")\n                        user_first_name = user_dict.get(\"first_name\", \"\")\n                        user_last_name = user_dict.get(\"last_name\", \"\")\n                        user_email = user_dict.get(\"email\", \"\")\n\n                        session[\"user_id\"] = user_id\n                        session[\"user_name\"] = f\"{user_first_name} {user_last_name}\".strip()\n                        session[\"user_email\"] = user_email\n                        session['interface_language'] = user_dict.get('interface_language') or 'uz'\n                        session['font_size'] = user_dict.get('font_size') or 'medium'\n                        session['dark_theme'] = bool(user_dict.get('dark_theme', 0))\n                        flash(f\"Xush kelibsiz, {user_first_name}!\", \"success\")\n                        return redirect(url_for(\"index\"))\n                    else:\n                        flash(\"Noto'g'ri email yoki parol.\", \"error\")\n                        return redirect(url_for(\"login_page\"))\n                except Exception as login_error:\n                    app_logger.error(f\"User login processing error: {str(login_error)}\")\n                    flash(\"Login jarayonida xatolik yuz berdi.\", \"error\")\n                    return redirect(url_for(\"login_page\"))\n            else:\n                flash(\"Foydalanuvchi topilmadi.\", \"error\")\n                return redirect(url_for(\"login_page\"))\n\n        return render_template(\"login.html\")\n\n# ---- STAFF AUTH ----\n@app.route('/staff-secure-login-w7m2k', methods=[\"GET\", \"POST\"])\ndef staff_login():\n    \"\"\"Xodim kirish sahifasi\"\"\"\n    if request.method == \"POST\":\n        staff_id = request.form.get(\"staff_id\", \"\").strip()\n        password = request.form.get(\"password\", \"\")\n\n        if not staff_id or not password:\n            flash(\"ID va parolni kiriting.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n        # ID raqam ekanligini tekshirish\n        try:\n            staff_id_int = int(staff_id)\n        except ValueError:\n            flash(\"ID raqam bo'lishi kerak.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n        try:\n            conn = get_db()\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM staff WHERE id=?\", (staff_id_int,))\n            row = cur.fetchone()\n\n            if row:\n                # SQLite Row obyektini xavfsiz dict ga aylantirish\n                try:\n                    if hasattr(row, 'keys'):\n                        row_dict = dict(row)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        columns = ['id', 'first_name', 'last_name', 'birth_date', 'phone', 'passport_series', 'passport_number', 'password_hash', 'total_hours', 'orders_handled', 'last_activity', 'created_at']\n                        row_dict = {columns[i]: row[i] if i < len(row) else None for i in range(len(columns))}\n\n                    # Password hash ni tekshirish\n                    password_hash = row_dict.get(\"password_hash\", \"\")\n\n                    # Debug uchun\n                    app_logger.info(f\"Staff login attempt: ID={staff_id_int}, has_hash={bool(password_hash)}\")\n\n                    if password_hash and check_password_hash(password_hash, password):\n                        # Faollik vaqtini yangilash\n                        now = get_current_time()\n                        now_iso = now.isoformat()\n\n                        try:\n                            cur.execute(\"UPDATE staff SET last_activity = ? WHERE id = ?\", (now_iso, staff_id_int))\n                            conn.commit()\n                        except Exception as update_error:\n                            app_logger.warning(f\"Staff faollik yangilashda xatolik: {str(update_error)}\")\n\n                        # Session ma'lumotlarini saqlash\n                        session[\"staff_id\"] = row_dict[\"id\"]\n                        session[\"staff_name\"] = f\"{row_dict['first_name']} {row_dict['last_name']}\"\n\n                        conn.close()\n                        flash(f\"Xush kelibsiz, {row_dict['first_name']}!\", \"success\")\n                        return redirect(url_for(\"staff_dashboard\"))\n                    else:\n                        conn.close()\n                        flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                        app_logger.warning(f\"Failed login attempt for staff ID: {staff_id_int}\")\n                        return redirect(url_for(\"staff_login\"))\n\n                except Exception as dict_error:\n                    app_logger.error(f\"Staff row processing error: {str(dict_error)}\")\n                    conn.close()\n                    flash(\"Ma'lumotlarni qayta ishlashda xatolik.\", \"error\")\n                    return redirect(url_for(\"staff_login\"))\n            else:\n                conn.close()\n                flash(\"Noto'g'ri ID yoki parol.\", \"error\")\n                app_logger.warning(f\"Staff not found for ID: {staff_id_int}\")\n                return redirect(url_for(\"staff_login\"))\n\n        except Exception as e:\n            if 'conn' in locals():\n                conn.close()\n            app_logger.error(f\"Staff login error: {str(e)}\")\n            flash(\"Tizimda xatolik yuz berdi.\", \"error\")\n            return redirect(url_for(\"staff_login\"))\n\n    return render_template(\"staff_login.html\")\n\n@app.route('/staff-register-secure-x9n5k')\ndef staff_register():\n    \"\"\"Xodim ro'yxatdan o'tish sahifasi\"\"\"\n    try:\n        return render_template('staff_register.html')\n    except Exception as e:\n        app_logger.error(f\"Staff register error: {str(e)}\")\n        return render_template('error.html', error=\"Sahifa yuklanmadi\"), 500\n\n@app.route(\"/admin/logout\")\ndef staff_logout():\n    # Super admin bo'lsa, super admin sessionni saqlash\n    is_super_admin = session.get(\"super_admin\", False)\n    session.clear()\n    if is_super_admin:\n        session[\"super_admin\"] = True\n        flash(\"Staff sessiondan chiqildi, super admin sessioni saqlandi.\", \"info\")\n    return redirect(url_for(\"index\"))\n\n# ---- STAFF DASHBOARD ----\n\n@app.route(\"/admin/dashboard\")\n@login_required\ndef staff_dashboard():\n    cleanup_expired_orders()\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n        SELECT o.*,\n               GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n        FROM orders o\n        LEFT JOIN order_details od ON o.id = od.order_id\n        LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n        GROUP BY o.id\n        ORDER BY\n            CASE\n                WHEN o.status = 'ready' THEN 1\n                WHEN o.status = 'waiting' THEN 2\n                WHEN o.status = 'served' THEN 3\n                WHEN o.status = 'cancelled' THEN 4\n                ELSE 5\n            END,\n            o.eta_time ASC,\n            o.created_at ASC\n    \"\"\")\n    orders = cur.fetchall()\n    conn.close()\n    return render_template(\"staff_dashboard.html\", orders=orders, staff_name=session.get(\"staff_name\"))\n\n@app.route(\"/admin/menu\")\n@login_required\ndef staff_menu():\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM menu_items ORDER BY category, name\")\n    menu_items = cur.fetchall()\n    conn.close()\n    return render_template(\"staff_menu.html\", menu_items=menu_items, staff_name=session.get(\"staff_name\"))\n\n@app.route(\"/admin/add_menu_item\", methods=[\"POST\"])\n@login_required\ndef add_menu_item():\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    category = request.form.get(\"category\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n\n    if not all([name, price, category]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    try:\n        price = float(price)\n    except ValueError:\n        flash(\"Narx raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            # Rasm faylini saqlash\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            # Static/images papkasini yaratish\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            # Fayl nomini xavfsiz qilish\n            filename = secure_filename(file.filename)\n            # Unikal nom yaratish\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"staff_menu\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    # Jadval tuzilishini tekshirish va kerakli ustunlarni qo'shish\n    cur.execute(\"PRAGMA table_info(menu_items);\")\n    columns = [col[1] for col in cur.fetchall()]\n\n    if 'description' not in columns:\n        cur.execute(\"ALTER TABLE menu_items ADD COLUMN description TEXT;\")\n\n    if 'image_url' not in columns:\n        cur.execute(\"ALTER TABLE menu_items ADD COLUMN image_url TEXT;\")\n\n    # Ma'lumotni kiritish\n    cur.execute(\"INSERT INTO menu_items (name, price, category, description, image_url, created_at) VALUES (?, ?, ?, ?, ?, ?)\",\n               (name, price, category, description, image_url, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi mahsulot qo'shildi!\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/toggle_menu_item/<int:item_id>\", methods=[\"POST\"])\n@login_required\ndef toggle_menu_item(item_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE menu_items SET available = NOT available WHERE id = ?\", (item_id,))\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot holati o'zgartirildi.\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/edit_menu_item/<int:item_id>\", methods=[\"POST\"])\n@login_required\ndef edit_menu_item(item_id):\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n    discount_percentage = request.form.get(\"discount_percentage\", \"0\")\n\n    if not all([name, price]):\n        flash(\"Nom va narx majburiy.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    try:\n        price = float(price)\n        discount_percentage = float(discount_percentage)\n        if discount_percentage < 0 or discount_percentage > 100:\n            flash(\"Skidka 0 dan 100 gacha bo'lishi kerak.\", \"error\")\n            return redirect(url_for(\"staff_menu\"))\n    except ValueError:\n        flash(\"Narx va skidka raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"staff_menu\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            filename = secure_filename(file.filename)\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"staff_menu\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n\n    if image_url:\n        cur.execute(\"\"\"\n            UPDATE menu_items\n            SET name = ?, price = ?, description = ?, discount_percentage = ?, image_url = ?\n            WHERE id = ?\n        \"\"\", (name, price, description, discount_percentage, image_url, item_id))\n    else:\n        cur.execute(\"\"\"\n            UPDATE menu_items\n            SET name = ?, price = ?, description = ?, discount_percentage = ?\n            WHERE id = ?\n        \"\"\", (name, price, description, discount_percentage, item_id))\n\n    conn.commit()\n    conn.close()\n    flash(\"Mahsulot tahrirlandi!\", \"success\")\n    return redirect(url_for(\"staff_menu\"))\n\n@app.route(\"/admin/order/<int:order_id>/served\", methods=[\"POST\"])\n@login_required\ndef staff_mark_served(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='served' WHERE id=?;\", (order_id,))\n\n    # Xodimning bajargan buyurtmalar sonini oshirish\n    staff_id = session.get(\"staff_id\")\n    if staff_id:\n        cur.execute(\"UPDATE staff SET orders_handled = COALESCE(orders_handled, 0) + 1 WHERE id = ?\", (staff_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma foydalanuvchiga berildi sifatida belgilandi.\", \"success\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n@app.route(\"/admin/order/<int:order_id>/ready\", methods=[\"POST\"])\n@login_required\ndef staff_mark_ready(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='ready' WHERE id=?;\", (order_id,))\n\n    # Xodimning bajargan buyurtmalar sonini oshirish\n    staff_id = session.get(\"staff_id\")\n    if staff_id:\n        cur.execute(\"UPDATE staff SET orders_handled = COALESCE(orders_handled, 0) + 1 WHERE id = ?\", (staff_id,))\n\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma 'tayyor' deb belgilandi.\", \"success\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n@app.route(\"/admin/order/<int:order_id>/cancel\", methods=[\"POST\"])\n@login_required\ndef staff_mark_cancel(order_id):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"UPDATE orders SET status='cancelled' WHERE id=?;\", (order_id,))\n    conn.commit()\n    conn.close()\n    flash(\"Buyurtma bekor qilindi.\", \"warning\")\n    return redirect(url_for(\"staff_dashboard\"))\n\n\n\n@app.route(\"/user/cancel/<int:ticket_no>\", methods=[\"POST\"])\ndef user_cancel(ticket_no):\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM orders WHERE ticket_no=? ORDER BY id DESC LIMIT 1\", (ticket_no,))\n    order = cur.fetchone()\n    if not order:\n        conn.close()\n        return jsonify({\"ok\": False, \"msg\": \"Buyurtma topilmadi\"}), 404\n    if order['status'] in ('served', 'ready'):\n        conn.close()\n        return jsonify({\"ok\": False, \"msg\": \"Buyurtma allaqachon tayyor yoki berilgan, bekor qilib bo'lmaydi\"}), 400\n    cur.execute(\"UPDATE orders SET status='cancelled' WHERE id=?\", (order['id'],))\n    conn.commit()\n    conn.close()\n    return jsonify({\"ok\": True, \"msg\": \"Buyurtma bekor qilindi\"})\n@app.route(\"/admin/orders.json\")\n@login_required\ndef staff_orders_json():\n    \"\"\"Super admin uchun barcha buyurtmalar JSON formatida\"\"\"\n    try:\n        cleanup_expired_orders()\n        orders = execute_query(\"\"\"\n            SELECT o.*,\n                   GROUP_CONCAT(mi.name || ' x' || od.quantity) as order_items\n            FROM orders o\n            LEFT JOIN order_details od ON o.id = od.order_id\n            LEFT JOIN menu_items mi ON od.menu_item_id = mi.id\n            GROUP BY o.id\n            ORDER BY created_at ASC\n        \"\"\", fetch_all=True)\n        return jsonify([dict(order) for order in orders])\n    except Exception as e:\n        app_logger.error(f\"Staff orders.json error: {str(e)}\")\n        return jsonify([]), 500\n\n@app.route(\"/admin/employees\")\n@login_required\ndef staff_employees():\n    \"\"\"Xodimlar ro'yxatini ko'rish\"\"\"\n    employees_file = 'employees.json'\n    employees = []\n\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees = json.load(f)\n        except (json.JSONDecodeError, FileNotFoundError):\n            employees = []\n\n    return render_template(\"staff_employees.html\", employees=employees, staff_name=session.get(\"staff_name\"))\n\n# ---- SUPER ADMIN ----\n# Super admin kredentsiallari - universal konfiguratsiyadan\nSUPER_ADMIN_USERNAME = Config.SUPER_ADMIN_USERNAME\nSUPER_ADMIN_PASSWORD = Config.SUPER_ADMIN_PASSWORD\n\n@app.route(\"/super-admin-control-panel-master-z8x9k\", methods=[\"GET\", \"POST\"])\ndef super_admin_login():\n    if request.method == \"GET\":\n        return render_template(\"super_admin_login.html\")\n\n    # POST method\n    username = request.form.get(\"username\", \"\").strip()\n    password = request.form.get(\"password\", \"\")\n\n    if username == SUPER_ADMIN_USERNAME and password == SUPER_ADMIN_PASSWORD:\n        session[\"super_admin\"] = True\n        flash(\"Super admin paneliga kirish muvaffaqiyatli!\", \"success\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n    else:\n        flash(\"Noto'g'ri login yoki parol!\", \"error\")\n        return render_template(\"super_admin_login.html\")\n\n@app.route(\"/super-admin-dashboard-ultimate-m4st3r\")\ndef super_admin_dashboard():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = None\n    try:\n        conn = get_db()\n        cur = conn.cursor()\n\n        # Xodimlar ma'lumotlari - xavfsiz olish va dict ga aylantirish\n        staff_db = []\n        try:\n            cur.execute(\"SELECT * FROM staff ORDER BY created_at DESC\")\n            staff_raw = cur.fetchall() or []\n            for staff in staff_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(staff, 'keys'):\n                        staff_dict = dict(staff)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        staff_dict = {\n                            'id': int(staff[0]) if staff[0] is not None else 0,\n                            'first_name': str(staff[1]) if len(staff) > 1 and staff[1] is not None else '',\n                            'last_name': str(staff[2]) if len(staff) > 2 and staff[2] is not None else '',\n                            'birth_date': str(staff[3]) if len(staff) > 3 and staff[3] is not None else '',\n                            'phone': str(staff[4]) if len(staff) > 4 and staff[4] is not None else '',\n                            'passport_series': str(staff[5]) if len(staff) > 5 and staff[5] is not None else '',\n                            'passport_number': str(staff[6]) if len(staff) > 6 and staff[6] is not None else '',\n                            'password_hash': str(staff[7]) if len(staff) > 7 and staff[7] is not None else '',\n                            'total_hours': float(staff[8]) if len(staff) > 8 and staff[8] is not None else 0.0,\n                            'orders_handled': int(staff[9]) if len(staff) > 9 and staff[9] is not None else 0,\n                            'last_activity': str(staff[10]) if len(staff) > 10 and staff[10] is not None else '',\n                            'created_at': str(staff[11]) if len(staff) > 11 and staff[11] is not None else ''\n                        }\n\n                    # Xavfsiz total_hours va orders_handled konversiyasi\n                    try:\n                        if 'total_hours' in staff_dict:\n                            total_hours_val = staff_dict['total_hours']\n                            if isinstance(total_hours_val, str):\n                                if total_hours_val.replace('.', '').replace(',', '').isdigit():\n                                    staff_dict['total_hours'] = float(total_hours_val.replace(',', '.'))\n                                else:\n                                    staff_dict['total_hours'] = 0.0\n                            elif total_hours_val is None:\n                                staff_dict['total_hours'] = 0.0\n                            else:\n                                staff_dict['total_hours'] = float(total_hours_val)\n                    except (ValueError, TypeError):\n                        staff_dict['total_hours'] = 0.0\n\n                    try:\n                        if 'orders_handled' in staff_dict:\n                            orders_val = staff_dict['orders_handled']\n                            if isinstance(orders_val, str):\n                                if orders_val.isdigit():\n                                    staff_dict['orders_handled'] = int(orders_val)\n                                else:\n                                    staff_dict['orders_handled'] = 0\n                            elif orders_val is None:\n                                staff_dict['orders_handled'] = 0\n                            else:\n                                staff_dict['orders_handled'] = int(orders_val)\n                    except (ValueError, TypeError):\n                        staff_dict['orders_handled'] = 0\n\n                    staff_db.append(staff_dict)\n\n                except Exception as staff_error:\n                    app_logger.error(f\"Staff {staff[0] if staff and len(staff) > 0 else 'N/A'} qayta ishlashda xatolik: {str(staff_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        staff_db.append({\n                            'id': int(staff[0]) if staff and len(staff) > 0 and staff[0] is not None else 0,\n                            'first_name': str(staff[1]) if staff and len(staff) > 1 and staff[1] is not None else 'N/A',\n                            'last_name': str(staff[2]) if staff and len(staff) > 2 and staff[2] is not None else 'N/A',\n                            'birth_date': str(staff[3]) if staff and len(staff) > 3 and staff[3] is not None else 'N/A',\n                            'phone': str(staff[4]) if staff and len(staff) > 4 and staff[4] is not None else 'N/A',\n                            'passport_series': 'N/A',\n                            'passport_number': 'N/A',\n                            'password_hash': '',\n                            'total_hours': 0.0,\n                            'orders_handled': 0,\n                            'last_activity': '',\n                            'created_at': str(staff[11]) if staff and len(staff) > 11 and staff[11] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Staff ma'lumotlarini olishda xatolik: {str(e)}\")\n            staff_db = []  # Bo'sh list bilan davom etish\n\n        # Kuryerlar ma'lumotlari - xavfsiz olish va dict ga aylantirish\n        couriers_db = []\n        try:\n            cur.execute(\"SELECT * FROM couriers ORDER BY created_at DESC\")\n            couriers_raw = cur.fetchall() or []\n            for courier in couriers_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(courier, 'keys'):\n                        courier_dict = dict(courier)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        courier_dict = {\n                            'id': int(courier[0]) if courier[0] is not None else 0,\n                            'first_name': str(courier[1]) if len(courier) > 1 and courier[1] is not None else '',\n                            'last_name': str(courier[2]) if len(courier) > 2 and courier[2] is not None else '',\n                            'birth_date': str(courier[3]) if len(courier) > 3 and courier[3] is not None else '',\n                            'phone': str(courier[4]) if len(courier) > 4 and courier[4] is not None else '',\n                            'passport_series': str(courier[5]) if len(courier) > 5 and courier[5] is not None else '',\n                            'passport_number': str(courier[6]) if len(courier) > 6 and courier[6] is not None else '',\n                            'password_hash': str(courier[7]) if len(courier) > 7 and courier[7] is not None else '',\n                            'total_hours': float(courier[8]) if len(courier) > 8 and courier[8] is not None else 0.0,\n                            'deliveries_completed': int(courier[9]) if len(courier) > 9 and courier[9] is not None else 0,\n                            'last_activity': str(courier[10]) if len(courier) > 10 and courier[10] is not None else '',\n                            'created_at': str(courier[11]) if len(courier) > 11 and courier[11] is not None else ''\n                        }\n\n                    # Xavfsiz total_hours va deliveries_completed konversiyasi\n                    try:\n                        if 'total_hours' in courier_dict:\n                            total_hours_val = courier_dict['total_hours']\n                            if isinstance(total_hours_val, str):\n                                if total_hours_val.replace('.', '').replace(',', '').isdigit():\n                                    courier_dict['total_hours'] = float(total_hours_val.replace(',', '.'))\n                                else:\n                                    courier_dict['total_hours'] = 0.0\n                            elif total_hours_val is None:\n                                courier_dict['total_hours'] = 0.0\n                            else:\n                                courier_dict['total_hours'] = float(total_hours_val)\n                    except (ValueError, TypeError):\n                        courier_dict['total_hours'] = 0.0\n\n                    try:\n                        if 'deliveries_completed' in courier_dict:\n                            deliveries_val = courier_dict['deliveries_completed']\n                            if isinstance(deliveries_val, str):\n                                if deliveries_val.isdigit():\n                                    courier_dict['deliveries_completed'] = int(deliveries_val)\n                                else:\n                                    courier_dict['deliveries_completed'] = 0\n                            elif deliveries_val is None:\n                                courier_dict['deliveries_completed'] = 0\n                            else:\n                                courier_dict['deliveries_completed'] = int(deliveries_val)\n                    except (ValueError, TypeError):\n                        courier_dict['deliveries_completed'] = 0\n\n                    couriers_db.append(courier_dict)\n\n                except Exception as courier_error:\n                    app_logger.error(f\"Courier {courier[0] if courier and len(courier) > 0 else 'N/A'} qayta ishlashda xatolik: {str(courier_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        couriers_db.append({\n                            'id': int(courier[0]) if courier and len(courier) > 0 and courier[0] is not None else 0,\n                            'first_name': str(courier[1]) if courier and len(courier) > 1 and courier[1] is not None else 'N/A',\n                            'last_name': str(courier[2]) if courier and len(courier) > 2 and courier[2] is not None else 'N/A',\n                            'birth_date': str(courier[3]) if courier and len(courier) > 3 and courier[3] is not None else 'N/A',\n                            'phone': str(courier[4]) if courier and len(courier) > 4 and courier[4] is not None else 'N/A',\n                            'passport_series': 'N/A',\n                            'passport_number': 'N/A',\n                            'password_hash': '',\n                            'total_hours': 0.0,\n                            'deliveries_completed': 0,\n                            'last_activity': '',\n                            'created_at': str(courier[11]) if courier and len(courier) > 11 and courier[11] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Couriers ma'lumotlarini olishda xatolik: {str(e)}\")\n            couriers_db = []  # Bo'sh list bilan davom etish\n\n        # Foydalanuvchilarni olish - xavfsiz va dict ga aylantirish\n        users_db = []\n        try:\n            cur.execute(\"SELECT * FROM users ORDER BY created_at DESC\")\n            users_raw = cur.fetchall() or []\n            for user in users_raw:\n                try:\n                    # SQLite Row obyektini xavfsiz dict ga aylantirish\n                    if hasattr(user, 'keys'):\n                        user_dict = dict(user)\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        user_dict = {\n                            'id': int(user[0]) if user[0] is not None else 0,\n                            'first_name': str(user[1]) if len(user) > 1 and user[1] is not None else '',\n                            'last_name': str(user[2]) if len(user) > 2 and user[2] is not None else '',\n                            'email': str(user[3]) if len(user) > 3 and user[3] is not None else '',\n                            'phone': str(user[4]) if len(user) > 4 and user[4] is not None else '',\n                            'password_hash': str(user[5]) if len(user) > 5 and user[5] is not None else '',\n                            'address': str(user[6]) if len(user) > 6 and user[6] is not None else '',\n                            'card_number': str(user[7]) if len(user) > 7 and user[7] is not None else '',\n                            'card_expiry': str(user[8]) if len(user) > 8 and user[8] is not None else '',\n                            'created_at': str(user[9]) if len(user) > 9 and user[9] is not None else ''\n                        }\n\n                    users_db.append(user_dict)\n\n                except Exception as user_error:\n                    app_logger.error(f\"User {user[0] if user and len(user) > 0 else 'N/A'} qayta ishlashda xatolik: {str(user_error)}\")\n                    # Xatolik bo'lsa ham minimal ma'lumot bilan davom etish\n                    try:\n                        users_db.append({\n                            'id': int(user[0]) if user and len(user) > 0 and user[0] is not None else 0,\n                            'first_name': str(user[1]) if user and len(user) > 1 and user[1] is not None else 'N/A',\n                            'last_name': str(user[2]) if user and len(user) > 2 and user[2] is not None else 'N/A',\n                            'email': str(user[3]) if user and len(user) > 3 and user[3] is not None else 'N/A',\n                            'phone': 'N/A',\n                            'password_hash': '',\n                            'address': 'N/A',\n                            'card_number': 'N/A',\n                            'card_expiry': 'N/A',\n                            'created_at': str(user[9]) if user and len(user) > 9 and user[9] is not None else ''\n                        })\n                    except:\n                        continue\n\n        except Exception as e:\n            app_logger.error(f\"Users ma'lumotlarini olishda xatolik: {str(e)}\")\n            users_db = []  # Bo'sh list bilan davom etish\n\n        # JSON fayldan foydalanuvchilarni olish - xavfsiz\n        users_json = []\n        users_file = 'users.json'\n        if os.path.exists(users_file):\n            try:\n                with open(users_file, 'r', encoding='utf-8') as f:\n                    users_json = json.load(f) or []\n            except (json.JSONDecodeError, FileNotFoundError, Exception) as e:\n                app_logger.warning(f\"Users JSON faylini o'qishda xatolik: {str(e)}\")\n                users_json = []\n\n        # Savollarni olish - xavfsiz\n        try:\n            cur.execute(\"SELECT * FROM questions ORDER BY created_at DESC\")\n            questions = cur.fetchall() or []\n        except Exception as e:\n            app_logger.error(f\"Questions ma'lumotlarini olishda xatolik: {str(e)}\")\n            questions = []\n\n        # Filiallarni olish - xavfsiz va baho qo'shish\n        branches = []\n        try:\n            cur.execute(\"SELECT * FROM branches ORDER BY created_at DESC\")\n            branches_raw = cur.fetchall() or []\n\n            for branch_row in branches_raw:\n                try:\n                    # Safe access to branch data, assuming branch_row is a dictionary-like object from fetchall\n                    if hasattr(branch_row, 'keys'):\n                        branch_dict = dict(zip(branch_row.keys(), branch_row))\n                    else:\n                        # Tuple format uchun manual dict yaratish\n                        branch_dict = {\n                            'id': int(branch_row[0]) if len(branch_row) > 0 and branch_row[0] is not None else 0,\n                            'name': str(branch_row[1]) if len(branch_row) > 1 and branch_row[1] is not None else 'N/A',\n                            'address': str(branch_row[2]) if len(branch_row) > 2 and branch_row[2] is not None else 'N/A',\n                            'latitude': 0.0,\n                            'longitude': 0.0,\n                            'phone': str(branch_row[5]) if len(branch_row) > 5 and branch_row[5] is not None else 'N/A',\n                            'working_hours': str(branch_row[6]) if len(branch_row) > 6 and branch_row[6] is not None else '09:00-22:00',\n                            'is_active': int(branch_row[7]) if len(branch_row) > 7 and branch_row[7] is not None else 1,\n                            'delivery_radius': 15.0,\n                            'created_at': str(branch_row[9]) if len(branch_row) > 9 and branch_row[9] is not None else ''\n                        }\n\n                        # Safe coordinate conversion\n                        try:\n                            if len(branch_row) > 3 and branch_row[3] is not None:\n                                lat_val = branch_row[3]\n                                try:\n                                    if isinstance(lat_val, str):\n                                        # String bo'lsa, raqamga aylantirish\n                                        clean_lat = str(lat_val).replace(',', '.').strip()\n                                        if clean_lat and clean_lat.replace('.', '').replace('-', '').isdigit():\n                                            branch_dict['latitude'] = float(clean_lat)\n                                        else:\n                                            branch_dict['latitude'] = 41.2995  # Default Toshkent koordinatasi\n                                    elif isinstance(lat_val, (int, float)):\n                                        branch_dict['latitude'] = float(lat_val)\n                                    else:\n                                        branch_dict['latitude'] = 41.2995\n                                except (ValueError, TypeError) as coord_error:\n                                    app_logger.warning(f\"Latitude conversion error: {str(coord_error)}\")\n                                    branch_dict['latitude'] = 41.2995\n                            else:\n                                branch_dict['latitude'] = 41.2995\n                        except Exception as lat_error:\n                            app_logger.error(f\"Latitude processing error: {str(lat_error)}\")\n                            branch_dict['latitude'] = 41.2995\n\n                        try:\n                            if len(branch_row) > 4 and branch_row[4] is not None:\n                                lng_val = branch_row[4]\n                                if isinstance(lng_val, (int, float)):\n                                    branch_dict['longitude'] = float(lng_val)\n                                elif isinstance(lng_val, str) and lng_val.replace(',', '.').strip():\n                                    # String dan float ga xavfsiz aylantirish\n                                    clean_lng = lng_val.replace(',', '.').strip()\n                                    if clean_lng and clean_lng != '':\n                                        try:\n                                            branch_dict['longitude'] = float(clean_lng)\n                                        except (ValueError, TypeError):\n                                            branch_dict['longitude'] = 0.0\n                                    else:\n                                        branch_dict['longitude'] = 0.0\n                                else:\n                                    branch_dict['longitude'] = 0.0\n                            else:\n                                branch_dict['longitude'] = 0.0\n                        except (ValueError, TypeError):\n                            branch_dict['longitude'] = 0.0\n\n                        try:\n                            if len(branch_row) > 8 and branch_row[8] is not None:\n                                radius_val = branch_row[8]\n                                if isinstance(radius_val, (int, float)):\n                                    branch_dict['delivery_radius'] = float(radius_val)\n                                elif isinstance(radius_val, str) and radius_val.replace('.', '').isdigit():\n                                    branch_dict['delivery_radius'] = float(radius_val)\n                                else:\n                                    branch_dict['delivery_radius'] = 15.0\n                            else:\n                                branch_dict['delivery_radius'] = 15.0\n                        except (ValueError, TypeError):\n                            branch_dict['delivery_radius'] = 15.0\n\n\n                    # Baho ma'lumotlarini xavfsiz olish\n                    try:\n                        rating_data = get_branch_average_rating(int(branch_dict['id']))\n                        branch_dict['average_rating'] = float(rating_data.get('average_rating', 0.0))\n                        branch_dict['total_ratings'] = int(rating_data.get('total_ratings', 0))\n                    except Exception as rating_error:\n                        app_logger.warning(f\"Branch {branch_dict['id']} bahosini olishda xatolik: {str(rating_error)}\")\n                        branch_dict['average_rating'] = 0.0\n                        branch_dict['total_ratings'] = 0\n\n                    branches.append(branch_dict)\n\n                except Exception as branch_error:\n                    app_logger.error(f\"Branch ma'lumotini qayta ishlashda xatolik: {str(branch_error)}\")\n                    continue\n\n        except Exception as e:\n            app_logger.error(f\"Branches ma'lumotlarini olishda xatolik: {str(e)}\")\n            branches = []\n\n        # Buyurtmalar statistikasi - xavfsiz hisoblash\n        stats = {\n            'total_orders': 0,\n            'waiting_orders': 0,\n            'ready_orders': 0,\n            'served_orders': 0,\n            'month_orders': 0,\n            'total_staff': len(staff_db),\n            'total_couriers': len(couriers_db),\n            'total_users': len(users_db),\n            'total_users_json': len(users_json)\n        }\n\n        try:\n            # Jami buyurtmalar\n            cur.execute(\"SELECT COUNT(*) FROM orders\")\n            result = cur.fetchone()\n            stats['total_orders'] = result[0] if result else 0\n\n            # Status bo'yicha statistika\n            status_queries = [\n                ('waiting_orders', \"SELECT COUNT(*) FROM orders WHERE status='waiting'\"),\n                ('ready_orders', \"SELECT COUNT(*) FROM orders WHERE status='ready'\"),\n                ('served_orders', \"SELECT COUNT(*) FROM orders WHERE status='served'\")\n            ]\n\n            for stat_key, query in status_queries:\n                try:\n                    cur.execute(query)\n                    result = cur.fetchone()\n                    stats[stat_key] = result[0] if result else 0\n                except Exception as e:\n                    app_logger.warning(f\"{stat_key} statistikasini olishda xatolik: {str(e)}\")\n                    stats[stat_key] = 0\n\n            # Bu oylik statistika\n            try:\n                current_month = get_current_time().strftime(\"%Y-%m\")\n                cur.execute(\"SELECT COUNT(*) FROM orders WHERE created_at LIKE ?\", (f\"{current_month}%\",))\n                result = cur.fetchone()\n                stats['month_orders'] = result[0] if result else 0\n            except Exception as e:\n                app_logger.warning(f\"Oylik statistikani olishda xatolik: {str(e)}\")\n                stats['month_orders'] = 0\n\n        except Exception as e:\n            app_logger.error(f\"Statistikalarni hisoblashda xatolik: {str(e)}\")\n\n        if conn:\n            conn.close()\n\n        return render_template(\"super_admin_dashboard.html\",\n                             staff_db=staff_db or [],\n                             couriers_db=couriers_db or [],\n                             users_db=users_db or [],\n                             users_json=users_json or [],\n                             questions=questions or [],\n                             branches=branches or [],\n                             stats=stats)\n\n    except Exception as e:\n        app_logger.error(f\"Super admin dashboard xatoligi: {str(e)}\")\n        if conn:\n            try:\n                conn.close()\n            except:\n                pass\n\n        # Emergency fallback\n        try:\n            return render_template(\"super_admin_dashboard.html\",\n                                 staff_db=[],\n                                 couriers_db=[],\n                                 users_db=[],\n                                 users_json=[],\n                                 questions=[],\n                                 branches=[],\n                                 stats={'total_orders': 0, 'waiting_orders': 0, 'ready_orders': 0,\n                                       'served_orders': 0, 'month_orders': 0, 'total_staff': 0,\n                                       'total_couriers': 0, 'total_users': 0, 'total_users_json': 0})\n        except Exception as template_error:\n            app_logger.critical(f\"Template render ham ishlamadi: {str(template_error)}\")\n            return f\"\"\"\n            <h1>Super Admin Dashboard</h1>\n            <p>Dashboard yuklashda xatolik: {str(e)}</p>\n            <a href=\"{url_for('super_admin_login')}\">Login sahifasiga qaytish</a>\n            \"\"\", 500\n\n@app.route(\"/super-admin/delete-staff/<int:staff_id>\", methods=[\"POST\"])\ndef super_admin_delete_staff(staff_id):\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM staff WHERE id = ?\", (staff_id,))\n    conn.commit()\n    conn.close()\n\n    # JSON fayldan ham o'chirish\n    employees_file = 'employees.json'\n    if os.path.exists(employees_file):\n        try:\n            with open(employees_file, 'r', encoding='utf-8') as f:\n                employees = json.load(f)\n\n            employees = [emp for emp in employees if emp.get('id') != staff_id]\n\n            with open(employees_file, 'w', encoding='utf-8') as f:\n                json.dump(employees, f, ensure_ascii=False, indent=2)\n        except:\n            pass\n\n    flash(f\"Xodim #{staff_id} o'chirildi.\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-staff\", methods=[\"POST\"])\ndef super_admin_add_staff():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    first_name = request.form.get(\"first_name\", \"\").strip()\n    last_name = request.form.get(\"last_name\", \"\").strip()\n    birth_date = request.form.get(\"birth_date\", \"\").strip()\n    phone = request.form.get(\"phone\", \"\").strip()\n    passport_series = request.form.get(\"passport_series\", \"\").strip()\n    passport_number = request.form.get(\"passport_number\", \"\").strip()\n    password = request.form.get(\"password\", \"\")\n\n    if not all([first_name, last_name, birth_date, phone, passport_series, passport_number, password]):\n        flash(\"Barcha maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    password_hash = generate_password_hash(password)\n    now = get_current_time()\n    cur.execute(\"\"\"\n        INSERT INTO staff (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n    \"\"\", (first_name, last_name, birth_date, phone, passport_series, passport_number, password_hash, now.isoformat()))\n\n    new_id = cur.lastrowid\n    # ID kamida 5 ta raqamdan iborat bo'lishi uchun\n    if new_id < 10000:\n        cur.execute(\"UPDATE staff SET id = ? WHERE id = ?\", (10000 + new_id, new_id))\n        new_id = 10000 + new_id\n\n    conn.commit()\n    conn.close()\n\n    # JSON fayliga ham saqlash\n    save_staff_to_json(first_name, last_name, birth_date, phone, new_id, now)\n\n    flash(f\"Yangi xodim qo'shildi. ID: {new_id}\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-menu-item\", methods=[\"POST\"])\ndef super_admin_add_menu_item():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    name = request.form.get(\"name\", \"\").strip()\n    price = request.form.get(\"price\", \"\")\n    category = request.form.get(\"category\", \"\")\n    description = request.form.get(\"description\", \"\").strip()\n\n    if not all([name, price, category]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    try:\n        price = float(price)\n    except ValueError:\n        flash(\"Narx raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    # Rasm yuklash\n    image_url = None\n    if 'image' in request.files:\n        file = request.files['image']\n        if file and file.filename != '':\n            import uuid\n            from werkzeug.utils import secure_filename\n\n            images_dir = os.path.join('static', 'images')\n            if not os.path.exists(images_dir):\n                os.makedirs(images_dir)\n\n            filename = secure_filename(file.filename)\n            unique_filename = f\"{uuid.uuid4().hex}_{filename}\"\n            file_path = os.path.join(images_dir, unique_filename)\n\n            try:\n                file.save(file_path)\n                image_url = f\"/static/images/{unique_filename}\"\n            except Exception as e:\n                flash(\"Rasmni yuklashda xatolik yuz berdi.\", \"error\")\n                return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    cur.execute(\"INSERT INTO menu_items (name, price, category, description, image_url, created_at) VALUES (?, ?, ?, ?, ?, ?)\",\n               (name, price, category, description, image_url, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi mahsulot qo'shildi!\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/add-branch\", methods=[\"POST\"])\ndef super_admin_add_branch():\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    name = request.form.get(\"name\", \"\").strip()\n    address = request.form.get(\"address\", \"\").strip()\n    latitude = request.form.get(\"latitude\", \"\")\n    longitude = request.form.get(\"longitude\", \"\")\n    phone = request.form.get(\"phone\", \"\").strip()\n    working_hours = request.form.get(\"working_hours\", \"09:00-22:00\")\n    delivery_radius = request.form.get(\"delivery_radius\", \"15\")\n\n    if not all([name, address, latitude, longitude]):\n        flash(\"Barcha majburiy maydonlarni to'ldiring.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    try:\n        latitude = float(latitude)\n        longitude = float(longitude)\n        delivery_radius = float(delivery_radius)\n    except ValueError:\n        flash(\"Koordinatalar va yetkazish radiusi raqam bo'lishi kerak.\", \"error\")\n        return redirect(url_for(\"super_admin_dashboard\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    now = get_current_time().isoformat()\n\n    cur.execute(\"\"\"\n        INSERT INTO branches (name, address, latitude, longitude, phone, working_hours, delivery_radius, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    \"\"\", (name, address, latitude, longitude, phone, working_hours, delivery_radius, now))\n\n    conn.commit()\n    conn.close()\n    flash(\"Yangi filial qo'shildi!\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/delete-branch/<int:branch_id>\", methods=[\"POST\"])\ndef super_admin_delete_branch(branch_id):\n    if not session.get(\"super_admin\"):\n        return redirect(url_for(\"super_admin_login\"))\n\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM branches WHERE id = ?\", (branch_id,))\n    conn.commit()\n    conn.close()\n\n    flash(f\"Filial #{branch_id} o'chirildi.\", \"success\")\n    return redirect(url_for(\"super_admin_dashboard\"))\n\n@app.route(\"/super-admin/logout\")\ndef super_admin_logout():\n    \"\"\"Super admin panelidan chiqish\"\"\"\n    session.pop(\"super_admin\", None)\n    flash(\"Super admin panelidan chiqdingiz.\", \"info\")\n","size_bytes":167084},"replit.md":{"content":"# Overview\n\nThis is a comprehensive restaurant management system built with Flask, designed to handle customer orders, staff operations, courier delivery services, and administrative functions. The system provides a multi-role platform supporting customers, staff members, couriers, and super administrators with distinct interfaces and capabilities.\n\nThe application features order management with automatic ticket generation and ETA calculation, menu management with category support and image uploads, real-time order tracking, delivery services with location integration, and comprehensive analytics and reporting tools.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Template Engine**: Jinja2 templates with responsive Bootstrap 5 styling\n- **Multi-language Support**: Built-in translation system supporting Uzbek, Russian, English, Turkish, Arabic, and Persian\n- **Progressive Web App (PWA)**: Service worker implementation with offline capabilities and caching\n- **Real-time Updates**: Auto-refresh functionality for order status and dashboards (10-second intervals)\n- **Responsive Design**: Mobile-first approach with CSS Grid and Flexbox layouts\n\n## Backend Architecture\n- **Framework**: Flask web framework with modular route organization\n- **Session Management**: Flask sessions with configurable timeouts and security settings\n- **Authentication**: Multi-role authentication system (customers, staff, couriers, super admin)\n- **File Handling**: Image upload system for menu items with validation and storage\n- **Error Handling**: Comprehensive error pages and logging system\n- **Performance Monitoring**: Built-in performance dashboard and metrics tracking\n\n## Data Storage Solutions\n- **Primary Database**: SQLite for development with seamless migration path to PostgreSQL\n- **File Storage**: JSON files for employee and user data persistence\n- **Session Storage**: Server-side session management with configurable backends\n- **Cache Strategy**: Built-in caching for menu items and frequently accessed data\n- **Backup System**: Automated data backup and recovery mechanisms\n\n## Authentication and Authorization\n- **Multi-tier Access Control**: Four distinct user roles with specific permissions\n- **Password Security**: Werkzeug password hashing with salt generation\n- **Session Security**: HTTP-only cookies with CSRF protection and secure flags\n- **Registration System**: Automated ID generation for staff and couriers\n- **Role-based Navigation**: Dynamic menu generation based on user permissions\n\n## Business Logic Components\n- **Order Management**: Automated ticket generation with queue position tracking\n- **ETA Calculation**: Dynamic preparation time estimation based on queue length\n- **Menu Management**: Category-based organization with discount and availability controls\n- **Delivery System**: Integrated courier assignment and tracking\n- **Rating System**: Customer feedback collection and aggregation\n- **Analytics Engine**: Real-time statistics and performance metrics\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **Flask 3.0.0**: Main web framework with latest features\n- **Werkzeug 3.0.1**: WSGI utilities and security functions\n- **Jinja2**: Template rendering engine (via Flask)\n- **Bootstrap 5.3.2**: Frontend CSS framework via CDN\n\n## Database and ORM\n- **SQLite3**: Built-in Python database for development\n- **Flask-SQLAlchemy 3.1.1**: ORM layer for database operations\n- **Planned Migration**: PostgreSQL support for production deployment\n\n## Security and Authentication\n- **bcrypt 4.1.2**: Password hashing and verification\n- **Flask-Limiter 3.5.0**: Rate limiting for API endpoints\n- **Flask-CORS 4.0.0**: Cross-origin request handling\n- **CSRF Protection**: Built-in Flask-WTF integration\n\n## Media and File Processing\n- **Pillow 10.1.0**: Image processing and validation\n- **qrcode 7.4.2**: QR code generation for receipts\n- **File Upload System**: Custom implementation with validation\n\n## External API Services\n- **Yandex Maps API**: Location services and address validation\n- **Serper Places API**: Location search and validation services\n- **SMS/Email Services**: Notification system integration (configurable)\n\n## Production and Deployment\n- **Gunicorn 21.2.0**: WSGI HTTP server for production\n- **Flask-Compress 1.14**: Response compression middleware\n- **Redis 5.0.1**: Session storage and caching backend\n- **psutil 5.9.6**: System monitoring and performance metrics\n\n## Background Processing\n- **APScheduler 3.10.4**: Task scheduling and background jobs\n- **Celery 5.3.4**: Distributed task processing\n- **Threading**: Built-in Python threading for concurrent operations\n\n## Development and Monitoring\n- **python-dotenv 1.0.0**: Environment variable management\n- **pytz 2023.3**: Timezone handling and localization\n- **requests 2.31.0**: HTTP client for external API calls\n- **Custom Logging**: Comprehensive logging system with rotation","size_bytes":4987}},"version":1}